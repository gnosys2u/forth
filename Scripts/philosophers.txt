autoforget PHILOSOPHERS
: PHILOSOPHERS ;

mko Array philosophers
mko Array forks

100 -> int helpingsToEat
2 -> int eatingTime
2 -> int digestionTime
5 -> int defaultNumPhilosophers

class: Philosopher
  Thread eatingThread
  Lock firstFork
  Lock secondFork
  int id
  int timesFed
  int timesHungry
  
  m: delete
    oclear eatingThread
    oclear firstFork
    oclear secondFork
  ;m

  m: isHungry
    //timesFed helpingsToEat <
    eatingThread.getRunState kFTRSExited <>
  ;m
  
  m: run
    "philosopher " %s id %d " starting\n" %s
    begin
    while(timesFed helpingsToEat <)
      d[ "philosopher " %s id %d " grabbing first fork(" %s firstFork.id %d ")\n" %s ]d
      firstFork.grab
      d[ "philosopher " %s id %d " grabbing second fork(" %s secondFork.id %d ")\n" %s ]d
      secondFork.grab
      1 ->+ timesFed
      d[ "philosopher " %s id %d " ate " %s timesFed %d " time, going to sleep\n" %s ]d

      sleepThread(eatingTime)
      
      d[ "philosopher " %s id %d " ungrabbing first fork(" %s firstFork.id %d ")\n" %s ]d
      firstFork.ungrab
      d[ "philosopher " %s id %d " ungrabbing second fork(" %s secondFork.id %d ")\n" %s ]d
      secondFork.ungrab
      
      sleepThread(digestionTime)
      
    repeat
    "philosopher " %s id %d " done\n" %s
    exitThread
  ;m

  m: init
    -> secondFork
    -> firstFork
    -> id
    -> eatingThread
  ;m
  
;class

: philosopherLoop
  -> Philosopher phil
  phil.run
  oclear phil
;
  
: diningLoop
  "let the feast begin!\n" %s
  ms@ -> int feastStart

  philosophers.count -> int numPhilosophers
  do(numPhilosophers 0)
    philosophers.get(i) ->o Philosopher phil
    phil.init(createThread(lit philosopherLoop 1000 1000) i forks.get(i) forks.get(i 1+ numPhilosophers mod))
   "philosopher " %s i %d %bl phil.eatingThread.__thread %x %nl
    
    phil.eatingThread.startWithArgs(r[ phil ]r)
  loop
  
  do(numPhilosophers 0)
    philosophers.get(i) ->o phil
    phil.eatingThread.join
  loop
  
  "all philosophers stuffed!\n" %s
  ms@ feastStart - %d " milliseconds elapsed\n\n\n" %s
  
  philosophers.clear
  forks.clear
;

: diningPhilosophers
  -> int numPhilosophers
  Philosopher phil
  philosophers.clear
  forks.clear
  
  do(numPhilosophers 0)
    new Philosopher -> phil
    i -> phil.id
    philosophers.push(phil)
    oclear phil
    
    new Lock -> Lock fork
    i -> fork.id
    forks.push(fork)
    oclear fork
  loop

  diningLoop
;

: go
  defaultNumPhilosophers diningPhilosophers
;
  
loaddone

