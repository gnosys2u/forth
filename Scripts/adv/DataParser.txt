
requires IData

class: DataParser
  String line
  Array of String lineVector
  int verbNr
  int lineNumber
  // The data file is divided into different sections, this
  // variable keeps track of which section is being parsed
  int currentSection

  // Since a location's information can be stored on several
  // lines we need to keep track of the current location
  // number being processed

  Location currentLocation
  Location accessibleLocation
  Word currentWord
  MotionVerb currentMotionVerb
  Noun currentNoun
  Message currentMessage
  ActionVerb currentActionVerb
  int idNumber

  IData data
  FileInStream dataFile
  
  m: init
    -> data
    -> dataFile
    new String -> line
    line.resize(512)
    new Array -> lineVector
    1 -> lineNumber
    -1 -> currentSection
    -1 -> idNumber
  ;m

  m: delete
    oclear data
    oclear dataFile

    oclear currentLocation
    oclear accessibleLocation
    oclear currentWord
    oclear currentMotionVerb
    oclear currentNoun
    oclear currentMessage
    oclear currentActionVerb
  ;m

  : locationHasChanged
    -> int id
    ->o Location loc
    if(objIsNull(loc))
      true
    else
      loc.number id <>
    endif
  ;

  m: parseLongFormDescriptions
    // SECTION 1:
    //  LONG FORM DESCRIPTIONS. EACH LINE CONTAINS A LOCATION NUMBER,
    //  A TAB, AND A LINE OF TEXT. THE SET OF (NECESSARILY ADJACENT) LINES
    //  WHOSE NUMBERS ARE X FORM THE LONG DESCRIPTION OF LOCATION X.
    if(objIsNull(currentLocation))   orif(idNumber currentLocation.number <>)
      new Location -> currentLocation
      currentLocation.init(idNumber)
      data.locations.push(currentLocation)
    endif
    currentLocation.appendToLongDescription(lineVector.get(1))
  ;m

  m: parseShortFormDescriptions
    // SECTION 2:
    //   SHORT FORM DESCRIPTIONS.  SAME FORMAT AS LONG FORM. NOT ALL
    //   PLACES HAVE SHORT DESCRIPTIONS.
    if(objIsNull(currentLocation))   orif(idNumber currentLocation.number <>)
      data.getLocationByNumber(idNumber) -> currentLocation
    endif
    currentLocation.appendToShortDescription(lineVector.get(1))
  ;m
  
  m: parseTravelTable
    // SECTION 3:
    //   TRAVEL TABLE.  EACH LINE CONTAINS A LOCATION NUMBER (X), A SECOND
    //  	LOCATION NUMBER (Y), AND A LIST OF MOTION NUMBERS (SEE SECTION 4).
    //  	EACH MOTION REPRESENTS A VERB WHICH WILL GO TO Y IF CURRENTLY AT X.
    //  	Y, IN TURN, IS INTERPRETED AS FOLLOWS.  LET M=Y/1000, N=Y MOD 1000.
    //  		IF N<=300	IT IS THE LOCATION TO GO TO.
    //  		IF 300<N<=500	N-300 IS USED IN A COMPUTED GOTO TO
    //  					A SECTION OF SPECIAL CODE.
    //  		IF N>500	MESSAGE N-500 FROM SECTION 6 IS PRINTED,
    //  					AND HE STAYS WHEREVER HE IS.
    //  	MEANWHILE, M SPECIFIES THE CONDITIONS ON THE MOTION.
    //  		IF M=0		IT'S UNCONDITIONAL.
    //  		IF 0<M<100	IT IS DONE WITH M% PROBABILITY.
    //  		IF M=100	UNCONDITIONAL, BUT FORBIDDEN TO DWARVES.
    //  		IF 100<M<=200	HE MUST BE CARRYING OBJECT M-100.
    //  		IF 200<M<=300	MUST BE CARRYING OR IN SAME ROOM AS M-200.
    //  		IF 300<M<=400	PROP(M MOD 100) MUST *NOT* BE 0.
    //  		IF 400<M<=500	PROP(M MOD 100) MUST *NOT* BE 1.
    //  		IF 500<M<=600	PROP(M MOD 100) MUST *NOT* BE 2, ETC.
    //  	IF THE CONDITION (IF ANY) IS NOT MET, THEN THE NEXT *DIFFERENT*
    //  	"DESTINATION" VALUE IS USED (UNLESS IT FAILS TO MEET *ITS* CONDITIONS,
    //  	IN WHICH CASE THE NEXT IS FOUND, ETC.).  TYPICALLY, THE NEXT DEST WILL
    //  	BE FOR ONE OF THE SAME VERBS, SO THAT ITS ONLY USE IS AS THE ALTERNATE
    //  	DESTINATION FOR THOSE VERBS.  FOR INSTANCE:
    //  		15	110022	29	31	34	35	23	43
    //  		15	14	29
    //  	THIS SAYS THAT, FROM LOC 15, ANY OF THE VERBS 29, 31, ETC., WILL TAKE
    //  	HIM TO 22 IF HE'S CARRYING OBJECT 10, AND OTHERWISE WILL GO TO 14.
    //  		11	303008	49
    //  		11	9	50
    //  	THIS SAYS THAT, FROM 11, 49 TAKES HIM TO 8 UNLESS PROP(3)=0, IN WHICH
    //  	CASE HE GOES TO 9.  VERB 50 TAKES HIM TO 9 REGARDLESS OF PROP(3).
    false -> bool newLoc
    atoi(lineVector.get(1).get) -> int Y
    mod(Y 1000) ->  int N
          
    if(objIsNull(currentLocation))   orif(idNumber currentLocation.number <>)
      true -> newLoc
      data.getLocationByNumber(idNumber) -> currentLocation
      if(objIsNull(currentLocation))
        "ERROR: Section 3.1: Location not found: " %s idNumber %d %nl
      endif
    endif
          
    // TODO: N==0? What to do? What does it mean?
    // IF N<=300	IT IS THE LOCATION TO GO TO.
    if(within(N 1 300))
    
      if(objIsNull(accessibleLocation))   orif(N accessibleLocation.number <>)   orif(newLoc)
        data.getLocationByNumber(N) -> accessibleLocation
                  
        // For debugging
        if(objIsNull(accessibleLocation))
          "ERROR: Section 3.2: Location not found: " %s N %d %nl
        endif
                
        // Add the accessible Location
        currentLocation.addAccessibleLocation(accessibleLocation)
                  
        // Add the condition for going to this location
        new LocationCondition -> LocationCondition cond
        cond.init(Y 1000 / currentLocation accessibleLocation)
        data.locationConditions.push(cond)
        currentLocation.addLocationCondition(cond)
        oclear cond
                  
        // Add the possible MotionVerbs which can be used to go to this location
        -1 -> verbNr
        ?do(lineVector.count 2)
          atoi(lineVector.get(i).get) -> verbNr
          data.getMotionVerbByNumber(verbNr) -> currentMotionVerb
          if(objIsNull(currentMotionVerb))
            new MotionVerb -> currentMotionVerb
            currentMotionVerb.init(verbNr)
            data.words.push(currentMotionVerb)
          endif
          currentLocation.addMotionVerb(accessibleLocation currentMotionVerb)
        loop
      endif
    else
      // IF N>500	MESSAGE N-500 FROM SECTION 6 IS PRINTED, AND HE STAYS WHEREVER HE IS.
      if(N 500 >)
        if(objIsNull(currentMessage))   orif(N currentMessage.number <>)   orif(newLoc)
          data.getMessageByNumber(N 500 -) -> currentMessage
          if(objIsNull(currentMessage))
            new Message -> currentMessage
            currentMessage.init(N 500 -)
            data.messages.push(currentMessage)
          endif
          currentLocation.addPrintMessage(currentMessage)
                  
          // Add the possible MotionVerbs which can be used to go to this location
          -1 -> verbNr
          ?do(lineVector.count 2)
            atoi(lineVector.get(i).get) -> verbNr
            data.getMotionVerbByNumber(verbNr) -> currentMotionVerb
            if(objIsNull(currentMotionVerb))
              new MotionVerb -> currentMotionVerb
              currentMotionVerb.init(verbNr)
              data.words.push(currentMotionVerb)
            endif
            currentLocation.addMotionVerbForPrintMessage(currentMessage currentMotionVerb)
          loop
        endif

      endif
    endif
  ;m
  
  m: parseVocabulary
    // SECTION 4:
    //   VOCABULARY.  EACH LINE CONTAINS A NUMBER (N), A TAB, AND A
    //  	FIVE-LETTER WORD.  CALL M=N/1000.  IF M=0, THEN THE WORD IS A MOTION
    //  	VERB FOR USE IN TRAVELLING (SEE SECTION 3).  ELSE, IF M=1, THE WORD IS
    //  	AN OBJECT.  ELSE, IF M=2, THE WORD IS AN ACTION VERB (SUCH AS "CARRY"
    //  	OR "ATTACK").  ELSE, IF M=3, THE WORD IS A SPECIAL CASE VERB (SUCH AS
    //  	"DIG") AND N MOD 1000 IS AN INDEX INTO SECTION 6.  OBJECTS FROM 50 TO
    //  	(CURRENTLY, ANYWAY) 79 ARE CONSIDERED TREASURES (FOR PIRATE, CLOSEOUT).
    idNumber 1000 / -> int M
    
    if(objIsNull(currentWord))   orif(idNumber currentWord.number <>)
      true -> bool push
      // Check what type of word it is and create an appropriate object
      case(M)
      
        of(0)
          // Since some MotionVerbs were created in the previous section,
          // we need to make sure grab the old one and don't create a duplicate
          data.getMotionVerbByNumber(idNumber) -> currentWord
          if(objIsNull(currentWord))
            new MotionVerb -> currentWord
            currentWord.initWith(idNumber lineVector.get(1))
          else
            currentWord.addWord(lineVector.get(1))
            false -> push
          endif
        endof
        
        of(1)
          new Noun -> currentWord
          currentWord.initWith(idNumber lineVector.get(1))
          mod(idNumber 1000) -> int idx
          currentWord ->o Noun obj
          // OBJECTS FROM 50 TO 79 ARE CONSIDERED TREASURES
          if(within(idx 50 80))
            true -> obj.treasure
          else
            if(idx 2 =)
              true -> obj.lightable
            endif
          endif
        endof
        
        of(2)
          new ActionVerb -> currentWord
          currentWord.initWith(idNumber lineVector.get(1))
        endof
        
        of(3)
          new SpecialCaseVerb -> currentWord
          currentWord.initWith(idNumber lineVector.get(1))
        endof
      endcase

      // Add the word to our vector if needed (not needed for MotionVerbs already existing)
      if(push)
        data.words.push(currentWord)
      endif
    else
      currentWord.addWord(lineVector.get(1))
    endif

    // If a comment is supplied, add it to the word
    if(lineVector.count 2 >)
      lineVector.get(2) -> currentWord.comment
    endif
  ;m

  m: parseObjectDescriptions
    // SECTION 5:
    //   OBJECT DESCRIPTIONS.  EACH LINE CONTAINS A NUMBER (N), A TAB,
    //  	AND A MESSAGE.  IF N IS FROM 1 TO 100, THE MESSAGE IS THE "INVENTORY"
    //  	MESSAGE FOR OBJECT N.  OTHERWISE, N SHOULD BE 000, 100, 200, ETC., AND
    //  	THE MESSAGE SHOULD BE THE DESCRIPTION OF THE PRECEDING OBJECT WHEN ITS
    //  	PROP VALUE IS N/100.  THE N/100 IS USED ONLY TO DISTINGUISH MULTIPLE
    //  	MESSAGES FROM MULTI-LINE MESSAGES; THE PROP INFO ACTUALLY REQUIRES ALL
    //  	MESSAGES FOR AN OBJECT TO BE PRESENT AND CONSECUTIVE.  PROPERTIES WHICH
    //  	PRODUCE NO MESSAGE SHOULD BE GIVEN THE MESSAGE ">$<".
    if(objIsNull(currentNoun))   orif(within(idNumber 1 100))
      data.getObjectByNumber(idNumber) -> currentNoun
      //'a' %c currentNoun.show currentNoun.inventoryMessage %2x 'b' %c
      // For debugging
      if(objIsNull(currentNoun))
        "Object not found: " %s idNumber %d %nl
      else
        lineVector.get(1) -> currentNoun.inventoryMessage
      endif
    else
      // If this property description is another line from the previous one - append,
      // otherwise add as a new property description
      if(idNumber currentNoun.number =)
        currentNoun.appendToPropertyDescription(idNumber lineVector.get(1))
      else
        currentNoun.addPropertyDescription(lineVector.get(1))
      endif
    endif
  ;m
  
  m: parseArbitraryMessages
    // SECTION 6:
    //    ARBITRARY MESSAGES.  SAME FORMAT AS SECTIONS 1, 2, AND 5, EXCEPT
    //  	THE NUMBERS BEAR NO RELATION TO ANYTHING (EXCEPT FOR SPECIAL VERBS)
    if(objIsNull(currentMessage))   orif(idNumber currentMessage.number <>)
      data.getMessageByNumber(idNumber) -> currentMessage
              
      if(objIsNull(currentMessage))
        new Message -> currentMessage
        currentMessage.init(idNumber)
        data.messages.push(currentMessage)
      endif
    endif
    currentMessage.appendContent(lineVector.get(1))
  ;m

  m: parseObjectLocations
    // SECTION 7:
    //    OBJECT LOCATIONS.  EACH LINE CONTAINS AN OBJECT NUMBER AND ITS
    //  	INITIAL LOCATION (ZERO (OR OMITTED) IF NONE).  IF THE OBJECT IS
    //  	IMMOVABLE, THE LOCATION IS FOLLOWED BY A "-1".  IF IT HAS TWO LOCATIONS
    //  	(E.G. THE GRATE) THE FIRST LOCATION IS FOLLOWED WITH THE SECOND, AND
    //  	THE OBJECT IS ASSUMED TO BE IMMOVABLE.
    0 -> int locNr
    if(lineVector.count 1 >)
      atoi(lineVector.get(1).get) -> locNr
    endif
    // If second argument on the line is omitted or zero, the object has no initial location
    if(locNr 0<>)
      data.getObjectByNumber(idNumber) -> currentNoun
      data.getLocationByNumber(locNr) -> currentLocation
      if(and(objNotNull(currentNoun) objNotNull(currentLocation)))
        currentLocation.addObject(currentNoun)
        // Does this object have a second location? Or is it immovable?
        if(lineVector.count 2 >)
          atoi(lineVector.get(2).get) -> locNr
          if(locNr -1 <>)
            data.getLocationByNumber(locNr) -> currentLocation
            if(objNotNull(currentLocation))
              currentLocation.addObject(currentNoun)
            else
              "ERROR: Section 7.1: Could not find location\n" %s
            endif
          endif
          false -> currentNoun.movable
        endif
      else
        // For debugging
        "ERROR: Section 7.2: Could not find location\n" %s
      endif
    endif
  ;m
  
  m: parseActionDefaults
    // SECTION 8:
    //   ACTION DEFAULTS.  EACH LINE CONTAINS AN "ACTION-VERB" NUMBER AND
    //  	THE INDEX (IN SECTION 6) OF THE DEFAULT MESSAGE FOR THE VERB.
    if(objIsNull(currentActionVerb))   orif(idNumber currentActionVerb.number <>)
      data.getActionVerbByNumber(idNumber) -> currentActionVerb
      // For debugging
      if(objIsNull(currentActionVerb))
        "ERROR: Section 8.1: Could not find ActionVerb\n" %s
      endif
    endif
    data.getMessageByNumber(atoi(lineVector.get(1).get)) -> currentMessage
    // Some action verbs doesn't have a default message (0)
    if(objNotNull(currentMessage))
      currentMessage -> currentActionVerb.defaultMessage
    endif
  ;m

  m: parseLiquidAssets
    // SECTION 9:
    //   LIQUID ASSETS, ETC.  EACH LINE CONTAINS A NUMBER (N) AND UP TO 20
    //  	LOCATION NUMBERS.  BIT N (WHERE 0 IS THE UNITS BIT) IS SET IN COND(LOC)
    //  	FOR EACH LOC GIVEN.  THE COND BITS CURRENTLY ASSIGNED ARE:
    //  		0	LIGHT
    //  		1	IF BIT 2 IS ON: ON FOR OIL, OFF FOR WATER
    //  		2	LIQUID ASSET, SEE BIT 1
    //  		3	PIRATE DOESN'T GO HERE UNLESS FOLLOWING PLAYER
    //  	OTHER BITS ARE USED TO INDICATE AREAS OF INTEREST TO "HINT" ROUTINES:
    //  		4	TRYING TO GET INTO CAVE
    //  		5	TRYING TO CATCH BIRD
    //  		6	TRYING TO DEAL WITH SNAKE
    //  		7	LOST IN MAZE
    //  		8	PONDERING DARK ROOM
    //  		9	AT WITT'S END
    //  	COND(LOC) IS SET TO 2, OVERRIDING ALL OTHER BITS, IF LOC HAS FORCED
    //  	MOTION.
    ?do(lineVector.count 1)
      data.getLocationByNumber(atoi(lineVector.get(i).get)) -> currentLocation
              
      // For debugging
      if(objIsNull(currentLocation))
        "ERROR: Section 9.1: Could not find location\n" %s
      endif
              
      currentLocation.setAsset(idNumber true)
    loop
  ;m

  m: parseClassMessages
    // SECTION 10:
    //   CLASS MESSAGES.  EACH LINE CONTAINS A NUMBER (N), A TAB, AND A
    //  	MESSAGE DESCRIBING A CLASSIFICATION OF PLAYER.  THE SCORING SECTION
    //  	SELECTS THE APPROPRIATE MESSAGE, WHERE EACH MESSAGE IS CONSIDERED TO
    //  	APPLY TO PLAYERS WHOSE SCORES ARE HIGHER THAN THE PREVIOUS N BUT NOT
    //  	HIGHER THAN THIS N.  NOTE THAT THESE SCORES PROBABLY CHANGE WITH EVERY
    //  	MODIFICATION (AND PARTICULARLY EXPANSION) OF THE PROGRAM.
    new ClassMessage -> ClassMessage cmsg
    cmsg.initWith(idNumber lineVector.get(1))
    data.classMessages.push(cmsg)
    oclear cmsg
  ;m

  m: parseHints
    // SECTION 11:
    //   HINTS.  EACH LINE CONTAINS A
    //      - HINT NUMBER (CORRESPONDING TO A COND BIT, SEE SECTION 9)
    //      - THE NUMBER OF TURNS HE MUST BE AT THE RIGHT LOC(S) BEFORE TRIGGERING THE HINT
    //      - THE POINTS DEDUCTED FOR TAKING THE HINT
    //      - THE MESSAGE NUMBER (SECTION 6) OF THE QUESTION
    //      - AND THE MESSAGE NUMBER OF THE HINT.
    //    THESE VALUES ARE STASHED IN THE "HINTS" ARRAY.
    //  	HNTMAX IS SET TO THE MAX HINT NUMBER (<= HNTSIZ).  NUMBERS 1-3 ARE
    //  	UNUSABLE SINCE COND BITS ARE OTHERWISE ASSIGNED, SO 2 IS USED TO
    //  	REMEMBER IF HE'S READ THE CLUE IN THE REPOSITORY, AND 3 IS USED TO
    //  	REMEMBER WHETHER HE ASKED FOR INSTRUCTIONS (GETS MORE TURNS, BUT LOSES
    //  	POINTS).
    atoi(lineVector.get(0).get) -> int hintNumber
    atoi(lineVector.get(1).get) -> int numberOfTurns
    atoi(lineVector.get(2).get) -> int pointsToDeduct
    atoi(lineVector.get(3).get) -> int questionIdx
    atoi(lineVector.get(4).get) -> int hintIdx
    data.getMessageByNumber(questionIdx) ->o Message question
    data.getMessageByNumber(hintIdx) ->o Message hint

    // For debugging
    if(or(and(questionIdx 0<>  objIsNull(question)) and(hintIdx 0<>  objIsNull(hint))))
      "ERROR: Section 11.1: Could not find question or hint message.\n" %s
    endif

    new Hint -> Hint currentHint
    currentHint.init(hintNumber numberOfTurns pointsToDeduct question hint)
    data.hints.push(currentHint)
          
    ?do(data.locations.count 0)
      data.locations.get(i) ->o Location loc
      if(loc.getAsset(hintNumber))
        loc.addHint(currentHint)
      endif
    loop
    oclear currentHint
  ;m

  m: parseMagicMessages
    // SECTION 12:
    //   MAGIC MESSAGES. IDENTICAL TO SECTION 6 EXCEPT PUT IN A SEPARATE
    //  	SECTION FOR EASIER REFERENCE.  MAGIC MESSAGES ARE USED BY THE STARTUP,
    //  	MAINTENANCE MODE, AND RELATED ROUTINES.
    if(objIsNull(currentMessage))   orif(idNumber currentMessage.number <>)
      new MagicMessage -> currentMessage
      currentMessage.init(idNumber)
      data.magicMessages.push(currentMessage)
    endif
    currentMessage.appendContent(lineVector.get(1))
  ;m
  
  m: parseLines    
    true -> bool keepGoing

    // Run as long as there are lines left to read
    begin
      if(dataFile.atEOF)
        false -> keepGoing
      endif
    while(keepGoing)
      // Get line from the file stream
      dataFile.getLine(line.get line.size) drop
      line.fixup
      //line.get %s %nl

      // Clear the vector from previous lines
      lineVector.clear

      // Parse the line
      line.split('\t' lineVector)

      // If this line is the end of the section, proceed to next section
      false -> bool isEndOfSection
      if(lineVector.count 0>)   andif(strcmp(lineVector.get(0).get "-1") 0=)
        true -> isEndOfSection
        //"=============================================================================== End of section " %s currentSection %d %nl ds
      endif
      
      true -> bool processLine
      
      if(isEndOfSection)
        // Reset some variables for the next section
        -1 -> currentSection
        -1 -> idNumber
        oclear currentLocation
        oclear accessibleLocation
        oclear currentWord
        oclear currentMotionVerb
        oclear currentNoun
        oclear currentMessage
        oclear currentActionVerb
        false -> processLine
      else
        // If it's not the end of a section, check if it is the beginning
        if(currentSection -1 =)
          atoi(lineVector.get(0).get) -> currentSection
            // We don't want to parse the line which indicate the beginning of a section
            //if(currentSection 3 =)
            //  data.locations.show
            //endif
          false -> processLine
        else
          if(currentSection 0<>)
            // First is always an id/number
            atoi(lineVector.get(0).get) -> idNumber
          endif
        endif
      endif

      // Handle the data in different ways depending on the currentSection
      if(processLine)
        case(currentSection)
      
          of(1) parseLongFormDescriptions endof
          of(2) parseShortFormDescriptions endof
          of(3) parseTravelTable endof
          of(4) parseVocabulary endof
          of(5) parseObjectDescriptions endof
          of(6) parseArbitraryMessages endof
          of(7) parseObjectLocations endof
          of(8) parseActionDefaults endof
          of(9) parseLiquidAssets endof
          of(10) parseClassMessages endof
          of(11) parseHints endof
          of(12) parseMagicMessages endof
  
          of(0)
            // SECTION 0:
            //   END OF DATABASE.
            false -> keepGoing
          endof
        
          "Unexpected case in parseLine: " %s dup %d %nl
        
        endcase
      endif
      
      1 ->+ lineNumber
    repeat
    
  ;m

;class

loaddone
