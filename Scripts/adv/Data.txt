
requires IData
requires DataParser

true -> bool dumpAllData

class: Data extends IData

  m: init   // takes char* filename
    new Array -> locations
    new Array -> locationConditions
    new Array -> words
    new Array -> messages
    new Array -> magicMessages
    new Array -> classMessages
    new Array -> hints
    loadData
  ;m
  
  m: delete
    oclear locations
    oclear locationConditions
    oclear words
    oclear messages
    oclear magicMessages
    oclear classMessages
    oclear hints
  ;m

  m: parseLines
    mko DataParser dataParser
    ->o FileInStream dataFile
    dataParser.init(dataFile this)
    dataParser.parseLines
  ;m
  
  m: loadData
    -> ptrTo byte filename

    // Declare and open file stream
    mko FileInStream dataFile
    dataFile.open(filename "r")
    
    // If the file was successfully opened, start processing
    if(dataFile.inFile)
      parseLines(dataFile)
      dataFile.close
    endif

    if(dumpAllData)
      dumpAllLocations
      dumpAllWords
      dumpAllMessages
      dumpAllClassMessages
      dumpAllHints
      dumpAllMagicMessages
    endif
  ;m
  
  // Could return any of the subclasses of Word as well
  m: findWord returns Word     // takes String word
    ->o String str
    Word result
    ?do(words.count 0)
      words.get(i) ->o Word word
      if(word.hasWord(str))
        word -> result
        leave
      endif
    loop
    result
  ;m

  m: getObjectByNumber returns Noun  // takes int n
    -> int n
    Noun result
    ?do(words.count 0)
      words.get(i) ->o Word w
      if(and(mod(w.number 1000) n =  w.wordType kAWTNoun =))
        w ->o result
        leave
      endif
    loop
    result
  ;m
  
  m: getLocationByNumber returns Location  // takes int n
    -> int n
    Location result
    ?do(locations.count 0)
      locations.get(i) ->o Location loc
      if(loc.number n =)
        loc ->o result
        leave
      endif
    loop
    result
  ;m
  
  m: getActionVerbByNumber returns ActionVerb  // takes int n
    -> int n
    Word result
    ?do(words.count 0)
      words.get(i) ->o Word w
      if(and(mod(w.number 2000) n =  w.wordType kAWTActionVerb =))
        w ->o result
        leave
      endif
    loop
    result
  ;m
  
  m: getMotionVerbByNumber returns MotionVerb  // takes int n
    -> int n
    Word result
    ?do(words.count 0)
      words.get(i) ->o Word w
      if(and(w.number n =  w.wordType kAWTMotionVerb =))
        w ->o result
        leave
      endif
    loop
    result
  ;m
  
  m: getMessageByNumber returns Message  // takes int n
    -> int n
    Message result
    ?do(messages.count 0)
      messages.get(i) ->o Message msg
      if(msg.number n =)
        msg ->o result
        leave
      endif
    loop
    result
  ;m
  
  m: getLocationCondition returns ILocationCondition  // takes ILocation from, ILocation to);
    // this was empty in the original sources
  ;m
    
  // For debugging purposes
  m: dumpAllLocations   ;m
  m: dumpAllWords   ;m
  m: dumpAllMessages   ;m
  m: dumpAllMagicMessages   ;m
  m: dumpAllClassMessages   ;m
  m: dumpAllHints   ;m
;class

loaddone
