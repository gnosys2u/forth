
requires Player
requires Data

class: SavedLocation
  int number
  int numberOfVisits
  IntArray objectNumbers
  int assets
  
  m: delete
    oclear objectNumbers
  ;m
  
  m: save
    ->o Location loc
    "Saving location " %s loc.number %d %nl
    loc.number -> number
    loc.numberOfVisits -> numberOfVisits
    1 -> int assetMask
    0 -> assets
    do(kNumAssetFlags 0)
      if(loc.getAsset(i))
        assets assetMask or -> assets
      endif
      assetMask 2* -> assetMask
    loop
    if(loc.objects.count)
      new IntArray -> objectNumbers

      loc.objects.headIter ->  ArrayIter iter
      begin
      while(iter.next)
        ->o Noun obj
        objectNumbers.push(obj.number)
      repeat
      oclear iter
    endif
  ;m
  
  m: restore
    ->o Data data
    ->o Location loc
    loc.numberOfVisits -> numberOfVisits
    loc.assets -> assets

    loc.objects.clear    
    objectNumbers.headIter ->  IntArrayIter iter
    begin
    while(iter.next)
      -> int objNumber
      loc.objects.push(data.getObjectByNumber(objNumber))
    repeat
    oclear iter
  ;m
  
;class

class: SavedGame
  int playerLocationNumber
  int playerScore
  Array playerObjects
  Array of SavedLocation locations
  
  m: init
    new Array -> locations
  ;m
  
  m: delete
    oclear playerObjects
    oclear locations
  ;m
  
  m: savePlayer
    ->o Player player
    player.currentLocation.number -> playerLocationNumber
    player.score -> playerScore
    player.objects -> playerObjects
  ;m
  
  m: restorePlayer
    ->o Data data
    ->o Player player
    
    player.setCurrentLocation(data.getLocationByNumber(playerLocationNumber))
    playerScore -> player.score
    playerObjects -> player.objects
  ;m
  
  m: saveLocation
    ->o Location loc
    new SavedLocation -> SavedLocation savedLoc
    savedLoc.save(loc)
    locations.push(savedLoc)
    oclear savedLoc
  ;m
  
;class


class: Game
  
  Player player
  Data data
  Array of String lineVector
  Array spokenWords   // array of Noun
  String parseScratch
  
  m: init
    // This will parse the data file
    new Data -> data
    data.init("advent.dat")
    //data.words.show
    
    new Player -> player
    player.init(data.getLocationByNumber(1))
    new String -> parseScratch
    new Array -> lineVector
    new Array -> spokenWords
  ;m
  
  m: delete
    oclear player
    oclear data
    oclear lineVector
    oclear spokenWords
    oclear parseScratch
  ;m
  
  m: createSave
    mko SavedGame savedGame
    savedGame.init
    savedGame.savePlayer(player)
    ?do(data.locations.count 0)
      data.locations.get(i) ->o Location loc
      if(loc.needsSaving)
        savedGame.saveLocation(loc)
      endif
    loop
    savedGame
  ;m

  m: restoreSave
    ->o SavedGame savedGame
    savedGame.restorePlayer(player data)
    ?do(savedGame.locations.count 0)
      savedGame.locations.get(i) ->o SavedLocation savedLoc
      data.locations.get(savedLoc.number) ->o Location loc
      savedLoc.restore(loc)
    loop
    
  ;m
  
  m: split
     -> int lengthPerWord
     ->o Array elems
     -> byte delim
     ->o String s
     //"splitting " %s s.show
     s.split(delim elems)
     ?do(elems.count 0)
       elems.get(i) ->o String elem
       if(elem.length lengthPerWord >)
         elem.resize(lengthPerWord)
       endif
     loop
  ;m
  
  m: getHint returns String // takes Location
    ->o Location loc
    mko String result
    loc.hints ->o Array hints
    ?do(hints.count 0)
      hints.get(i) -> Hint hint
      if(and(not(hint.read) loc.numberOfVisits hint.numberOfTurns >=))
        true -> hint.read
        result.appendFormatted("\n\n-- HINT --\n %s\n%s" r[ hint.getQuestion.get hint.getHint.get ]r)
        leave
      endif
    loop
    unref result
  ;m
  
  m: handleMovementAndLook returns String  // takes MotionVerb* verb
    ->o MotionVerb verb
    //"handleMovementAndLook verb " %s verb.words.get(0).get %s %bl verb.number %d %nl
    Message msg
    mko String result
    mko String mess
    data.getObjectByNumber(2) ->o Noun torch
    and(player.hasObject(torch)  torch.lit) -> bool playerHasLitTorch
    player.currentLocation ->o Location currentLocation
    
    if(verb.number 57 =)    // 57   LOOK EXAMI TOUCH DESCR
      false -> bool doIt
      if(or(currentLocation.getAsset(kAssetHasLight)  playerHasLitTorch))
        currentLocation.objects ->o Array objects
        ?do(objects.count 0)
          if(i 0=)
            result.append("\n\n")
          endif
          result.append(objects.get(i) <Noun>.getCurrentPropertyDescription)
        loop
            
        if(result.length 0=)
          result.set("You see nothing out of the ordinary.")
        endif
      else
        result.set("IT IS PITCH DARK, YOU CAN'T SEE A THING.")
      endif
    else
      0 -> int M
      // Printing messages overrides going to a new location, therefore we check that first
      player.currentLocation.shouldPrintMessage(verb) ->o msg
      if(objNotNull(msg))
        result.set(msg.content.get)
      else
        currentLocation.shouldGoToLocation(verb) ->o Location loc
        if(objNotNull(loc))
          false -> bool allowed
          // Let see if all conditions are met
          currentLocation.getLocationConditionForLocation(loc) ->o LocationCondition cond
        
          // Handle cases where there are no LocationConditions (there shouldn't be any, but just in case)
          if(objIsNull(cond))
            true -> allowed
          endif
          
          Noun specialObject
          
          begin
          while(and(objNotNull(cond) not(allowed)))
            cond.to ->o loc
            cond.condition -> M
            
            case(M)
              ofif(M 0=)      // IF M=0		IT'S UNCONDITIONAL.
                true -> allowed
              endof
              
              ofif(M 100 <)     // IF 0<M<100	IT IS DONE WITH M% PROBABILITY.
                srand(ms@)
                mod(rand 100) 1+ -> int randInt
                if(randInt M <=)
                  true -> allowed
                endif
              endof
              
              ofif(M 100 =)   // IF M=100	UNCONDITIONAL, BUT FORBIDDEN TO DWARVES.
                // Dwarves?
                true -> allowed
              endof
              
              ofif(M 200 <=)    // IF 100<M<=200	HE MUST BE CARRYING OBJECT M-100.
                data.getObjectByNumber(M 100-) ->o specialObject
                if(player.hasObject(specialObject))
                  true -> allowed
                else
                  mess.set("You must be carrying ")
                  mess.append(specialObject.inventoryMessage.get)
                endif
              endof
              
              ofif(M 300 <=)    // IF 200<M<=300	MUST BE CARRYING OR IN SAME ROOM AS M-200.
                data.getObjectByNumber(M 200-) ->o specialObject
                if(objNotNull(specialObject))
                  if(or(player.hasObject(specialObject) currentLocation.hasObject(specialObject)))
                    true -> allowed
                  else
                    mess.set("You must be carrying or in the same room as ")
                    mess.append(specialObject.inventoryMessage.get)
                  endif
                endif
              endof
                  
              ofif(M 400 <=)    // IF 300<M<=400	PROP(M MOD 100) MUST *NOT* BE 0.
                data.getObjectByNumber(mod(M 100)) ->o specialObject
                if(objNotNull(specialObject))
                  if(specialObject.propertyValue 0<>)
                    true -> allowed
                  else
                    if(and(loc.number 9 =  specialObject.number 1003 =))
                      mess.set(data.getMessageByNumber(63).content.get)
                    else
                      mess.set("Property value must not be 0.")
                    endif
                  endif
                endif
              endof
                  
              ofif(M 500 <=)    // IF 400<M<=500	PROP(M MOD 100) MUST *NOT* BE 1.
                data.getObjectByNumber(mod(M 100)) ->o specialObject
                if(objNotNull(specialObject))
                  if(specialObject.propertyValue 1 <>)
                    true -> allowed
                  else
                    mess.set("Property value must not be 1.")
                  endif
                endif
              endof
                  
              ofif(M 600 <=)    // IF 500<M<=600	PROP(M MOD 100) MUST *NOT* BE 2, ETC.
                data.getObjectByNumber(mod(M 100)) ->o specialObject
                if(objNotNull(specialObject))
                  if(specialObject.propertyValue 2 <>)
                    true -> allowed
                  else
                    mess.set("Property value must not be 2.")
                  endif
                endif
              endof
              
              "handleMovementAndLook: unrecognized condition " %s dup %d %nl
            endcase
              
            // If not allowed, get next condition
            if(not(allowed))
              currentLocation.getLocationConditionAfterLocationCondition(cond) ->o cond
            endif
          repeat
          
          // All requirements were not met
          if(not(allowed))
            result.set(mess.get)
          else  // All requirements met
            //result.appendFormatted("Going to: %d, M: %d\n" r[ loc.number M ]r)
            // Go to new location
            loc -> player.currentLocation
            result.set(loc.shortDescription.get)
            if(result.length)
              result.append("\n")
            endif
            result.append(loc.longDescription.get)
            if(and(not(loc.getAsset(kAssetHasLight)) not(playerHasLitTorch)))
              result.append("\n\n")
              // 16	IT IS NOW PITCH DARK.  IF YOU PROCEED YOU WILL LIKELY FALL INTO A PIT.
              result.append(data.getMessageByNumber(16).content.get)
            endif
            result.append(getHint(loc).get)
          endif
        endif
      endif
    endif
    oclear mess
    unref result
  ;m
  
  // public
  
  m: getPlayer returns Player
    player
  ;m
  
  m: parseTake returns String
    ->o Noun obj
    player.currentLocation -> Location currentLocation
    data.getObjectByNumber(2) ->o Noun torch
    and(player.hasObject(torch)  torch.lit) -> bool playerHasLitTorch
    
    // Names beginning with a star is not possible to pick up (we think)
    if(obj.inventoryMessage.get c@ '*' <>)
      if(or(currentLocation.getAsset(kAssetHasLight) playerHasLitTorch))
        
        if(currentLocation.hasObject(obj))
          if(obj.number 1008 <>)   // not BIRD
            // Pick up the object from the current location
            currentLocation.removeObject(obj)
            // Add it to the player
            player.pickUpObject(obj)
            parseScratch.set("You picked up: ")
            parseScratch.append(obj.inventoryMessage.get)
            parseScratch
            exit
          else
            if(obj.number 1008 =)   // BIRD
              if(player.hasObject(data.getObjectByNumber(4)))  // CAGE 
                if(not(player.hasObject(data.getObjectByNumber(5)))) // ROD
                  // Pick up the object from the current location
                  currentLocation.removeObject(obj)
                  // Add it to the player
                  player.pickUpObject(obj)
                            
                  // 100	THERE IS A LITTLE BIRD IN THE CAGE.
                  1 -> obj.propertyValue
                  parseScratch.set("You picked up: ")
                  parseScratch.append(obj.inventoryMessage.get)
                  parseScratch
                  exit
                else
                  // 26	THE BIRD WAS UNAFRAID WHEN YOU ENTERED, BUT AS YOU APPROACH IT BECOMES
                  // 26	DISTURBED AND YOU CANNOT CATCH IT.
                  data.getMessageByNumber(26).content
                  exit
                endif
              else
                // 27	YOU CAN CATCH THE BIRD, BUT YOU CANNOT CARRY IT.
                data.getMessageByNumber(27).content
                exit
              endif
            endif
          endif
        else
          parseScratch.set("There is no such object at this location.")
          parseScratch
          exit
        endif
      else
        // Too dark, cant find
        parseScratch.set("IT IS TO DARK TO FIND ANYTHING AROUND HERE.")
        parseScratch
        exit
      endif
    else
      // cannot pick up
      // 25	YOU CAN'T BE SERIOUS!
      data.getMessageByNumber(25).content
    endif
  ;m
  
  m: parseDrop returns String
    ->o Noun obj
    player.currentLocation -> Location currentLocation
    if(player.hasObject(obj))
      // Drop object
      player.dropObject(obj)
      // Leave the object at the current location
      currentLocation.addObject(obj)
      
      parseScratch.set("You dropped: ")
      parseScratch.append(obj.inventoryMessage.get)
    
    else
      parseScratch.set("You don't have this object in your inventory.")
    endif
    parseScratch
  ;m
  
  m: parseOpen returns String
    ->o Noun obj
    String result
    player.currentLocation -> Location currentLocation
    
    case(obj.number)
    
      of(1014)    // CLAM
        // 1018	KNIFE KNIVE
        if(player.hasObject(data.getObjectByNumber(18)))
          if(currentLocation.hasObject(obj))
            // 124	A GLISTENING PEARL FALLS OUT OF THE CLAM AND ROLLS AWAY.  GOODNESS,
            // 124	THIS MUST REALLY BE AN OYSTER.	(I NEVER WAS VERY GOOD AT IDENTIFYING
            // 124	BIVALVES.)  WHATEVER IT IS, IT HAS NOW SNAPPED SHUT AGAIN.
            data.getMessageByNumber(124).content ->o result
          else
            if(player.hasObject(obj))
              // 120	I ADVISE YOU TO PUT DOWN THE CLAM BEFORE OPENING IT.  >STRAIN!<
              data.getMessageByNumber(120).content ->o result
            endif
          endif
        else
          // 122	YOU DON'T HAVE ANYTHING STRONG ENOUGH TO OPEN THE CLAM.
          data.getMessageByNumber(122).content ->o result
        endif
      endof

      of(1015)    // OYSTER
        // 1018	KNIFE KNIVE
        if(player.hasObject(data.getObjectByNumber(18)))
          if(currentLocation.hasObject(obj))
            // 125	THE OYSTER CREAKS OPEN, REVEALING NOTHING BUT OYSTER INSIDE.  IT
            // 125	PROMPTLY SNAPS SHUT AGAIN.
            data.getMessageByNumber(125).content ->o result
          else
            if(player.hasObject(obj))
              // 121	I ADVISE YOU TO PUT DOWN THE OYSTER BEFORE OPENING IT.	>WRENCH!<
              data.getMessageByNumber(121).content ->o result
            endif
          endif
        else
          // 123	YOU DON'T HAVE ANYTHING STRONG ENOUGH TO OPEN THE OYSTER.
          data.getMessageByNumber(123).content ->o result
        endif
      endof

      of(1003)    // GRATE
        if(currentLocation.hasObject(obj))
          if(player.hasObject(data.getObjectByNumber(1)))  // KEYS
            if(obj.propertyValue 0=)
              1 -> obj.propertyValue
              data.getMessageByNumber(36).content ->o result
            else
              // already unlocked
              data.getMessageByNumber(37).content ->o result
            endif
          else
            // no keys
            data.getMessageByNumber(31).content ->o result
          endif
        else
          parseScratch.set("THERE IS NO GRATE AROUND HERE.")
          parseScratch ->o result
        endif
      endof
      
      "Game.parseOpen: unexpected object " %s dup %d %nl
    endcase
    // TODO: there are several paths that don't set result at all
    result
  ;m
  
  m: parseClose returns String
    ->o Noun obj
    String result
    player.currentLocation -> Location currentLocation
    
    if(obj.number 1003 =)    // GRATE
      if(currentLocation.hasObject(obj))
        if(player.hasObject(data.getObjectByNumber(1)))  // KEYS
          if(obj.propertyValue 1 =)
            0 -> obj.propertyValue
            data.getMessageByNumber(35).content ->o result
          else
            // already locked
            data.getMessageByNumber(34).content ->o result
          endif
        else
          // no keys
          data.getMessageByNumber(31).content ->o result
        endif
      else
        parseScratch.set("THERE IS NO GRATE AROUND HERE.")
        parseScratch ->o result
        exit
      endif
    else
      "Game.parseClose: unexpected object " %s obj.number %d %nl
    endif
    
    // TODO: there are several paths that don't set result at all
    result
  ;m
                            
  m: parseOn returns String
    ->o Noun obj
    String result
    
    if(player.hasObject(obj))
      if(not(obj.lit))
        true -> obj.lit
        data.getMessageByNumber(39).content ->o result
      else
        parseScratch.set("This lamp is already lit.")
        parseScratch ->o result
      endif
    else
      parseScratch.set("You do not have this object so you can't switch it on.")
      parseScratch ->o result
    endif
    
    result
  ;m
                            
  m: parseOff returns String
    ->o Noun obj
    String result
    
    if(player.hasObject(obj))
      if(obj.lit)
        false -> obj.lit
        data.getMessageByNumber(40).content ->o result
      else
        parseScratch.set("This brass lantern is already off.")
        parseScratch ->o result
      endif
    else
      parseScratch.set("You do not have this object so you can't switch it off.")
      parseScratch ->o result
    endif
    
    result
  ;m

  m: parseEat returns String
    ->o Noun obj
    player.currentLocation -> Location currentLocation
    String result
    
    if(player.hasObject(obj))
      if(obj.number 1019 =)    // FOOD
        player.removeObject(obj)
        parseScratch.set("You just ate: ")
        parseScratch.append(obj.inventoryMessage.get)
        parseScratch ->o result
      else
        parseScratch.set("You cannot eat this.")
        parseScratch ->o result
      endif
    else
      if(currentLocation.hasObject(obj))
        if(obj.number 1019 =)    // FOOD
          currentLocation.removeObject(obj)
          parseScratch.set("You just ate: ")
          parseScratch.append(obj.inventoryMessage.get)
          parseScratch ->o result
        else
          parseScratch.set("You cannot eat this.")
          parseScratch ->o result
        endif
      else
        // 174	THERE IS NOTHING HERE TO EAT.
        data.getMessageByNumber(174).content ->o result
      endif
    endif
    
    result
  ;m

  m: parseDrink returns String
    ->o Noun obj
    String result

    data.getObjectByNumber(20) ->o obj
    // TODO: why is the bottle not found?
    // HUH? is object number 20 or 1020?
    if(player.hasObject(obj))
      if(obj.number 1020 =)    // WATER
        if(obj.propertyValue 0=)
          1 -> obj.propertyValue
          
          parseScratch.set("\nYou just drank: ")
          parseScratch.append(obj.inventoryMessage.get)
          parseScratch ->o result
        else
          parseScratch.set("The bottle is empty.")
          parseScratch ->o result
        endif
      else
        parseScratch.set("You cannot drink this.")
        parseScratch ->o result
      endif
    endif
    
    result
  ;m

  m: parseFill returns String
    ->o Noun obj
    String result
    player.currentLocation -> Location currentLocation
    
    if(obj.number 1020 =)  // bottle
      if(player.hasObject(obj))
        if(and(currentLocation.getAsset(kAssetLiquid) not(currentLocation.getAsset(kAssetWater))))   // LIQUID ASSET on and WATER off
          if(obj.propertyValue 1 =)     // 1 == empty bottle
            0 -> obj.propertyValue      // Bottle is full with water
            // 107	YOUR BOTTLE IS NOW FULL OF WATER.
            data.getMessageByNumber(107).content ->o result
          else
            // 105	YOUR BOTTLE IS ALREADY FULL.
            data.getMessageByNumber(105).content ->o result
          endif
        else
          // 106	THERE IS NOTHING HERE WITH WHICH TO FILL THE BOTTLE.
          data.getMessageByNumber(106).content ->o result
        endif
      else
        // 104	YOU HAVE NOTHING IN WHICH TO CARRY IT.
        data.getMessageByNumber(104).content ->o result
      endif
    else
      // 109	YOU CAN'T FILL THAT.
      data.getMessageByNumber(109).content ->o result
    endif
    
    result
  ;m
                            
 
  m: parseInput returns String
    ->o String input
    String result
    
    if(input.length 0=)
      result
      exit
    endif
    lineVector.clear
    split(input bl lineVector 5)
    //lineVector.show
    
    // Get the word object for every word written
    Word word
    spokenWords.clear
    ?do(lineVector.count 0)
      data.findWord(lineVector.get(i)) ->o word
      if(objNotNull(word))
        spokenWords.push(word)
      else
        "Word not found: " %s lineVector.get(i).get %s %nl
      endif
    loop
    //spokenWords.show
    
    if(spokenWords.count)
      spokenWords.get(0) ->o Word firstWord
      if(spokenWords.count 1 =)
        if(firstWord.wordType kAWTMotionVerb =)
          handleMovementAndLook(firstWord)
          exit
        else
          if(firstWord.wordType kAWTActionVerb =)
            firstWord <ActionVerb>.getDefaultMessage
            exit
          endif
        endif
      else
        if(spokenWords.count 2 =)
          spokenWords.get(1) -> Word secondWord
          if(firstWord.wordType kAWTActionVerb =)
            firstWord ->o ActionVerb verb
            // "goto building", "<ActionVerb> <MotionVerb>"
            if(secondWord.wordType kAWTMotionVerb =)
              handleMovementAndLook(secondWord) ->o result
            else
              // "get keys", "off lamp", "<ActionVerb> <Object>"
              if(secondWord.wordType kAWTNoun =)
                secondWord -> Noun obj
                
                case(verb.number)
                  of(2001) parseTake(obj) endof         // 2001 CARRY TAKE KEEP CATCH STEAL CAPTU GET TOTE
                  of(2002) parseDrop(obj) endof         // 2002 DROP RELEA FREE DISCA DUMP
                  of(2004) parseOpen(obj) endof         // 2004 UNLOC OPEN
                  of(2006) parseClose(obj) endof        // 2006 LOCK CLOSE
                  of(2007) parseOn(obj) endof           // 2007 LIGHT ON
                  of(2008) parseOff(obj) endof          // 2008 EXTIN OFF
                  of(2009) null endof                  // 2009 WAVE SHAKE SWING
                  of(2010) null endof                  // 2010 CALM PLACA TAME
                  of(2012) null endof                  // 2012 ATTAC KILL FIGHT HIT STRIK
                  of(2013) null endof                  // 2013 POUR
                    // 77	YOUR BOTTLE IS EMPTY AND THE GROUND IS WET.
                    // 78	YOU CAN'T POUR THAT.
                  of(2014) parseEat(obj) endof                        // 2014 EAT DEVOU
                  of(2015) parseDrink(obj) endof                        // 2015 DRINK
                  of(2016) null endof                  // 2016 RUB
                  of(2017) null endof                  // 2017 THROW TOSS
                  of(2022) parseFill(obj) endof                        // 2022 FILL
                  verb.getDefaultMessage
                endcase
                ->o result
              endif
            endif
          endif
        endif
      endif
    endif
    if(objIsNull(result))
      parseScratch.set("")
      parseScratch ->o result
    endif
    
    result
  ;m
  
;class

loaddone
