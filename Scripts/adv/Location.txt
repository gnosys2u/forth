
requires CCInterfaces
requires Messages
requires Verbs
requires Hint
requires Noun

enum: eAssetFlags
  kAssetHasLight        //  		0	LIGHT
  kAssetWater           //  		1	IF BIT 2 IS ON: ON FOR OIL, OFF FOR WATER
  kAssetLiquid          //  		2	LIQUID ASSET, SEE BIT 1
  kAssetNoPirate        //  		3	PIRATE DOESN'T GO HERE UNLESS FOLLOWING PLAYER
  //  	OTHER BITS ARE USED TO INDICATE AREAS OF INTEREST TO "HINT" ROUTINES:
  kAssetTryEnterCave    //  		4	TRYING TO GET INTO CAVE
  kAssetTryCatchBird    //  		5	TRYING TO CATCH BIRD
  kAssetDealWithSnake   //  		6	TRYING TO DEAL WITH SNAKE
  kAssetLostInMaze      //  		7	LOST IN MAZE
  kAssetDarkRoom        //  		8	PONDERING DARK ROOM
  kAssetWittsEnd        //  		9	AT WITT'S END
  
  // ASSET IS SET TO 2, OVERRIDING ALL OTHER BITS, IF LOC HAS FORCED MOTION.
  kNumAssetFlags
;enum

class: Location extends ILocation
    
  m: init    // takes int number
    -> number
    //"creating Location " %s number %d %nl
    0 -> numberOfVisits
    new Array -> objects
    new ByteArray -> assets
    do(10 0)
      assets.push(0)
    loop
    new Array -> hints
    new Array -> motionVerbs
    new Array -> accessibleLocations
    new Array -> motionVerbsForPrintingMessage
    new Array -> printMessages
    new Array -> locationConditions
    new String -> longDescription
    new String -> shortDescription
    
  ;m
  
  m: delete
    oclear objects
    oclear assets
    oclear hints
    oclear motionVerbs
    oclear accessibleLocations
    oclear motionVerbsForPrintingMessage
    oclear printMessages
    oclear locationConditions
  ;m

  m: getAsset
    assets.get
  ;m
  
  m: setAsset  // ASSET_INDEX BOOL_VAL
    swap assets.set
  ;m
  
  m: needsSaving
    numberOfVisits 0<>
  ;m
  
  m: showIt
    "Location " %s number %d %nl
    "LD:{" %s longDescription.get %s "}\n" %s
    "SD:{" %s shortDescription.get %s "}\n" %s
    Hint hint
    
    if(hints.count)
      "  Hints:\n" %s
      do(hints.count 0)
        hints.get(i) <Hint>.show
      loop
      %nl
    endif
    if(accessibleLocations.count)
      "  accessibleLocations:" %s
      do(accessibleLocations.count 0)
        accessibleLocations.get(i) <Location>.number %d %bl
      loop
      %nl
    endif
  ;m
 
  m: getAccessibleLocationIndex // takes Location, returns int
    ->o ILocation loc
    -1 -> int result
    ?do(accessibleLocations.count 0)
      if(accessibleLocations.get(i) <Location>.number loc.number =)
        i -> result
        leave
      endif
    loop
    result
  ;m
  
  m: getPrintMessageIndex // takes Message, returns int
    ->o Message msg
    -1 -> int result
    ?do(printMessages.count 0)
      if(printMessages.get(i) <Message>.number msg.number =)
        i -> result
        leave
      endif
    loop
    result
  ;m
  
  m: listObjects returns String
  ;m
  
  m: getAccessibleLocationsAndMotionVerbsAsString returns String
  ;m
  
  m: getPrintMessagesAndMotionVerbsAsString returns String
  ;m
  
  m: getAssetsAsString returns String
  ;m
  
  m: getHintsAsString returns String
  ;m
  
  m: addAccessibleLocation // (Location* loc)
    // Only add if not already added
    ->o Location loc
    if(getAccessibleLocationIndex(loc) -1 =)
      accessibleLocations.push(loc)
      motionVerbs.push(new Array)
    endif
  ;m
  
  m: addMotionVerb  // (Location* loc, MotionVerb* verb)
    ->o MotionVerb verb
    ->o Location loc
    getAccessibleLocationIndex(loc) -> int index
    motionVerbs.get(index) ->o Array aa
    aa.push(verb)
  ;m
  
  m: appendToShortDescription   // (const string desc)
    ->o String s
    shortDescription.append(s.get)
    shortDescription.append(" ")
    //"appendToShortDescription node:" %s number %d %bl s.get %s %nl
  ;m
  
  m: appendToLongDescription   // (const string desc)
    ->o String s
    longDescription.append(s.get)
    longDescription.append(" ")
  ;m
  
  m: addLocationCondition  // LocationCondition *locC
    locationConditions.push
  ;m

  m: addObject  // Object *obj
    objects.push
  ;m

  m: addHint // IHint hint
    hints.push
  ;m

  m:  addPrintMessage  //(Message* msg)
    ->o Message msg
    // Only add if not alread added
    if(getPrintMessageIndex(msg) -1 =)
      printMessages.push(msg)
      motionVerbsForPrintingMessage.push(new Array)
    endif
  ;m
  
  m: addMotionVerbForPrintMessage  //(Message* msg, MotionVerb* verb)
    ->o MotionVerb verb
    ->o Message msg
    getPrintMessageIndex(msg) -> int index
    // TODO: find out why this crashes
    //motionVerbsForPrintingMessage.get(index) <Array>.push(verb)
    motionVerbsForPrintingMessage.get(index) ->o Array aa
    aa.push(verb)
  ;m

  m: shouldPrintMessage returns Message  // takes MotionVerb
    ->o MotionVerb verb
    Message result
    ?do(motionVerbsForPrintingMessage.count 0)
      motionVerbsForPrintingMessage.get(i) -> Array verbs
      ?do(verbs.count 0)
        // OK to compare pointers
        if(verbs.get(i) verb =)
          printMessages.get(j) ->o result
          leave
        endif
      loop
      if(objNotNull(result))
        leave
      endif
    loop
    result
  ;m
  
  m: shouldGoToLocation returns Location  // takes MotionVerb
    ->o MotionVerb verb
    Location result
    ?do(motionVerbs.count 0)
      motionVerbs.get(i) -> Array verbs
      ?do(verbs.count 0)
        // OK to compare pointers
        if(verbs.get(i) verb =)
          accessibleLocations.get(j) ->o result
          leave
        endif
      loop
      if(objNotNull(result))
        leave
      endif
    loop
    result
  ;m

  m: getLocationConditionForLocation returns ILocationCondition  // takes Location
    ->o Location loc
    ILocationCondition result
    ?do(locationConditions.count 0)
      locationConditions.get(i) -> ILocationCondition cond
      // OK to compare pointers
      if(cond.to loc =)
        cond -> result
        leave
      endif
    loop
    result
  ;m

  m: getLocationConditionAfterLocationCondition returns ILocationCondition  // takes LocationCondition
    ->o ILocationCondition locC
    ILocationCondition result
    ?do(locationConditions.count 0)
      // OK to compare pointers
      if(locC locationConditions.get(i) =)
        if(i locationConditions.count 1- <>)
          locationConditions.get(i 1+) -> result
          leave
        endif
      endif
    loop
    result
  ;m

  m: hasObject returns int  // takes Noun
    ->o Noun obj
    false -> bool result
    ?do(objects.count 0)
      // OK to compare pointers
      if(obj objects.get(i) =)
        true -> result
        leave
      endif
    loop
    result
  ;m

  m: removeObject     // takes Noun
    ->o Noun objToRemove
    
    objects.headIter -> ArrayIter iter
    if(iter.findNext(objToRemove))
      iter.remove
    else
      "Location:removeObject - object " %s objToRemove.number %d " not found\n" %s
    endif
    oclear iter
  ;m
  
;class
    
loaddone
