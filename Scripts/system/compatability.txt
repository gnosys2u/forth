// ansi forth compatability words

requires forth_internals
requires forth_optype

autoforget compatability
: compatability ;

: cells 4* ;
: cell+ 4+ ;
: chars ;
: spaces 0 do %bl loop ;
: char blword c@ ;

// given ptr to cstring, compile code which will push ptr to cstring
: compileStringLiteral
  -> ptrTo byte src
  src strlen -> int len
  len 4+ 0xFFFFFFFC and 2 rshift -> int lenInts
  opType:makeOpcode( opType:litString lenInts ) ,		// compile literal string opcode
  strcpy( here src )
  allot( lenInts cells )
;

: count dup 1+ swap c@ ;

: 2, here 8 allot 2! ;
: literal postpone lit , ;
: fliteral literal ;
: dliteral postpone dlit 2, ;
precedence literal   precedence fliteral   precedence dliteral

: countedStringToString
  // src dst
  swap 2dup
  memcpy( count )
  c@ + 0 swap c!
;

: stringToCountedString
  // src dst
  over strlen over c!
  // src len 
  1+ swap strcpy
;

: blockToString
  // src count dst
  -> ptrTo byte dst
  -> int numBytes
  -> ptrTo byte src
  memcpy( dst src numBytes )
  0 dst numBytes + c!
;

: stringToBlock
  dup strlen
;

: lowerCaseIt
  dup strlen 0 do
    dup c@
    if( and( dup 'A' >= over 'Z' <= ) )
      0x20 + over c!
    else
      drop
    endif
    1+
  loop
  drop
;

: find
  257 string symbol
  countedStringToString( dup symbol )
  $find( symbol )
  // countedStr ptrToSymbolEntry
  if( dup )
    nip			// discard original counted string ptr
    @			// fetch opcode from first word of symbol entry value field
    if( opType:isImmediate( opType:getOptype( dup ) ) )
      1   // immediate op
    else
      -1
    endif
  endif
;

: cmove %nl 0 do over i + c@ over i + c! loop 2drop ;
: cmove> 0 swap 1- do over i + c@ over i + c! -1 +loop 2drop ;
: move >r swap r> memmove ;
: ."
  '"' $word state @
  if
    compileStringLiteral
    postpone %s
  else
    %s
  endif
;
precedence ."

: .(
  ')' $word %s
;
precedence .(

: s"
  '"' $word
  if( state @ )
    compileStringLiteral( dup )
    strlen postpone literal
  else
    dup strlen
  endif
;
precedence s"
: accept
  stdin fgets dup -> ptrTo byte buffer
  strlen -> int bytesRead
  if( bytesRead )
    if( buffer bytesRead + 1- c@ '\n' = )
      // trim trailing linefeed from count
      1 ->- bytesRead
    endif
  endif
  bytesRead
;
: quit r0 -> rp done ;
: erase 0 swap memset ;
0x20 constant bl
: emit %c ;
: does> postpone does ; precedence does>
: then postpone endif ; precedence then

: [char]  opType:makeOpcode( opType:litInt blword c@ ) , ; precedence [char]
: cr %nl ;
: char+ 1+ ;
: \ 0 $word drop ; precedence \
: spaces
  dup 0> if
    0 do %bl loop
  else
    drop
  endif
;

: space %bl ;
: fill swap memset ;

: _abortQuote
  swap
  if
    error
  else
    drop
  endif
;
: abort" 
  '"' $word state @
  if
    compileStringLiteral
    lit _abortQuote ,
  else
    _abortQuote
  endif
; precedence abort"

: value -> postpone int ;
: to -> ;

int __sp
: !csp sp -> __sp ;
: ?csp
  sp __sp <> if
    dstack
    1 error
    "stack mismatch" addErrorText
  endif
;

// the builtin $word op leaves an empty byte below parsed string for us to stuff length into
: word $word dup strlen over 1- c! 1- ;
: parse word count ;

: sliteral
  257 string str
  blockToString( str )
  compileStringLiteral( str )
  postpone stringToBlock
; precedence sliteral

32 constant #locals
true constant locals
true constant locals-ext
: locals|
  257 string varExpression
  ptrTo byte varName
  begin
    blword -> varName
  while( and( varName null <>   strcmp( varName "|" ) ) )
    "-> int " -> varExpression
    varName ->+ varExpression
    $evaluate( varExpression )
  repeat
; precedence locals|

: (local)
  250 string varName
  257 string varExpression
  blockToString( varName )
  "int " -> varExpression
  ->+ varExpression
  $evaluate( varExpression )
; precedence (local)

: defer postpone op ;
: is -> ;

: off false swap ! ;
: on true swap ! ;

: ms@ millitime ;

: s>d i2l ;

int _handler

: catch  ( ... xt -- ... 0 )
  _handler  >r
  sp >r
  rp -> _handler
  execute 0
  r> drop
  r> -> _handler
;

: throw  ( error -- error )
  dup 0= if
    drop exit
  endif
  _handler -> rp
  // RTOS: oldSP oldHandlerRP
  r> swap >r -> sp
  // RTOS: errorCode oldHandlerRP
  r> r> -> _handler
;

: /string
  rot over + -rot
  -
;

: include load ;

: marker
  blword dup $:
  compileStringLiteral
  postpone $forget
  postpone drop
  postpone ;
;

: depth s0 sp - 2 rshift 1- ;
: aligned 3+ 0xFFFFFFFC and ;

: recurse
  ref definitions
  vocNewestEntry @ ,
; precedence recurse

: at-xy setConsoleCursor ;
: page clearConsole 0 0 setConsoleCursor ;
// addr count ... addr+count addr
: bounds over + swap ;