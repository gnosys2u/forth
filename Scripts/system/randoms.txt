
autoforget randoms

// park-miller random number generator

: randoms ;

// some other linear congruential random generators
//   which use form randomSeed = ((a * randomSeed) + c) % m
//Borosh-Niederreiter: a = 1812433253, m = 2^32
//Fishman18: a = 62089911, m = 2^31 - 1
//Fishman20: a = 48271, m = 2^31 - 1
//L'Ecuyer: a = 40692, m = 2^31 - 249
//Waterman: a = 1566083941, m = 2^32. 

// these generator ops take a seed on TOS, leave TOS: newSeed generatedRandom

// randu sucks, but is famous
: _randu 65539 * dup ;

// randVax is okay
: _randVax 69069 * 1+ dup ;

// randInmos is probably nearly as bad as randu
: _randInmos 1664525 * dup ;

// this was in a description of how rand in C runtime lib works
: _randCLib  1103515245 * 12345 + dup 16 rshift 32767 and swap ;

: _randParkMiller
  // seed 16807 * MAXINT mod     (doesn't work because of integer overflows turning negative)
  127773 /mod
  swap 16807 * swap 2836 * -
  dup 0<= if
    MAXINT +
  endif
  dup
;

// park-miller is default generator
' _randParkMiller -> op _randomGeneratorOp

time or ms@ xor -> int _randomSeed

// _randomSeed 16807 * MAXINT mod
// doesn't work because of integer overflows turning negative

: random
  _randomSeed _randomGeneratorOp -> _randomSeed
;
  
: setRandomSeed
  // randomSeed must be between 1 and 2147483646 (MAXINT - 1)
  // this is tailored for park-miller, should be okay for other linear-congruential gens
  MAXINT and
  // seed is now between 0 and 2147483647
  dup 0= if
    drop 3802896
  else
    dup MAXINT = if
      3802896 -
    endif
  endif
  -> _randomSeed
;

: getRandomSeed
  _randomSeed
;
  
class: RandomIntGenerator
  int seed
  op generatorOp
  
  m: setSeed
    -> seed
  ;m
  
  m: randomize
    time or ms@ xor -> seed
  ;m
  
  m: init
    randomize
    lit _randParkMiller -> generatorOp
  ;m
  
  m: getSeed
    seed
  ;m
  
  m: setGeneratorOp
    -> generatorOp
  ;m
  
  m: generate
    if(fetch generatorOp 0=)
      // first time only
      init
    endif
    
    generatorOp(seed) -> seed
  ;m
  
;class

loaddone

// the park & miller article specifies the 10000th value must be 1043618065
: test
  1 setRandomSeed
  9999 0 do
    random drop
  loop
  "Next value should be 1043618065: " %s
  random %d %nl
;

loaddone

: randomRaw
  seed 1103515245 *
  12345 +
  0x7fffffff and
  dup -> seed
;

: random
  randomRaw 8 rshift
  swap mod
;

loaddone

// http://c-faq.com/lib/rand.html portable parks-miller
#define a 16807
#define m 2147483647
#define q (m / a)
#define r (m % a)
// q is 127773
// r is 2836
static long int seed = 1;

long int PMrand()
{
    // this hoohah does ((a*seed) mod m) without overflowing in the multiply
	long int hi = seed / q;
	long int lo = seed % q;
	long int test = a * lo - r * hi;
	if(test > 0)
		seed = test;
	else	seed = test + m;
	return seed;
}

To alter it to return floating-point numbers in the range (0, 1) (as in the Park and Miller paper), change the declaration to
	double PMrand()
and the last line to
	return (double)seed / m;
For slightly better statistical properties, Park and Miller now recommend using a = 48271.
