
autoforget sdlscreen
requires sdl
also sdl

: sdlscreen ;

class: sdlScreen

  ptrTo SDL_Surface surface
  int width
  int height
  int leftLimit
  int rightLimit
  int topLimit
  int bottomLimit
  op pixel@
  op pixel!
  int pixelColor
  int centerX 
  int centerY
  int centerPixelAddr
  int drawDepth
  SDL_Rect srcPos
  SDL_Rect dstPos
  int sdlStarted
  int curX
  int curY


  : dummyFetchOp drop 0 ;
  
  method: initLimits
    dup -> height 2/ dup -> bottomLimit dup -> centerY negate -> topLimit
    dup -> width 2/ dup -> rightLimit dup -> centerX negate -> leftLimit
  ;method
  
  method: init
    null -> surface
    
    initLimits( 640 512 )
    
    ['] dummyFetchOp -> pixel@
    ['] 2drop -> pixel!
    0x00FFFF00 -> pixelColor

    0 -> drawDepth
    0 -> srcPos.x 0 -> srcPos.y
    0 -> dstPos.x 0 -> dstPos.y
    0 -> sdlStarted
    0 -> curX
    0 -> curY
    
  ;method

  method: endSDL
    if( sdlStarted )
      SDL_Quit
      false -> sdlStarted
    endif
  ;method
  
  method: startSDL
    if( sdlStarted )
      endSDL
    endif
    true -> sdlStarted
  
    SDL_Init( SDL_INIT_VIDEO ) "SDL_Init returns " %s %d %nl
    
    SDL_GetVideoInfo -> ptrTo SDL_VideoInfo videoInfo
    "SDL_GetVideoInfo returns " %s videoInfo.current_w %d "x" %s videoInfo.current_h %d %bl
    videoInfo.vfmt.BitsPerPixel %d " bits/pixel " %s %bl videoInfo.video_mem %d " bytes of video memory\n" %s
   
    //initLimits( videoInfo.current_w videoInfo.current_h )
    
    SDL_SetVideoMode( width height 0 SDL_SWSURFACE ) -> surface
    if( surface 0= )
      "SDL_SetVideoMode failed!\n" %s abort
    else
      surface.format.BitsPerPixel
      "bits per pixel: " %s dup %d %nl
      case
        of( 8 )
          lit c@ -> pixel@
          lit c! -> pixel!
          0x55 -> pixelColor
        endof
        of( 16 )
          lit w@ -> pixel@
          lit w! -> pixel!
          0x5555 -> pixelColor
        endof
        of( 32 )
          lit @ -> pixel@
          lit ! -> pixel!
          0x00FFFF00 -> pixelColor
        endof
        // unhandled pixel size
        lit dummyFetchOp -> pixel@
        lit 2drop -> pixel!
        "startSDL: Unhandled pixel size " %s %d %nl
      endcase
    
      // set coordinates so center of screen is 0,0
      width 2/ dup -> centerX dup -> rightLimit negate -> leftLimit
      height 2/ dup -> centerY dup -> bottomLimit negate -> topLimit
      centerY surface.pitch *
      centerX surface.format.BytesPerPixel *
      + surface.pixels + -> centerPixelAddr
    
      // setup draw count and full-screen dirty rect for beginDraw/endDraw
      width -> srcPos.w
      height -> srcPos.h
      width -> dstPos.w
      height -> dstPos.h
      0 -> drawDepth
    endif
  ;method

  : beginDraw
    if( drawDepth 0= )
      SDL_LockSurface( surface ) drop
    endif
    1 ->+ drawDepth
  ;

  : endDraw
    1 ->- drawDepth
    if( drawDepth 0= )
      SDL_UnlockSurface( surface )
      SDL_UpdateRects( surface 1 dstPos )
    else
      if( drawDepth 0< )
        "endDraw called with drawDepth " %s drawDepth %d %nl
      endif
    endif
  ;

  method: moveTo
    -> curY -> curX
  ;method

  // X Y screenAddress -> address of pixel on screen
  : screenAddress
    surface.pitch * negate
    swap
    surface.format.BytesPerPixel * + centerPixelAddr +
  ;

  // dX dY screenAddressRelative -> address of pixel on screen
  : screenAddressRelative
    curY + surface.pitch * negate
    swap
    curX + surface.format.BytesPerPixel * + centerPixelAddr +
  ;


  // drawPixel & drawPixelRelative assume that you are handling SDL_LockSurface/SDL_UnlockSurface/SDL_UpdateRects
  // X Y drawPixel  - draw a dot at X,Y with color specified by pixelColor
  : drawPixel
    screenAddress pixelColor swap pixel!
  ;

  : drawPixelRelative
    screenAddressRelative pixelColor swap pixel!
  ;

  // X Y getPixel -> fetches pixel value at X,Y
  method: getPixel
    screenAddress pixel@
  ;method

  // X Y isOnScreen -> true/false
  method: isOnScreen
  
    if( topLimit bottomLimit within )
      leftLimit rightLimit within
    else
      drop false
    endif
  ;method

  method: setColor
    -> pixelColor
  ;method
  
  method: getColor
    pixelColor
  ;method
  
  // x y drawPoint
  method: drawPoint
    beginDraw
  
    drawPixel
  
    endDraw
  ;method

  // x y DrawLine
  method: drawLine
    curY negate -> int y0
    curX -> int x0
  
    2dup -> curY -> curX
  
    negate -> int y1
    -> int x1
  
    y1 y0 - -> int dy
    x1 x0 - -> int dx
    int stepx  int stepy
    int fraction
    int mStepX  int mStepY
    if( dy 0< )
      dy negate -> dy
      -1 -> stepy
    else
      1 -> stepy
    endif
    surface.pitch stepy * -> mStepY
    if( dx 0< )
      dx negate -> dx
      -1 -> stepx
    else
      1 -> stepx
    endif
    stepx surface.format.BytesPerPixel * -> mStepX
    dy ->+ dy
    dx ->+ dx
  
    beginDraw

    x0 centerX + surface.format.BytesPerPixel *
    y0 centerY + surface.pitch *
    + surface.pixels +
    -> ptrTo byte pPixel

    pixelColor pPixel pixel!
    if( dx dy > )
      dy dx 2/ - -> fraction
      begin
      while( x0 x1 <> )
        if( fraction 0>= )
          stepy ->+ y0
          dx ->- fraction
          mStepY ->+ pPixel
        endif
        stepx ->+ x0
        mStepX ->+ pPixel
        dy ->+ fraction
        pixelColor pPixel pixel!
      repeat
    else
      dx dy 2/ - -> fraction
      begin
      while( y0 y1 <> )
        if( fraction 0>= )
          stepx ->+ x0
          dy ->- fraction
          mStepX ->+ pPixel
        endif
        stepy ->+ y0
        mStepY ->+ pPixel
        dx ->+ fraction
        pixelColor pPixel pixel!
      repeat
    endif
    endDraw
  ;method

  // XYPAIRS NUM_PAIRS drawPolyLine
  method: drawPolyLine
    // TBD: reverse order of points?
    0 do
      drawLine
    loop
  ;method

  // XYPAIRS NUM_LINES drawMultiLine
  method: drawMultiLine
    0 do
      2swap moveTo drawLine
    loop
  ;method

  // X Y _draw4EllipsePoints ...
  : _draw4EllipsePoints
    2dup
    -> int y
    -> int x
    negate -> int ny
    negate -> int nx
  
    drawPixelRelative( x y )
    drawPixelRelative( x ny )
    drawPixelRelative( nx y )
    drawPixelRelative( nx ny )
  ;

  // WIDTH HEIGHT DrawEllipse ...
  method: drawEllipse
    beginDraw
  
    -> int h
    -> int w
    int x      int y
    int dx     int dy
    int endX   int endY
    0 -> int ellipseError
  
    w w * dup -> int wSquared
    2*        -> int twoWSquared
    h h * dup -> int hSquared
    2*        -> int twoHSquared
  
    w -> x
    0 -> y
 
    // TBD: 1.2 
    1 w 2* - hSquared * -> dx
    wSquared -> dy
    twoHSquared w * -> endX
    0 -> endY

    begin
    while( endX endY >= )
      _draw4EllipsePoints( x y )
      1 ->+ y
      twoWSquared ->+ endY
      dy ->+ ellipseError
      twoWSquared ->+ dy
      if( ellipseError 2* dx + 0> )
        1 ->- x
        twoHSquared ->- endX
        dx ->+ ellipseError
        twoHSquared ->+ dx
      endif
    repeat
 
    // 1st point set is done; start the 2nd set of points
    0 -> x
    h -> y
    hSquared -> dx
    1 h 2* - wSquared * -> dy
    0 -> ellipseError
    0 -> endX
    twoWSquared h * -> endY
    begin
    while( endX endY <= )
      _draw4EllipsePoints( x y )
      1 ->+ x
      twoHSquared ->+ endX
      dx ->+ ellipseError
      twoHSquared ->+ dx
      if( ellipseError 2* dy + 0> )
      	1 ->- y
      	twoWSquared ->- endY
      	dy ->+ ellipseError
      	twoWSquared ->+ dy
      endif
    repeat
  
    endDraw
  ;method


  : _drawCirclePoints
    2dup
    -> int y
    -> int x
    negate -> int ny
    negate -> int nx
    if( x 0= )
      0 y drawPixelRelative
      0 ny drawPixelRelative
      y 0 drawPixelRelative
      ny 0 drawPixelRelative
    else
      if( x y = )
        x y drawPixelRelative
        nx y drawPixelRelative
        x ny drawPixelRelative
        nx ny drawPixelRelative
      else
        if( x y < )
          x y drawPixelRelative
          nx y drawPixelRelative
          x ny drawPixelRelative
          nx ny drawPixelRelative
          y x drawPixelRelative
          y nx drawPixelRelative
          ny x drawPixelRelative
          ny nx drawPixelRelative
        endif
      endif
    endif
  ;

  method: drawCircle
    beginDraw
  
    dup -> int r
    -> int y
    0 -> int x
    5 r 4* - 4 / -> int p

    begin
    while( x y < )
      1 ->+ x
      if( p 0< )
        x 2* 1+ ->+ p
      else
        1 ->- y
        x y - 2* 1+ ->+ p
      endif
      _drawCirclePoints( x y )
    repeat
  
    endDraw
  ;method

  method: drawSquare
    -> int size
    curX curY
  
    moveTo( curX size - curY size + )
    drawLine( curX curY size 2* - )
    drawLine( curX size 2* + curY )
    drawLine( curX curY size 2* + )
    drawLine( curX size 2* - curY )
    moveTo
  ;method

  method: drawRectangle
    -> int h
    -> int w
    curX curY
  
    drawLine( curX curY h + )
    drawLine( curX w + curY )
    drawLine( curX curY h - )
    drawLine( curX w - curY )
    moveTo
  ;method

  method: fillRectangle
    SDL_Rect rect
    -> rect.h
    -> rect.w
    curX -> rect.x
    curY -> rect.y
    
    SDL_FillRect( surface rect pixelColor ) drop
  ;method

  method: flip
    SDL_Flip( surface ) drop
  ;method
    
;class

sdlScreen _screen

: startSDL
  new sdlScreen -> _screen
  _screen.init
  _screen.startSDL
;

: endSDL
  if( _screen l0<> )
    _screen.endSDL
    dnull -> _screen
  endif
;

: sc _screen.setColor ;
: mt _screen.moveTo ;

: dp _screen.drawPoint ;
: dl _screen.drawLine ;
: de _screen.drawEllipse ;
: dc _screen.drawCircle ;
: dsq _screen.drawSquare ;
: dr _screen.drawRectangle ;
: dpl _screen.drawPolyLine ;
: dml _screen.drawMultiLine ;
: fs _screen.flip ;

: test
  sc( 0xFFFF00 )
  de( 100 200 )
  sc( 0x00FFFF )
  dsq( 55 )
  do( 256 0 )
    sc( i )
    dp( i i )
    sc( lshift( i  8 ) )
    dp( i negate i )
    sc( lshift( i  16 ) )
    dp( i i negate )
    sc( i 0x10101 * )
    dp( i negate i negate )
  loop
;

3.14159g -> double pi

: test2
  //beginDraw
  pi -1.0g d* -> double angle
  pi 4.0g d* 200.0g d/ -> double dangle
  
  100.0g -> double yscale
  sc( -1 )
  do( 200 -200 )
    //i %d
    //dp( i i )
    dsin( angle ) -> double y
    dp( i y y d* y d* yscale d* d2i )
    dangle ->+ angle
  loop
  //endDraw
;

previous

loaddone

