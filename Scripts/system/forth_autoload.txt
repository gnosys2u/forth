setTrace(0)

"forth_autoload" $forget drop
: forth_autoload "This is the forth_autoload.txt tools module" %s ;

// create the system singleton
makeObject System system

#if FORTH64
: cells 8* ;
: cell+ 8+ ;
: cell- 8- ;
: cell/ 8/ ;
8 constant cellsize
: p@ 2@ ;
#else
: cells 4* ;
: cell+ 4+ ;
: cell- 4- ;
: cell/ 4/ ;
4 constant cellsize
: p@ @ ;
#endif

// initialize the system object
: _initSystemObject
  new StringMap -> system.namedObjects

  makeObject StringMap env
  getEnvironment   -> int numVars  -> ptrTo int envValues  -> ptrTo int envNames
  ?do(numVars 0)
    makeObject String varValue
    varValue.set(envValues p@)
    //"adding environment variable " %s envNames @ %s " = " %s varValue.get %s %nl
    cellsize ->+ envValues
    env.set(varValue envNames p@)
    cellsize ->+ envNames
    oclear varValue
  loop
  env -> system.env
  oclear env
  
  makeObject Array args
  argc -> int numArgs
  args.resize(numArgs)
  ?do(numArgs 0)
    makeObject String arg
    arg.set(argv(i))
    args.push(arg)
    //"adding argument " %s arg.get %s %nl
    oclear arg
  loop
  args -> system.args
  oclear args
;
_initSystemObject
$forget("_initSystemObject") drop

//  gets next token from input stream, returns:
//  DELIM ... false                 if token is empty or end of line
//  DELIM ... TOKEN_PTR true        if token found
: word?
  if($word dup strlen)
    true
  else
    drop false
  endif
;
: blword? word?('\ ') ;

: $alias
  -> ptrTo byte oldSymbol
  -> ptrTo byte newSymbol
  system.getDefinitionsVocab -> Vocabulary vocab
  vocab.findEntryByName(oldSymbol) -> ptrTo int oldEntry
  // need to copy value, since addSymbol below could cause vocabulary memory to be realloced at a different address
  makeObject ByteArray valueBuffer
  valueBuffer.fromMemory(oldEntry vocab.getValueLength 0)
  valueBuffer.base -> oldEntry
  //newSymbol %s %nl dump(oldEntry 32)
  if(oldEntry)
    vocab.addSymbol(newSymbol 0 0 0)
    vocab.getNewestEntry -> ptrTo int newEntry
    move(oldEntry  newEntry  vocab.getValueLength)
  else
    "Symbol " %s oldSymbol %s " not found!\n" %s
  endif
  oclear vocab
  oclear valueBuffer
;

: alias blword -> 250 string aa  aa blword $alias ;
alias ->o ->+    // ->o stores to an object variable without changing refcounts
alias mko makeObject
alias bool int
alias objIsNull 0=
alias objNotNull 0<>
alias ds dstack

0x7FFFFFFF -> int MAXINT
0x80000000 -> int MININT
0xFFFFFFFF -> int MAXUINT
0x7FFFFFFFFFFFFFFFL -> long MAXLONG
0x8000000000000000L -> long MINLONG
0xFFFFFFFFFFFFFFFFL -> long MAXULONG

#if FORTH64
alias Cell Long
MAXULONG -> cell MAXCELL
MINLONG -> cell MINCELL
MAXULONG -> cell MAXUCELL
#else
alias Cell Int
MAXINT -> cell MAXCELL
MININT -> cell MINCELL
MAXUINT -> cell MAXUCELL
#endif

: ' blword $' ;
: lf blword $load ;
: forget
  blword dup
  if( not( $forget ) )
    "forget failed for " %s %s %nl
  else
    drop
  endif
;
: autoforget blword $forget drop ;

: see verbose describe ;

: %nc swap 0 ?do dup %c loop drop ;
0x20 constant bl
: spaces bl %nc ;

: depth s0 sp - 2 rshift 1- ;
: aligned 3+ 0xFFFFFFFC and ;

: autoload
  if( blword $find  0= )
    $load( blword )
  else
    blword drop
  endif
;

: sizeOf blword $sizeOf processConstant ; precedence sizeOf
: offsetOf blword $offsetOf processConstant ; precedence offsetOf
: $: pushToken : ;

: $,
  // TOS is ptr to nul terminated string
  here over strlen 1+ allot
  swap strcpy
;

: $constant create $, align ;

: _buildConstantArray
  -> int numStrings
  // compile number of strings
  numStrings ,
  // create array of pointers to strings
  here -> ptrTo int string0
  numStrings cells allot
  // compile strings and stuff ptrs to them into array
  ?do(numStrings 0) 
    here swap $, 
    // TODO - 64bit
    numStrings 1- i - string0 int[] !
  loop
;

// N_STRING_PTRS N $constantArray ...
: $constantArray
  builds
    _buildConstantArray
  does
    // TODO - 64bit
    int[] cell+ @
;


: count dup 1+ swap c@ ;
: 2, here 8 allot 2! ;

#if(FORTH64)
alias land and
alias lor or
alias lxor xor
alias ucell ulong
#else
: land rot and >r and r> ;
: lor rot or >r and r> ;
: lxor rot xor >r and r> ;
alias ucell uint
#endif

: time&date splitTime(time) ;

//######################################################################
// features support

// values to be used with features variable
enum: eFeatures
  0x0001  kFFParenIsComment
  0x0002  kFFCCharacterLiterals
  0x0004  kFFMultiCharacterLiterals
  0x0008  kFFCStringLiterals
  0x0010  kFFCHexLiterals
  0x0020  kFFDoubleSlashComment
  0x0040  kFFIgnoreCase
  0x0080  kFFDollarHexLiterals
  0x0100  kFFCFloatLiterals
  0x0200  kFFParenIsExpression
  // kFFAnsi and kFFRegular are the most common feature combinations
  kFFParenIsComment kFFIgnoreCase + kFFDollarHexLiterals +    kFFAnsi
  
  kFFCCharacterLiterals kFFMultiCharacterLiterals + kFFCStringLiterals +
    kFFCHexLiterals + kFFDoubleSlashComment + kFFCFloatLiterals +    kFFRegular
    
;enum

: .features
  features
  "0x" %s dup %x
  dup kFFParenIsComment and if " kFFParenIsComment" %s endif
  dup kFFCCharacterLiterals and if " kFFCCharacterLiterals" %s endif
  dup kFFMultiCharacterLiterals and if " kFFMultiCharacterLiterals" %s endif
  dup kFFCStringLiterals and if " kFFCStringLiterals" %s endif
  dup kFFCHexLiterals and if " kFFCHexLiterals" %s endif
  dup kFFDoubleSlashComment and if " kFFDoubleSlashComment" %s endif
  dup kFFIgnoreCase and if " kFFIgnoreCase" %s endif
  dup kFFDollarHexLiterals and if " kFFDollarHexLiterals" %s endif
  kFFCFloatLiterals and if " kFFCFloatLiterals" %s endif
;

//######################################################################
// help support

255 string _TempStringA
255 string _TempStringB

false -> int _helpfileLoaded
mko StringMap _helpMap

: addHelp
  blword -> ptrTo byte name
  mko String helpContents
  helpContents.set($word(0))
  _helpMap.set(helpContents name)
  oclear helpContents
;


: $help
  -> ptrTo byte opName
  
  if( strlen( opName ) 0= )
    // line was empty, just list all help
    _helpMap.headIter -> StringMapIter iter
    begin
    while(iter.seekNext iter.currentPair)
      %s %bl <String>.get %s %nl
    repeat
    oclear iter
  else
    if(_helpMap.grab(opName))
      ->o String opDescription
      opDescription.get %s %nl
    else
      opName %s " not found!\n" %s
    endif
  endif
;

: help
  blword -> _TempStringA
  if( _helpfileLoaded not )
    $load( "help.txt"  )
    true -> _helpfileLoaded
    // there is a $help at end of help.txt that will complete the lookup
    _TempStringA
  else
    $help( _TempStringA )
  endif
;

addHelp immediate    makes most recently defined word have precedence
: immediate
  system.getDefinitionsVocab -> Vocabulary vocab
  vocab.getNewestEntry
  vocab.getValueLength + >r // top of rstack points to length byte of counted string
  move( r@ 1+ _TempStringA r@ c@ )
  r> c@ dup _TempStringA 4- !
  0 swap _TempStringA + c!
  precedence(pushToken(_TempStringA))
  oclear vocab
;

addHelp	dump		ADDRESS LEN dump	dump memory
addHelp	ldump		ADDRESS LEN ldump	dump memory as longs
addHelp fdump	FILENAME OFFSET LEN fdump	dump file contents
addHelp fldump	FILENAME OFFSET LEN fldump	dump file contents as longs

int dumpWidth
16 -> dumpWidth

// ADDR LEN OFFSET _dump
: _dump
  -> cell offset		// offset is subtracted from the actual data address before display
  -> cell len
  -> ptrTo byte addr
  int columns
  ptrTo byte endAddr
  int ch

  addr len + -> endAddr
  len -> columns
  begin
  while( addr endAddr < )
#if FORTH64
    addr offset - "%08llx" 2format %s "   " %s
#else
    addr offset - "%08x" format %s "   " %s
#endif
    if( len dumpWidth > )
      dumpWidth -> columns
    endif
    do( columns 0 )
      addr i + c@ "%02x " format %s
      if( and( i 3 ) 3 = )
        %bl
      endif
    loop
    "    " %s
    // why do we have to add 1 to dumpWidth here?
    dumpWidth 1+ columns - 0 do %bl %bl %bl loop
    do( columns 0 )
      addr i + c@ -> ch
      if( ch bl >  ch 127 < and )
        ch
      else
        '.'
      endif
      %c
    loop
    columns ->+ addr
    columns ->- len
    %nl
  repeat
;

// ADDR LEN OFFSET _ldump
: _ldump
  -> int offset		// offset is subtracted from the actual data address before display
  and( 3+ invert( 3 ) ) -> int len
  and( invert( 3 ) ) -> int addr
  int columns
  int endAddr
  int ch

  addr len + -> endAddr
  len -> columns
  begin
  while( addr endAddr < )
    addr offset - "%08x" format %s "   " %s
    if( len dumpWidth > )
      dumpWidth -> columns
    endif
    do( columns 0 )
      addr i + @ "%08x " format %s
    +loop( 4 )
    "    " %s
    // why do we have to add 1 to dumpWidth here?
    dumpWidth 1+ columns - 0 do %bl %bl %bl loop
    do( columns 0 )
      addr i + c@ -> ch
      if( ch bl >  ch 127 < and )
        ch
      else
        '.'
      endif
      %c
    loop
    columns ->+ addr
    columns ->- len
    %nl
  repeat
;

: dump 0 _dump ;
: ldump 0 _ldump ;


: _fdump
  -> op dumpOp
  -> int len
  -> int offset
  "rb" fopen -> int infile
  int buff

  if( infile 0= )
    "open failure" %s %nl
    exit
  endif
  if( len 0= )
    // read entire file
    infile flen -> len
  endif
  len malloc -> buff
  infile offset 0 fseek
  if( 0 <> )
    "fdump fseek failure" %nl exit
  endif
  buff len 1 infile fread
  if( 0= )
    "fdump read failure" %s %nl
  else
    buff len buff dumpOp
  endif
  infile fclose drop
  buff free
;

: fdump ['] _dump _fdump ;
: fldump ['] _ldump _fdump ;

addHelp addHelp	addHelp SYMBOL REST_OF_LINE		add help entry
addHelp $,	STRING_ADDR $,		compiles string (can leave DP unaligned)
addHelp help	help BLAH		show help for BLAH
addHelp	ds	ds			dump stack

addHelp $hash   STRING_ADDR $hash     return hash of string
: $hash
  strlen( dup ) phHash
;

: literal postpone lit , ;
alias fliteral literal
: dliteral postpone dlit 2, ;
precedence literal   precedence fliteral   precedence dliteral

: chars ;
: char blword c@ ;

// given ptr to cstring, compile code which will push ptr to cstring
: compileStringLiteral
  -> ptrTo byte src
  src strlen -> int len
  len 4+ 0xFFFFFFFC and 2 rshift -> int lenInts
  //opType:makeOpcode( opType:litString lenInts ) ,		// compile literal string opcode
  or(0x15000000 lenInts) ,		// compile literal string opcode
  strcpy( here src )
  allot( lenInts cells )
;

: cmove 0 do over i + c@ over i + c! loop 2drop ;
: cmove> 0 swap 1- do over i + c@ over i + c! -1 +loop 2drop ;
: ."
  '"' $word
  if( state @ )
    compileStringLiteral
    postpone %s
  else
    %s
  endif
;
precedence ."

: s"
  '"' $word
  if( state @ )
    compileStringLiteral( dup )
    strlen postpone literal
  else
    dup strlen
  endif
;
precedence s"

: quit r0 -> rp 0 -> fp done ;
: erase 0 fill ;
: blank bl fill ;
alias emit %c
alias does> does
alias then endif
: char+ 1+ ;
alias cr %nl
alias space %bl
: accept
  stdin fgets dup -> ptrTo byte buffer
  strlen -> int bytesRead
  if( bytesRead )
    if( buffer bytesRead + 1- c@ '\n' = )
      // trim trailing linefeed from count
      1 ->- bytesRead
    endif
  endif
  bytesRead
;

addHelp $enum       enumInfo enumValue ... str      convert an enum value into its string
: $enum
  -> int enumInfo
  -> int enumValue
  findEnumSymbol(enumValue enumInfo)
  if(0=)
    mko String ss
    ss.resize(256)
    ss.format("unknown_%s_%d" enumInfo 16+ enumValue 2)
    addTempString(ss.get ss.length)
    oclear ss
  endif
;

addHelp cd	cd BLAH			change working directory to BLAH
: cd
  if( chdir( blword ) )
    "cd failed!\n" %s
  endif
;

// creates a temporary filename that does not currently exist in current directory
// the name is very easily predictable, if you need a name that is secure against hacks
// replace this op with one of your own
: makeTempfileName
  getEnvironmentVar("FORTH_TEMP") -> ptrTo byte tempDir
  if(tempDir 0=)
    "" -> tempDir
  endif
  mko String timeStr
  timeStr.resize(256)
  strftime(timeStr.get timeStr.size "forth_%Y%m%d_%H%M%S" time)
  timeStr.fixup
  mko String resultStr
  begin
    resultStr.set(tempDir)
    resultStr.append(timeStr.get)
    resultStr.append(format(rand "_%d"))
    resultStr.append(".tmp")
  until(not(fexists(resultStr.get)))

  addTempString(resultStr.get resultStr.length)

  oclear resultStr
  oclear timeStr
;

: $shellRun
  -> ptrTo byte commandString
  true -> int okay
  null -> ptrTo byte outName
  null -> ptrTo byte errName
  null -> int outStream
  null -> int errStream
  -1   -> int oldStdOut
  -1   -> int oldStdErr
  0    -> int bytesRead
  2048 -> int readSize
  malloc( readSize 1+ ) -> ptrTo byte buffer
  -1   -> int result
  
  // create temp filenames for stdout and stderr streams
  makeTempfileName -> outName
  if( outName 0= )
    error( "$shellRun: failure creating standard out tempfile name" )
    false -> okay
  endif
  
  makeTempfileName -> errName
  if( errName 0= )
    error( "$shellRun: failure creating standard error tempfile name" )
    false -> okay
  endif
  
  // open temp file which will take standard output
  if( outName )
    fopen( outName "w" ) -> outStream
    if( outStream 0= )
      addErrorText( "$shellRun: failure opening standard out file " )
      error( outName )
      false -> okay
    endif
  endif
  
  // open temp file which will take standard error
  if( errName )
    fopen( errName "w" ) -> errStream
    if( errStream 0= )
      addErrorText( "$shellRun: failure opening standard error file " )
      error( errName )
      false -> okay
    endif
  endif
  
  // dup standard output file descriptor so we can restore it on exit
  if( okay )
    _dup( 1 ) -> oldStdOut
    if( oldStdOut -1 = )
      error( "$shellRun: failure dup-ing stdout" )
      false -> okay
    endif
  endif
    
  // dup standard error file descriptor so we can restore it on exit
  if( okay )
    _dup( 2 ) -> oldStdErr
    if( oldStdErr -1 = )
      error( "$shellRun: failure dup-ing stderr" )
      false -> okay
    endif
  endif

  //
  // redirect standard out to temp output file
  //
  if( okay )
    if( _dup2( _fileno( outStream ) 1 ) -1 = )
      error( "$shellRun: failure redirecting stdout" )
      false -> okay
    else
      // redirect standard error to temp error file
      if( _dup2( _fileno( errStream ) 2 ) -1 = )
        error( "$shellRun: failure redirecting stderr" )
        false -> okay
      else
      
        // have DOS shell execute command line string pointed to by TOS
        _shellRun( commandString ) -> result
        
        fflush( stdout ) drop
        fflush( stderr ) drop
        // close standard error stream, then reopen it on oldStdError (console output)
        _dup2( oldStdErr 2 ) drop
      endif
      // close standard output stream, then reopen it on oldStdOut (console output)
      _dup2( oldStdOut 1 ) drop
    endif
    fclose( outStream ) drop
    null -> outStream
    fclose( errStream ) drop
    null -> errStream
  endif

  //  
  // dump contents of output and error files using forth console IO routines
  //
  if( okay )
    fopen( outName "r" ) -> outStream
    if( outStream )
      begin
        fread( buffer 1 readSize outStream ) -> bytesRead
        0 bytesRead buffer byte[] c!
        buffer %s
      until( feof( outStream ) )
      fclose( outStream ) drop
      null -> outStream
    else
      addErrorText( "$shellRun: failure reopening standard output file " )
      error( outName )
      false -> okay
    endif
    
    fopen( errName "r" ) -> errStream
    if( errStream )
      begin
        fread( buffer 1 readSize errStream ) -> bytesRead
        0 bytesRead buffer byte[] c!
        buffer %s
      until( feof( errStream ) )
      fclose( errStream ) drop
      null -> errStream
    else
      addErrorText( "$shellRun: failure reopening standard error file " )
      error( errName )
      false -> okay
    endif
  endif

  // cleanup
  if( outStream )
    fclose( outStream ) drop
  endif
  if( errStream )
    fclose( errStream ) drop
  endif
  if( outName )
	remove( outName ) drop
  endif
  if( errName )
	remove( errName ) drop
  endif
  free( buffer )
  
  result
;	


addHelp pwd	pwd			display working directory
: pwd
#if WINDOWS
  "chdir"
#else
  "pwd"
#endif
  $shellRun drop
;

addHelp ls	ls BLAH		display directory (BLAH is optional filespec)
: ls
  '\n' $word -> _TempStringA
#if WINDOWS
  "dir" -> _TempStringB
#else
  "ls" -> _TempStringB
#endif
  if( strcmp( _TempStringA "" ) )
    // user specified a directory
    strcat( _TempStringB " " )
    strcat( _TempStringB _TempStringA )
  endif
  $shellRun( _TempStringB ) drop
;

addHelp mv	mv OLDNAME NEWNAME		rename a file
: mv
  blword -> _TempStringA
  blword -> _TempStringB
  rename( _TempStringA _TempStringB )
  if( 0<> )
    addErrorText( "mv: failure renaming file " )
    error( _TempStringA )
  endif
;

addHelp rm	rm FILENAME		remove a file
: rm
  blword -> _TempStringA
  remove( _TempStringA )
  if( 0<> )
    addErrorText( "rm: failure removing file " )
    error( _TempStringA )
  endif
;

addHelp more more FILENAME	display FILENAME on screen
: more
  255 string linebuff
  fopen( blword "r" ) -> int infile
  if( infile null = )
    exit
  endif
  false -> int done
  0 -> int lineCounter
  begin
    fgets( linebuff 250 infile ) -> int result
    
    if( result null = )
      true -> done
    else
      result %s
      // pause every 50 lines
      1 ->+ lineCounter
      if( lineCounter 50 > )
        0 -> lineCounter
        "Hit q to quit, any other key to continue\n" %s
        fgetc( stdin ) dup
        if( 'q' = swap 'Q' = or )
          true -> done
        endif
      endif
    endif
    
    if( feof( infile ) )
      true -> done
    endif
  done until
  %nl
  infile fclose drop
;

addHelp sys	sys REST_OF_LINE	run rest of line in a DOS shell
: sys $shellRun( 0 $word ) drop ;

addHelp fileExists	"FILEPATH" fileExists ... true/false		tell if a file exists
: fileExists "r" fopen dup if fclose drop true else drop false endif ;

addHelp numLocals	returns number of longwords of local variables in current stack frame
: numlocals fp if fp rp - 4 / 1- else 0 endif ;

: dlocals
  fp if
    rp 4+
    fp 4-
    do
      i @ %x %nl
    -4 +loop
  else
    "no locals defined\n" %s
  endif
;
addHelp dlocals		display the local variables in current stack frame

addHelp demo	 demo is used to both display and evaluate a line of text
: demo source drop %s %nl ;
precedence demo


addHelp list     BLOCK_NUM ...     display specified block
variable scr  0 scr !
: list dup scr ! block 16 0 do dup 64 type %nl 64+ loop drop ;
: lb dup scr ! block 16 0 do i %d '\t' %c '|' %c dup 64 type '|' %c %nl 64+ loop drop ;
: load dup thru ;

enum: threadRunStates
  kFTRSStopped		// initial state, or after executing stop, needs another thread to Start it
  kFTRSReady		// ready to continue running
  kFTRSSleeping		// sleeping until wakeup time is reached
  kFTRSBlocked		// blocked on a soft lock
  kFTRSExited		// done running - executed exitThread
;enum

#if WINDOWS

enum:	WIN32_FILE_ATTRIB
  0x00001	FATTRIB_READONLY
  0x00002	FATTRIB_HIDDEN
  0x00004	FATTRIB_SYSTEM
  0x00010	FATTRIB_DIRECTORY
  0x00020	FATTRIB_ARCHIVE
  0x00040	FATTRIB_DEVICE
  0x00080	FATTRIB_NORMAL
  0x00100	FATTRIB_TEMPORARY
  0x00200	FATTRIB_SPARSE
  0x00400	FATTRIB_LINK
  0x00800	FATTRIB_COMPRESSED
  0x01000	FATTRIB_OFFLINE
  0x02000	FATTRIB_NOT_INDEXED
  0x04000	FATTRIB_ENCRYPTED
;enum

struct: FILETIME
  int	lowDateTime
  int	highDateTime
;struct

decimal

enum:	WIN32_CONSTANTS
  windowsConstants 4+  @ TCHAR_SIZE
  windowsConstants 8+  @ MAX_PATH
  windowsConstants 12+ @ WIN32_FIND_DATA_SIZE
  windowsConstants 16+ @ CRITICAL_SECTION_SIZE
;enum

struct: WIN32_FIND_DATA
  int		attributes
  FILETIME	creationTime
  FILETIME	lastAccessTime
  FILETIME	lastWriteTime
  int		fileSizeHigh
  int		fileSizeLow
  int		reserved0
  int		reserved1
  MAX_PATH arrayOf byte fileName
  14 arrayOf byte shortFileName
;struct

struct: dirent
  int	d_ino
  short	d_reclen
  int	d_namlen
  int	d_type
  MAX_PATH arrayOf byte d_name
;struct

#else

struct: dirent
  int	d_ino
  short	d_reclen
  int	d_namlen
  int	d_type
  256 arrayOf byte d_name
;struct

#endif

// these may be OS specific
enum: DIRENT_TYPE_BITS
  0x4000 DIRENT_IS_DIR
  0x8000 DIRENT_IS_REGULAR
;enum

// "DIRECTORY_PATH" ... Array of String
: getFilesInDirectory
  int dirHandle
  ptrTo dirent pEntry
  int pName
  new Array -> Array of String filenames
  
  opendir -> dirHandle
  if( dirHandle )
    begin
      readdir(dirHandle) -> pEntry
    while( pEntry )
      pEntry.d_name(0 ref) -> pName
      if(pName c@ '.' <>)
        new String -> String filename
        filename.set(pName)
        filenames.push(filename)
        oclear filename
      endif
    repeat
    closedir(dirHandle) drop
  endif
  unref filenames
;

//######################################################################
// debug and trace statements
// stuff in d[ ... ]d is only compiled if compileDebug is true
// stuff in t[ ... ]t is only compiled if compileTrace is true, and is only executed if runTrace is true
// stuff in assert[ ... ] is only compiled if compileAsserts is true

false -> int compileDebug

false -> int compileTrace
false -> int runTrace

false -> int compileAsserts

: d[
  // remember start of debug section in case we need to uncompile it
  here
;
precedence d[

: ]d
  // TOS is dp when d[ was executed - start of debug section
  if( compileDebug )
    // leave debug section as is
    drop
  else
    // uncompile debug section
    dp !
  endif
;
precedence ]d

: t[
  // remember start of debug section in case we need to uncompile it
  here
  postpone runTrace postpone if
;
precedence t[

: ]t
  postpone endif
  if( compileTrace )
    // leave trace section as is
    drop
  else
    // uncompile trace section
    dp !
  endif
;
precedence ]t


// usage:   assert[ boolean ]
: _assert
  if( not )
    error( "assertion failure" )
  endif
;

: assert[
  $word( ']' )
  if( compileAsserts )
    $evaluate postpone _assert
  else
    drop
  endif
;
precedence assert[

: oshow
  if( dup 0= )
    "NULLObj" %s drop
  else
    <Object>.show
  endif
;
addHelp oshow   OBJECT oshow ...    like OBJECT.show, but doesn't crash if OBJECT is NULL

: ss system.stats ;

//######################################################################
// automated test support

// PARAM_VALUE extParam PARAM_TYPE PARAM_NAME
: extParam
  blword -> ptrTo byte paramType
  blword -> ptrTo byte paramName
  
  if($find(paramName))
    // already defined, just drop value on TOS
    drop
  else
    mko String paramString
    
    if(strcmp(paramType "string"))
      paramString.appendFormatted("-> %s %s" r[ paramType paramName ]r)
    else
      // param is string, so build: "-> STRING_LEN string PARAM_NAME"
      -> ptrTo byte stringVal
      stringVal
      paramString.appendFormatted("-> %d string %s" r[ strlen(stringVal) paramName ]r)
    endif
    $evaluate(paramString.get)
    
    oclear paramString
  endif
;

// scripts that may be used in automated testing should check 'testsRunning' and skip printing anything
//  which could have non-predictable output - like running time, clock time or random elements
false -> bool testsRunning

mko Array consoleOutStreamStack

addHelp pushConsoleOut   OUTPUT_STREAM pushConsoleOut ...   save current console output stream and set new output stream
: pushConsoleOut
  consoleOutStreamStack.push(getConsoleOut)
  setConsoleOut
;

addHelp pushOutputFile   OUTPUT_FILENAME pushOutputFile ...   redirect output stream to named file
: pushOutputFile
  -> ptrTo byte outFileName
  mko FileOutStream outFile
  
  if(outFile.open(outFileName "w"))
    pushConsoleOut(outFile)
  else
    addErrorText(outFileName)
    error("pushOutputFile: failed to open ")
  endif
  oclear outFile
;

addHelp popConsoleOut   popConsoleOut ... OLD_CONSOLE_OUTSTREAM      restore previous console output stream
: popConsoleOut
  if(consoleOutStreamStack.count)
    getConsoleOut
    setConsoleOut(consoleOutStreamStack.pop)
  else
    error("popConsoleOutStream - stack is empty")
  endif
;

// use t{ ... }t to quickly redirect all print output to the trace stream (usually an external logger program)
mko TraceOutStream traceOut
: t{ pushConsoleOut(traceOut) ;
: }t popConsoleOut drop ;

addHelp outToScreen   restore output to the normal console
: outToScreen getDefaultConsoleOut setConsoleOut ;


//######################################################################
addHelp pushContext save the current base, search vocabularies and definitions vocabulary on stack
: pushContext
  do(system.getSearchVocabDepth 0)
    system.getSearchVocabAt(i)
  loop
  system.getSearchVocabDepth
  system.getDefinitionsVocab
  base @
  'fctx'
;

addHelp popContext restore the current base, search vocabularies and definitions vocabulary from stack
: popContext
  int numSearchVocabs
  if('fctx' <>)
    error("popContext - wrong stuff on stack")
  else
    base !
    system.setDefinitionsVocab
    -> numSearchVocabs
    only
    if(numSearchVocabs 0>)
      system.setSearchVocabTop
      do(numSearchVocabs 1)
        system.pushSearchVocab
      loop
    endif
  endif
;

//######################################################################
// flags to use with setTrace command

enum: eLogFlags
  1     kLogStack
  2     kLogOuterInterpreter
  4     kLogInnerInterpreter
  8     kLogShell
  16    kLogStructs
  32    kLogVocabulary
  64    kLogIO
  128   kLogEngine
  256   kLogToConsole
  512   kLogCompilation
  1024  kLogProfiler
;enum

//######################################################################
//  defs used with Socket

enum: networkEnums
  0     INADDR_ANY
  
  1     SOCK_STREAM     // stream socket
  2     SOCK_DGRAM      // datagram socket
  3     SOCK_RAW        // raw-protocol interface
  
  0     AF_UNSPEC       // unspecified
  1     AF_UNIX         // local to host (pipes, portals)
  2     AF_INET         // internetwork: UDP, TCP, etc.
  23    AF_INET6        // Internetwork Version 6
  
  4     IPPROTO_IPV4
  6     IPPROTO_TCP
  17    IPPROTO_UDP
  41    IPPROTO_IPV6
;enum

struct: sockaddr_in
    ushort family
    ushort port
    uint  ipv4addr
    long  dummy
;struct

struct: sockaddr
  ushort family
  14 arrayOf ubyte dummy
;struct


//######################################################################

: goclient 0x6701a8c0 client ;
: goserver server ;

: vd verbose describe ;
: f. %f %bl ;
: g. %g %bl ;
: x. %x %bl ;
: 2f. %2f %bl ;
: 2g. %2g %bl ;
: 2x. %2x %bl ;

//######################################################################
//  DLL support

: _addDLLEntry blword addDLLEntry ;

: _dllEntryType
  builds
    ,
  does
    @ _addDLLEntry
;

// entry points can be defined with:
// ARGUMENT_COUNT _addDLLEntry ENTRY_POINT_NAME
// or use the convenience words dll_0 ... dll_15

0 _dllEntryType dll_0
1 _dllEntryType dll_1
2 _dllEntryType dll_2
3 _dllEntryType dll_3
4 _dllEntryType dll_4
5 _dllEntryType dll_5
6 _dllEntryType dll_6
7 _dllEntryType dll_7
8 _dllEntryType dll_8
9 _dllEntryType dll_9
10 _dllEntryType dll_10
11 _dllEntryType dll_11
12 _dllEntryType dll_12
13 _dllEntryType dll_13
14 _dllEntryType dll_14
15 _dllEntryType dll_15

loaddone
