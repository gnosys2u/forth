setTrace( 0 )

"forth_autoload" $forget drop
: forth_autoload "This is the forth_autoload.txt tools module" %s ;

0x7FFFFFFF -> int MAXINT
0x80000000 -> int MININT

: ' blword $' ;
: lf blword $load ;
: precedence blword $precedence ;
: forget
  blword dup
  if( not( $forget ) )
    "forget failed for " %s %s %nl
  else
    drop
  endif
;
: autoforget blword $forget drop ;

: ds dstack ;

: see verbose describe ;

: %nc swap 0 do dup %c loop drop ;
0x20 constant bl
: spaces bl %nc ;

: depth s0 sp - 2 rshift 1- ;
: aligned 3+ 0xFFFFFFFC and ;

: autoload
  if( blword $find  0= )
    $load( blword )
  else
    blword drop
  endif
;

//######################################################################
// features support

// values to be used with features variable
enum: eFeatures
  0x0001  kFFParenIsComment
  0x0002  kFFCCharacterLiterals
  0x0004  kFFMultiCharacterLiterals
  0x0008  kFFCStringLiterals
  0x0010  kFFCHexLiterals
  0x0020  kFFDoubleSlashComment
  0x0040  kFFIgnoreCase
  0x0080  kFFDollarHexLiterals
  0x0100  kFFCFloatLiterals
  0x0200  kFFParenIsExpression
  // kFFAnsi and kFFRegular are the most common feature combinations
  kFFParenIsComment kFFIgnoreCase + kFFDollarHexLiterals + kFFAnsi
  kFFCCharacterLiterals kFFMultiCharacterLiterals + kFFCStringLiterals +
    kFFCHexLiterals + kFFDoubleSlashComment + kFFCFloatLiterals + kFFRegular
    
;enum

: .features
  features
  "0x" %s dup %x
  dup kFFParenIsComment and if " kFFParenIsComment" %s endif
  dup kFFCCharacterLiterals and if " kFFCCharacterLiterals" %s endif
  dup kFFMultiCharacterLiterals and if " kFFMultiCharacterLiterals" %s endif
  dup kFFCStringLiterals and if " kFFCStringLiterals" %s endif
  dup kFFCHexLiterals and if " kFFCHexLiterals" %s endif
  dup kFFDoubleSlashComment and if " kFFDoubleSlashComment" %s endif
  dup kFFIgnoreCase and if " kFFIgnoreCase" %s endif
  dup kFFDollarHexLiterals and if " kFFDollarHexLiterals" %s endif
  kFFCFloatLiterals and if " kFFCFloatLiterals" %s endif
;

//######################################################################
// help support

255 string _TempStringA
255 string _TempStringB

: immediate
  new OVocabulary -> OVocabulary vocab
  vocab.open(ref definitions)
  vocab.seekNewestEntry
  vocab.getValueLength + >r // top of rstack points to length byte of counted string
  move( r@ 1+ _TempStringA r@ c@ )
  r> c@ dup _TempStringA 4- !
  0 swap _TempStringA + c!
  _TempStringA $precedence
  oclear vocab
;
  
: $alias
  -> int oldSymbol
  -> int newSymbol
  new OVocabulary -> OVocabulary vocab
  vocab.open(ref definitions)
  vocab.findEntryByName(oldSymbol) -> int oldEntry
  if(oldEntry)
    vocab.addSymbol(newSymbol 0 0 0)
    vocab.seekNewestEntry -> int newEntry
    move(oldEntry  newEntry  vocab.getValueLength)
  else
    "Symbol " %s oldSymbol %s " not found!\n" %s
  endif
  oclear vocab
;

: alias blword -> 250 string aa  aa blword $alias ;

alias ->o ->+    // ->o stores to an object variable without changing refcounts
alias mko makeObject
  
: $,
  // TOS is ptr to nul terminated string at DP
  here over strlen 1+ allot
  swap strcpy
;

0 -> int helpChain
: addHelp
  here helpChain , -> helpChain		// link new entry into help chain
  blword $,		// compile new symbol
  0 $word $,		// compile symbols help definition
  align
;

false -> int _helpfileLoaded

: $help
  -> ptrTo byte s
  helpChain	-> int pNext
  if( strlen( s ) 0= )
    // line was empty, just list all help
    begin
    while( pNext )
      pNext 4+ dup %s "	" %s
      strlen( dup ) 1+ + %s %nl
      pNext @ -> pNext
    repeat
    exit
  endif

  begin
  while( pNext )
    if( strcmp( pNext 4+ s ) 0= )
      pNext 4+ strlen( dup ) 1+ + %s
      exit
    endif
    pNext @ -> pNext
  repeat
  s %s " not found!\n" %s
;


: help
  blword -> _TempStringA
  if( _helpfileLoaded not )
    $load( "help.txt"  )
    true -> _helpfileLoaded
    // there is a $help at end of help.txt that will complete the lookup
    _TempStringA
  else
    $help( _TempStringA )
  endif
;

addHelp addHelp	addHelp SYMBOL REST_OF_LINE		add help entry
addHelp $,	STRING_ADDR $,		compiles string (can leave DP unaligned)
addHelp help	help BLAH		show help for BLAH
addHelp	ds	ds			dump stack

addHelp $hash   STRING_ADDR $hash     return hash of string
: $hash
  strlen( dup ) 0 hash
;

addHelp cd	cd BLAH			change working directory to BLAH
: cd
  if( chdir( blword ) )
    "cd failed!\n" %s
  endif
;


: $system
  -> ptrTo byte commandString
  true -> int okay
  null -> ptrTo byte outName
  null -> ptrTo byte errName
  null -> int outStream
  null -> int errStream
  -1   -> int oldStdOut
  -1   -> int oldStdErr
  0    -> int bytesRead
  2048 -> int readSize
  malloc( readSize 1+ ) -> ptrTo byte buffer
  -1   -> int result
  
  // create temp filenames for stdout and stderr streams
  tmpnam -> outName
  if( outName 0= )
    error( "system: failure creating standard out tempfile name" )
    false -> okay
  endif
  
  tmpnam -> errName
  if( errName 0= )
    error( "system: failure creating standard error tempfile name" )
    false -> okay
  endif
  
  // open temp file which will take standard output
  if( outName )
    fopen( outName "w" ) -> outStream
    if( outStream 0= )
      addErrorText( "system: failure opening standard out file " )
      error( outName )
      false -> okay
    endif
  endif
  
  // open temp file which will take standard error
  if( errName )
    fopen( errName "w" ) -> errStream
    if( errStream 0= )
      addErrorText( "system: failure opening standard error file " )
      error( errName )
      false -> okay
    endif
  endif
  
  // dup standard output file descriptor so we can restore it on exit
  if( okay )
    _dup( 1 ) -> oldStdOut
    if( oldStdOut -1 = )
      error( "system: failure dup-ing stdout" )
      false -> okay
    endif
  endif
    
  // dup standard error file descriptor so we can restore it on exit
  if( okay )
    _dup( 2 ) -> oldStdErr
    if( oldStdErr -1 = )
      error( "system: failure dup-ing stderr" )
      false -> okay
    endif
  endif

  //
  // redirect standard out to temp output file
  //
  if( okay )
    if( _dup2( _fileno( outStream ) 1 ) -1 = )
      error( "system: failure redirecting stdout" )
      false -> okay
    else
      // redirect standard error to temp error file
      if( _dup2( _fileno( errStream ) 2 ) -1 = )
        error( "system: failure redirecting stderr" )
        false -> okay
      else
      
        // have DOS shell execute command line string pointed to by TOS
        system( commandString ) -> result
        
        fflush( stdout ) drop
        fflush( stderr ) drop
        // close standard error stream, then reopen it on oldStdError (console output)
        _dup2( oldStdErr 2 ) drop
      endif
      // close standard output stream, then reopen it on oldStdOut (console output)
      _dup2( oldStdOut 1 ) drop
    endif
    fclose( outStream ) drop
    null -> outStream
    fclose( errStream ) drop
    null -> errStream
  endif

  //  
  // dump contents of output and error files using forth console IO routines
  //
  if( okay )
    fopen( outName "r" ) -> outStream
    if( outStream )
      begin
        fread( buffer 1 readSize outStream ) -> bytesRead
        0 bytesRead buffer byte[] c!
        buffer %s
      until( feof( outStream ) )
      fclose( outStream ) drop
      null -> outStream
    else
      addErrorText( "system: failure reopening standard output file " )
      error( outName )
      false -> okay
    endif
    
    fopen( errName "r" ) -> errStream
    if( errStream )
      begin
        fread( buffer 1 readSize errStream ) -> bytesRead
        0 bytesRead buffer byte[] c!
        buffer %s
      until( feof( errStream ) )
      fclose( errStream ) drop
      null -> errStream
    else
      addErrorText( "system: failure reopening standard error file " )
      error( errName )
      false -> okay
    endif
  endif

  // cleanup
  if( outStream )
    fclose( outStream ) drop
  endif
  if( errStream )
    fclose( errStream ) drop
  endif
  if( outName )
	remove( outName ) drop
    free( outName )
  endif
  if( errName )
	remove( errName ) drop
    free( errName )
  endif
  free( buffer )
  
  result
;	


addHelp pwd	pwd			display working directory
: pwd
#ifdef WINDOWS
  "chdir"
#else
  "pwd"
#endif
  $system drop
;

addHelp ls	ls BLAH		display directory (BLAH is optional filespec)
: ls
  '\n' $word -> _TempStringA
#ifdef WINDOWS
  "dir" -> _TempStringB
#else
  "ls" -> _TempStringB
#endif
  if( strcmp( _TempStringA "" ) )
    // user specified a directory
    strcat( _TempStringB " " )
    strcat( _TempStringB _TempStringA )
  endif
  $system( _TempStringB ) drop
;

addHelp mv	mv OLDNAME NEWNAME		rename a file
: mv
  blword -> _TempStringA
  blword -> _TempStringB
  rename( _TempStringA _TempStringB )
  if( 0<> )
    addErrorText( "mv: failure renaming file " )
    error( _TempStringA )
  endif
;

addHelp rm	rm FILENAME		remove a file
: rm
  blword -> _TempStringA
  remove( _TempStringA )
  if( 0<> )
    addErrorText( "rm: failure removing file " )
    error( _TempStringA )
  endif
;

addHelp more more FILENAME	display FILENAME on screen
: more
  255 string linebuff
  fopen( blword "r" ) -> int infile
  if( infile null = )
    exit
  endif
  false -> int done
  0 -> int lineCounter
  begin
    fgets( linebuff 250 infile ) -> int result
    
    if( result null = )
      true -> done
    else
      result %s
      // pause every 50 lines
      1 ->+ lineCounter
      if( lineCounter 50 > )
        0 -> lineCounter
        "Hit q to quit, any other key to continue\n" %s
        fgetc( stdin ) dup
        if( 'q' = swap 'Q' = or )
          true -> done
        endif
      endif
    endif
    
    if( feof( infile ) )
      true -> done
    endif
  done until
  %nl
  infile fclose drop
;

addHelp sys	sys REST_OF_LINE	run rest of line in a DOS shell
: sys system( 0 $word ) drop ;

addHelp fileExists	"FILEPATH" fileExists ... true/false		tell if a file exists
: fileExists "r" fopen dup if fclose drop true else drop false endif ;


int dumpWidth
16 -> dumpWidth

// ADDR LEN OFFSET _dump
: _dump
  -> int offset		// offset is subtracted from the actual data address before display
  -> int len
  -> int addr
  int columns
  int endAddr
  int ch

  addr len + -> endAddr
  len -> columns
  begin
  while( addr endAddr < )
    addr offset - "%08x" format %s "   " %s
    if( len dumpWidth > )
      dumpWidth -> columns
    endif
    do( columns 0 )
      addr i + c@ "%02x " format %s
      if( and( i 3 ) 3 = )
        %bl
      endif
    loop
    "    " %s
    // why do we have to add 1 to dumpWidth here?
    dumpWidth 1+ columns - 0 do %bl %bl %bl loop
    do( columns 0 )
      addr i + c@ -> ch
      if( ch bl >  ch 127 < and )
        ch
      else
        '.'
      endif
      %c
    loop
    columns ->+ addr
    columns ->- len
    %nl
  repeat
;

// ADDR LEN OFFSET _dump
: _ldump
  -> int offset		// offset is subtracted from the actual data address before display
  and( 3+ invert( 3 ) ) -> int len
  and( invert( 3 ) ) -> int addr
  int columns
  int endAddr
  int ch

  addr len + -> endAddr
  len -> columns
  begin
  while( addr endAddr < )
    addr offset - "%08x" format %s "   " %s
    if( len dumpWidth > )
      dumpWidth -> columns
    endif
    do( columns 0 )
      addr i + @ "%08x " format %s
    +loop( 4 )
    "    " %s
    // why do we have to add 1 to dumpWidth here?
    dumpWidth 1+ columns - 0 do %bl %bl %bl loop
    do( columns 0 )
      addr i + c@ -> ch
      if( ch bl >  ch 127 < and )
        ch
      else
        '.'
      endif
      %c
    loop
    columns ->+ addr
    columns ->- len
    %nl
  repeat
;

addHelp	dump		ADDRESS LEN dump	dump memory
addHelp	ldump		ADDRESS LEN ldump	dump memory as longs
: dump 0 _dump ;
: ldump 0 _ldump ;


addHelp fdump	FILENAME OFFSET LEN fdump	dump file contents
addHelp fldump	FILENAME OFFSET LEN fldump	dump file contents as longs
: _fdump
  -> op dumpOp
  -> int len
  -> int offset
  "rb" fopen -> int infile
  int buff

  if( infile 0= )
    "open failure" %s %nl
    exit
  endif
  if( len 0= )
    // read entire file
    infile flen -> len
  endif
  len malloc -> buff
  infile offset 0 fseek
  if( 0 <> )
    "fdump fseek failure" %nl exit
  endif
  buff len 1 infile fread
  if( 0= )
    "fdump read failure" %s %nl
  else
    buff len buff dumpOp
  endif
  infile fclose drop
  buff free
;

: fdump ['] _dump _fdump ;
: fldump ['] _ldump _fdump ;

addHelp comparefiles	FILENAME1 FILENAME2 comparefiles TRUE_IF_EQUAL
: comparefiles
  -> ptrTo byte fname2
  -> ptrTo byte fname1
  
  fname2 "rb" fopen -> int infile2
  if( infile2 0= )
    "failed to open " %s fname2 %s %nl
    false exit
  endif
  
  fname1 "rb" fopen -> int infile1
  if( infile1 0= )
    "failed to open " %s fname1 %s %nl
    infile2 fclose drop
    false exit
  endif
  
  // opened both files successfully
  1 -> int linenum
  begin
    infile1 fgetc -> int b1
    infile2 fgetc -> int b2
    if( b1 b2 <> )
      infile1 fclose drop
      infile2 fclose drop
      "mismatch at line " %s linenum %d %nl
      false exit
    endif
    if( b1 '\n' = )
      1 ->+ linenum
    endif
  until( infile1 feof )
  infile1 fclose drop
  infile2 fclose drop
  true
;

addHelp numLocals	returns number of longwords of local variables in current stack frame
: numlocals fp if fp rp - 4 / 1- else 0 endif ;

: dlocals
  fp if
    rp 4+
    fp 4-
    do
      i @ %x %nl
    -4 +loop
  else
    "no locals defined\n" %s
  endif
;
addHelp dlocals		display the local variables in current stack frame

addHelp demo	 demo is used to both display and evaluate a line of text
: demo source drop %s %nl ;
precedence demo


addHelp outToScreen   restore output to the normal console
: outToScreen getDefaultConsoleOut setConsoleOut ;

addHelp list     BLOCK_NUM ...     display specified block
variable scr  0 scr !
: list dup scr ! block 16 0 do dup 64 type %nl 64+ loop drop ;
: lb dup scr ! block 16 0 do i %d '\t' %c '|' %c dup 64 type '|' %c %nl 64+ loop drop ;
: load dup thru ;

#ifdef WINDOWS

enum:	WIN32_FILE_ATTRIB
  0x00001	FATTRIB_READONLY
  0x00002	FATTRIB_HIDDEN
  0x00004	FATTRIB_SYSTEM
  0x00010	FATTRIB_DIRECTORY
  0x00020	FATTRIB_ARCHIVE
  0x00040	FATTRIB_DEVICE
  0x00080	FATTRIB_NORMAL
  0x00100	FATTRIB_TEMPORARY
  0x00200	FATTRIB_SPARSE
  0x00400	FATTRIB_LINK
  0x00800	FATTRIB_COMPRESSED
  0x01000	FATTRIB_OFFLINE
  0x02000	FATTRIB_NOT_INDEXED
  0x04000	FATTRIB_ENCRYPTED
;enum

struct: FILETIME
  int	lowDateTime
  int	highDateTime
;struct

decimal

enum:	WIN32_CONSTANTS
  windowsConstants 4+  @ TCHAR_SIZE
  windowsConstants 8+  @ MAX_PATH
  windowsConstants 12+ @ WIN32_FIND_DATA_SIZE
  windowsConstants 16+ @ CRITICAL_SECTION_SIZE
;enum

struct: WIN32_FIND_DATA
  int		attributes
  FILETIME	creationTime
  FILETIME	lastAccessTime
  FILETIME	lastWriteTime
  int		fileSizeHigh
  int		fileSizeLow
  int		reserved0
  int		reserved1
  MAX_PATH arrayOf byte fileName
  14 arrayOf byte shortFileName
;struct

struct: dirent
  int	d_ino
  short	d_reclen
  int	d_namlen
  int	d_type
  MAX_PATH arrayOf byte d_name
;struct

#endif

//######################################################################
// debug and trace statements
// stuff in d[ ... ]d is only compiled if compileDebug is true
// stuff in t[ ... ]t is only compiled if compileTrace is true, and is only executed if runTrace is true
// stuff in assert[ ... ] is only compiled if compileAsserts is true

false -> int compileDebug

false -> int compileTrace
false -> int runTrace

false -> int compileAsserts

: d[
  // remember start of debug section in case we need to uncompile it
  here
;
precedence d[

: ]d
  // TOS is dp when d[ was executed - start of debug section
  if( compileDebug )
    // leave debug section as is
    drop
  else
    // uncompile debug section
    -> here
  endif
;
precedence ]d

: t[
  // remember start of debug section in case we need to uncompile it
  here
  postpone runTrace postpone if
;
precedence t[

: ]t
  postpone endif
  if( compileTrace )
    // leave trace section as is
    drop
  else
    // uncompile trace section
    -> here
  endif
;
precedence ]t


// usage:   assert[ boolean ]
: _assert
  if( not )
    error( "assertion failure" )
  endif
;

: assert[
  $word( ']' )
  if( compileAsserts )
    $evaluate postpone _assert
  else
    drop
  endif
;
precedence assert[

: oshow
  if( 2dup l0= )
    "NULLObj" %s 2drop
  else
    <Object>.show
  endif
;
addHelp oshow   OBJECT oshow ...    like OBJECT.show, but doesn't crash if OBJECT is NULL

//######################################################################

: goclient 0x6701a8c0 client ;
: goserver server ;

//######################################################################
//  DLL support

: _addDLLEntry blword addDLLEntry ;

: _dllEntryType
  builds
    ,
  does
    @ _addDLLEntry
;

// entry points can be defined with:
// ARGUMENT_COUNT _addDLLEntry ENTRY_POINT_NAME
// or use the convenience words dll_0 ... dll_15

0 _dllEntryType dll_0
1 _dllEntryType dll_1
2 _dllEntryType dll_2
3 _dllEntryType dll_3
4 _dllEntryType dll_4
5 _dllEntryType dll_5
6 _dllEntryType dll_6
7 _dllEntryType dll_7
8 _dllEntryType dll_8
9 _dllEntryType dll_9
10 _dllEntryType dll_10
11 _dllEntryType dll_11
12 _dllEntryType dll_12
13 _dllEntryType dll_13
14 _dllEntryType dll_14
15 _dllEntryType dll_15

loaddone
