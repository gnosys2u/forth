//======== atcGame ========

class: atcGame extends iAtcGame

  iAtcRegion region
  //oArray pendingTakeoffs
  atcInputHandler inputHandler
  oString message
  
  int updateRate
  int newplaneRate
 
  int commandKey
  
  method: init
    'game' -> tag
    new oString -> name
    name.set
    if(name.length 0=)
      name.set("default.atc")
    endif
    //name.get %s '!' %c %nl
    new oArray -> airplanes
    new oList -> activeAirplanes
    new oList -> inactiveAirplanes
    new atcConsoleDisplay -> display
    new atcRegion -> region
    new atcInputHandler -> inputHandler
    new oString -> message
    inputHandler.init( region display )
  ;method
  
  : reset
    oclear name
    oclear activeAirplanes
    oclear inactiveAirplanes
    oclear airplanes
    oclear display
    region.reset
    oclear region
    oclear inputHandler
    oclear message
  ;
  
  method: delete
    t{ "deleting game\n" %s }t
    reset
    super.delete
  ;method
  
  : startGame
    atcAirplane plane
    updateRate 1000 * -> status.moveInterval
    display.init(region)
    ms@ dup -> status.gameStartTime
            -> status.nextMoveTime
    0 -> status.moves
    0 -> status.nextPlaneMove
    true -> status.keepPlaying
    display.showWarning( "" )
    do(26 0)
      // create all airplanes and add to inactive list
      new atcAirplane -> plane
      plane.init( region i )
      new oString -> plane.name
      plane.name.appendChar('A' i +)
      airplanes.push(plane)
      inactiveAirplanes.addTail(plane)
      oclear plane
    loop
  ;
  
  : exitWithFailure
    display.showWarning(message.get)
    key drop
    false -> status.keepPlaying
  ;
  
  // newPlaneX newPlaneY plane ...
  method: moveAirplane
    -> iAtcAirplane plane
    -> int newY
    -> int newX
    display.showWarning(plane.name.get) %bl newX %d %bl newY %d %bl
    region.getTile( plane.x plane.y ) -> atcTile oldTile
    oldTile.removeAirplane( plane )
    if( and(within(newX 0 region.columns) within(newY 0 region.rows)) )
      // plane still in airspace
      region.getTile(newX newY) -> atcTile newTile
      
      if( plane.altitude 0=)
        // plane either landed or crashed
        if(and(oldTile.tileType kATTAirport =  plane.destinationType kATTAirport =))
          // see if landed at destination airport
          region.airports.get(newTile.index) -> iAtcAirport airport
          if( airport.id plane.destination =)
            // legal landing
            1 ->+ game.status.score
            game.deactivateAirplane(plane)
          else
            // illegal landing
            message.set("Plane ")
            message.append(plane.name.get)
            message.append(" landed at wrong airport")
            exitWithFailure
          endif
          oclear airport
        else
          // crashed
          message.set("Plane ")
          message.append(plane.name.get)
          message.append(" crashed")
          exitWithFailure
        endif
      else
        // plane still flying
        newX -> plane.x   newY -> plane.y
        newTile.addAirplane( plane )
        // TODO: check for delayed command if new tile is a beacon
      endif
      oclear newTile
    else
      // plane exited airspace
      true -> int legalExit
      message.set("Plane ")
      message.append(plane.name.get)
      message.append(" exited illegaly")
      if(plane.destinationType kATTPortal <>)
        false -> legalExit
        message.append(" - destination was airport")
      endif
      if(plane.altitude 9000 <>)
        false -> legalExit
        message.append(" - wrong altitude")
      endif
      
      if(oldTile.tileType kATTPortal =)
        region.portals.get(oldTile.index) -> iAtcPortal portal
        if( portal.id plane.destination <>)
          false -> legalExit
          message.append(" - wrong exit")
        endif
        oclear portal
      else
        false -> legalExit
        message.append(" - not at an exit")
      endif
      if(legalExit)
        // legal exit
        1 ->+ game.status.score
        game.deactivateAirplane(plane)
      else
        // illegal exit
        exitWithFailure
      endif
    endif
    oclear oldTile
    oclear plane  
  ;method

  method: activateAirplane  // PLANE_OBJ ...
    -> atcAirplane plane
    activeAirplanes.addTail( plane )
    inactiveAirplanes.remove( plane )
    oclear plane
  ;method
  
  method: deactivateAirplane  // PLANE_OBJ ...
    -> atcAirplane plane
    inactiveAirplanes.addTail( plane )
    activeAirplanes.remove( plane )
    oclear plane
  ;method
  
  : getGameTime
    ms@ status.gameStartTime -
  ;
  
  : updateTime
    //display.showWarning("time ") status.now %d %bl status.nextUpdateTime %d %bl status.updateInterval %d
    if( ms@ status.nextMoveTime >= )
      status.moveInterval ->+ status.nextMoveTime
      1 ->+ status.moves
      true
    else
      false
    endif
  ;

  : generateNewAirplanes
    // add airplanes 
    iAtcAirplane plane
    int destinationNum
    int x  int y   int altitude   int heading
    int destination
    int destinationType
    false -> int isJet
    false -> int isMoving
  
    if( status.moves status.nextPlaneMove >= )
      sh( "generate a plane?")
      newplaneRate ->+ status.nextPlaneMove
      // TODO: create a plane at a portal or airport
      inactiveAirplanes.unrefHead -> plane
      if(or(plane))
        sh( "generate a plane!!!")
        region.airports.count -> int numAirports
        region.portals.count -> int numPortals
        numAirports numPortals + -> int numDestinations
    
        mod( rand numDestinations ) -> int source
        rand 0> -> isJet
        if( source numPortals < )
          sh( "source is portal")
          // generate plane at a portal
          region.portals.get( source ) -> iAtcPortal portal
          // TODO: don't allow portal to generate planes too close together
          portal.entryAltitude -> altitude
          true -> isMoving
          portal.x -> x
          portal.y -> y
          portal.entryDirection -> heading
          oclear portal
        else
          sh( "source is airport")
          // generate plane at an airport
          region.airports.get( source numPortals - ) -> iAtcAirport airport
          airport.altitude -> altitude
          airport.x -> x
          airport.y -> y
          airport.entryDirection -> heading
          oclear airport
        endif
    
        mod( rand numDestinations ) -> int destination
        if( destination numPortals < )
          // destination is a portal
          sh( "destination is portal")
          kATTPortal -> destinationType
        else
          // destination is an airport
          sh( "destination is airport")
          kATTAirport -> destinationType
          numPortals ->- destination
        endif
      
        // x y altitude heading isJet destination destinationType isMoving ...
        plane.setPosition( x y altitude heading )
        plane.setDestination( destination destinationType )
        plane.activate( status.moves isJet isMoving )
      
        sh( "add active airplane")
        activeAirplanes.addTail( plane )
        oclear plane
        sh( "done adding active airplane")
      endif
    endif
  ;
  
  : checkAirplanes
  ;
  
  : reportGameResults
  ;
  
  : updatePlanes
    sh("updatePlanes")
    activeAirplanes.headIter -> oIter iter
    begin
    while( iter.next )
      -> atcAirplane plane
      plane.update( status.moves )
      oclear plane
    repeat
    oclear iter
    sh("updatePlanes done")
  ;
  
  : handleArrivals
    activeAirplanes.headIter -> oIter iter
    begin
    while( iter.next )
      -> atcAirplane plane
      plane.getPos -> long oldPos
      region.getTile( oldPos ) -> atcTile oldTile
      
      oclear plane
      oclear oldTile
    repeat
    oclear iter
  ;
  
  : cleanupGame
  ;
  
  : updateGame
    if( updateTime )
      display.hideAirplanes( activeAirplanes )
      updatePlanes
      //handleArrivals
      generateNewAirplanes
      checkAirplanes
      display.update( activeAirplanes )
    endif
  ;

  // COMMAND_INFO_PTR ...
  method: executeCommand
    -> ptrTo atcCommandInfo commandInfo
    if( commandInfo.airplaneNum airplanes.count < )
      airplanes.get(commandInfo.airplaneNum) -> iAtcAirplane plane
      sh("execute ")  commandInfo.airplaneNum %d %bl plane %x %x %bl
      if( and(commandInfo.command kNumCommands <   commandInfo.command 0>=) )
        plane.executeCommand( commandInfo display )
      else
        display.showWarning("unexpected command ") commandInfo.command %d
      endif
      oclear plane
    endif
  ;method

  : updateInputs
    inputHandler.update
    inputHandler.isGameOver not -> status.keepPlaying
    if( and(status.keepPlaying inputHandler.commandInfo.isReady) )
      executeCommand( inputHandler.commandInfo )
    endif
  ;
 
  method: play
    startGame
    begin
    while( status.keepPlaying )
      updateInputs
      updateGame
      ms( 16 )   // sleep for about a sixtieth of a second between time checks
    repeat
    
    reportGameResults
    cleanupGame
  ;method
  
;class
