//======== airplane ========

class: atcAirplane extends iAtcAirplane

  iAtcRegion region
  int nextUpdateTime
  int updateInterval        // 1 for jets, 2 for regular planes
  int fuel  
    
  : updateAltitude
    int airportNum
    if( commandedAltitude altitude = )
      exit
    endif
    if( commandedAltitude altitude > )
      1000 ->+ altitude
    else
      1000 ->- altitude
    endif
  ;
  
  : updateHeading
    0 -> int rightTurns
    0 -> int leftTurns
    if( commandedHeading heading = )
      exit
    endif
    if( commandedHeading heading > )
      commandedHeading heading - dup -> rightTurns
      8 swap - -> leftTurns
    else
      commandedHeading heading - dup -> leftTurns
      8 swap - -> rightTurns
    endif
    t{ "old heading " %s heading %d " commandedHeading " %s commandedHeading %d }t
    if( rightTurns leftTurns < )
      1 ->+ heading
    else
      1 ->- heading
    endif
    t{ "  rightTurns " %s rightTurns %d " left turns " %s leftTurns %d "   new heading " %s heading %d %nl }t
  ;
  
  : calculateNextPosition
    // don't actually change position, atcWorld.moveAirplane will do that
    // return newX newY
    case( heading )
      kADNorth      of x        y 1-    endof
      kADNorthEast  of x 1+     y 1-    endof
      kADEast       of x 1+     y       endof
      kADSouthEast  of x 1+     y 1+    endof
      kADSouth      of x        y 1+    endof
      kADSouthWest  of x 1-     y 1+    endof
      kADWest       of x 1-     y       endof
      kADNorthWest  of x 1-     y 1-    endof
    endcase
  ;
  
  method: init   // REGION ID
    'plan' -> tag
    -> id
    -> region
  ;method

  method: setPosition     // X Y ALTITUDE HEADING
    dup -> heading    -> commandedHeading
    dup -> altitude   -> commandedAltitude
    -> y
    -> x
  ;method
  
  method: setDestination    // DESTINATION DESTINATION_TYPE ...
    -> destinationType
    -> destination
  ;method
  
  method: activate    // UPDATE_TIME IS_JET IS_MOVING ...
    -> moving

    name.clear
    if
      1 -> updateInterval
      name.appendChar( 'a' id +)
    else
      2 -> updateInterval
      name.appendChar( 'A' id +)
    endif
  
    -> nextUpdateTime

    -1 -> beaconNum
    0 -> circle
  ;method
  
  method: delete
    t{ "deleting plane " %s name.get %s %nl }t
    oclear name
    oclear region
    super.delete
  ;method
  
  method: update  // now ...
    -> int now
    
    if( now nextUpdateTime > )
      if( moving )
        updateInterval ->+ nextUpdateTime
        updateAltitude
        
        if( beaconNum 0< )
          updateHeading
        else
    
          if( region.getBeacon(beaconNum).at(x y) )
            // plane has arrived at beacon
            -1 -> beaconNum
            updateHeading
          endif
        endif
        game.moveAirplane( calculateNextPosition this  )
      endif
    
    endif
  ;method
  
  
  method: commandTurn
    -> beaconNum
    -> commandedHeading
  ;method
  
  method: commandAltitude
    -> commandedAltitude
  ;method
  
  method: commandCircle
    -> beaconNum
    -> circle
  ;method
  
  method: executeCommand // COMMAND_INFO_PTR DISPLAY_OBJECT ...
    -> iAtcDisplay display
    -> ptrTo atcCommandInfo commandInfo
    if( moving)
      case( commandInfo.command)
      
        of(kACTAltitude)
          commandInfo.amount 1000 * -> commandedAltitude
          if(commandInfo.isRelative)
            altitude ->+ commandedAltitude
          endif
          if(commandedAltitude kMaxAltitude >)
            kMaxAltitude -> commandedAltitude
          else
            if(commandedAltitude 0<)
              0 -> commandedAltitude
            endif
          endif
        endof
    
        of(kACTMark)
        endof
    
        of(kACTIgnore)
        endof
      
        of(kACTUnmark)
        endof
      
        of(kACTCircle)
          commandInfo.amount -> circle
        endof
    
        of(kACTTurn)
          0 -> circle
          commandInfo.amount -> commandedHeading
          if(commandInfo.isRelative)
            heading ->+ commandedHeading
          endif
          if(commandedHeading 0<)
            kNumDirections ->+ commandedHeading
          else
            if(commandedHeading kNumDirections >)
              kNumDirections ->- commandedHeading
            endif
          endif
        endof
      
        of(kACTTurnTowards)
        endof
   
        display.showWarning("unexpected command ") %d
      endcase
    
    else

      // plane not moving, only possible command is takeoff (altitude)
      if( commandInfo.command kACTAltitude = )
        if( commandInfo.amount 0> )
          // handle takeoff
          true -> moving
          commandInfo.amount -> commandedAltitude
        endif
      else
        display.showWarning("only valid command is altitude(takeoff)")
      endif
    endif
  
    oclear display
  ;method
  
;class


