autoforget builtinClassTest

: builtinClassTest ;

// Object: delete show getClass compare(OBJ) keep release refCount
// Class: delete create getParent getName getVocabulary getInterface("INTERFACE_NAME") setNew(OP)

// OIterable: headIter tailIter find clone count clear
// OIter: seekNext seekPrev seekHead seekTail next prev current remove unref findNext(OBJ) clone

// OArray: resize(N) ref(N) unref(N) get(N) set(OBJ N) findIndex(OBJ) push(OBJ) popUnref load(N_OBJECTS N)
// OArrayIter:
// OList: head tail addHead(OBJ) addTail(OBJ) removeHead removeTail unrefHead unrefTail load(N_OBJECTS N)
// OListIter: swapNext swapPrev split
// OIntMap: get(KEY) set(OBJ KEY) findKey(OBJ) remove(KEY)
// OIntMapIter: nextPair prevPair

// OString: size length get set(STR) append(STR) resize(N) startsWith(STR) endsWith(STR) contains(STR) clear hash appendChar(CHAR)

// OPair: setA(OBJ) getA setB(OBJ) getB   (no find, clone, count, clear)
// OPairIter: (no remove, findNext, clone)
// OTriple: setA(OBJ) getA setB(OBJ) getB setC(OBJ) getC   (no find, clone, count, clear)
// OTripleIter: (no remove, findNext, clone)

// OByteArray: resize ref(N) get(N) set(OBJ N) findIndex(OBJ) push(BYTE) pop base
// OByteArrayIter: 
// OShortArray: resize ref(N) get(N) set(OBJ N) findIndex(OBJ) push(BYTE) pop base
// OShortArrayIter: 
// OIntArray: resize ref(N) get(N) set(OBJ N) findIndex(OBJ) push(BYTE) pop base
// OIntArrayIter: 
// OLongArray: resize ref(N) get(N) set(OBJ N) findIndex(OBJ) push(BYTE) pop base
// OLongArrayIter: 

// oInt: get set(N) show compare(N)
// OLong: get set(N) show compare(N)
// OFloat: get set(N) show compare(N)
// ODouble: get set(N) show compare(N)

// OThread: init(PSTACK_SIZE RSTACK_SIZE OP) start push(N) pop rpush(N) rpop getState step reset


int nextObjId

class: tobj    extends Object
  int objId

  method: setObjId
    -> objId
  ;method
    
  new:
    _allocObject
    2dup nextObjId -rot -> <tobj>.objId
    "|+" %s nextObjId %d
    1 ->+ nextObjId
  ;

  // method: show    objId %d %bl  ;method
  
  method: delete
    "|-" %s objId %d
    super.delete
  ;method
  
;class


mko tobj valA
mko tobj valB
mko tobj valC
mko tobj valD
mko tobj valE

// OArray:   clear   resize(N)   count   get(I)   set(O I)   findIndex(O)   push(O)   pop   headIter   tailIter   clone
// OList:   head   tail   addHead(O)   addTail(O)   removeHead   removeTail   headIter   tailIter   count   find(O)   clone
// OIntMap:   clear   count   get(KEY)   set(O KEY)   findIndex(O)   remove(KEY)   headIter   tailIter   

//"(vb=" %s tb <tobj>.refCount %d " before adding to map)" %s
mko OIntMap imapA
imapA.set( valA 'a' )  imapA.set( valB 'b' )  imapA.set( valC 'c' )  imapA.set( valD 'd' )  imapA.set( valE 'e' )
%nl imapA.show %nl

mko OLongMap lmapA
lmapA.set( valA 1l )  lmapA.set( valB '22'l )  lmapA.set( valC 1000000000l )  lmapA.set( valD -15l )  lmapA.set( valE 66l )
%nl lmapA.show %nl

mko OFloatMap fmapA
fmapA.set( valA 1.7 )  fmapA.set( valB 2.3 )  fmapA.set( valC 33.0 )  fmapA.set( valD 1.234 )  fmapA.set( valE 5.789 )
%nl fmapA.show %nl

mko ODoubleMap dmapA
dmapA.set( valA 1.7d )  dmapA.set( valB 2.3d )  dmapA.set( valC 33.0d )  dmapA.set( valD 1.234d )  dmapA.set( valE 5.789d )
%nl dmapA.show %nl

mko OStringMap smapA
smapA.set( valA "aa" )  smapA.set( valB "bb" )  smapA.set( valC "cc" )  smapA.set( valD "dd" )  smapA.set( valE "ee" )
smapA.get("aa").show smapA.get("bb").show smapA.get("cc").show smapA.get("dd").show smapA.get("ee").show  smapA.get("foo") %2x %nl
%nl smapA.show %nl

mko OList listA
listA.addHead(imapA.get( 'b' ))  listA.addHead(imapA.get( 'c' ))  listA.addHead(imapA.get( 'd' ))
%nl listA.show %nl

mko OArray arrayA
arrayA.push(imapA.get( 'a' ))  arrayA.push(valB)  arrayA.push(imapA.get( 'c' ))
%nl arrayA.show %nl

: showArray
  -> OArray a
  a.headIter -> OArrayIter iter
  a.show %nl
  begin
  while( iter.next )
    <Object>.show
  repeat
  begin
  while( iter.prev )
    <Object>.show
  repeat
  oclear a
  oclear iter
  %nl
;
arrayA showArray

"toList\n" %s
arrayA.toList -> OList listFromArrayA
"toList 2\n" %s
listFromArrayA.show
"toList 3\n" %s
listFromArrayA.toArray -> OArray arrayFromListA
arrayFromListA.show

oclear listFromArrayA  oclear arrayFromListA

//"{clearing map}" %s
oclear imapA  oclear lmapA  oclear fmapA  oclear dmapA  oclear smapA

//"{clearing list}" %s
oclear listA

//"{clearing array}" %s
oclear arrayA

oclear valA  oclear valB  oclear valC  oclear valD  oclear valE

mko OList zz
mko OString za
mko OString zb
mko OString zc
mko OString zd
mko OString zr
za.set( "a" )
zb.set( "b" )
zc.set( "c" )
zd.set( "d" )
zr.set( "r" )
zz.addTail( za ) zz.addTail( zb ) zz.addTail( zr ) zz.addTail( za ) 
zz.addTail( zc ) zz.addTail( za ) zz.addTail( zd ) 
zz.addTail( za ) zz.addTail( zb ) zz.addTail( zr ) zz.addTail( za ) 

zz.clone -> OList zz2

: so
  drop dup %x %bl @ %d %bl
;

// abra cad abra
: ff
  -> OIterable oi
  "list " %s oi so %nl
  oi.headIter -> OIter iter
  begin
  while( iter.next )
    -> OString ss
    ss.show
    oclear ss
  repeat
  %nl
  oclear oi
;

// OIterable: headIter tailIter find clone count clear
// OIter: seekNext seekPrev seekHead seekTail next prev current remove findNext(OBJ) clone

// OArray: resize(N) ref(N) get(N) set(OBJ N) findIndex(OBJ) push(OBJ) pop
// OArrayIter:

: testArray
  mko OArray aa
  r[ 1 17 42 53 89 ]r
  -> int nItems
  do( nItems 0 )
  loop
  oclear aa
;

: test
  mko OArray aa
  mko OList la
  do( 15 0 )
    mko OInt bob
    bob.set( i )
    aa.push( bob )
    la.addTail( bob )
    oclear bob
  loop
  oclear aa
  oclear la
;

test
"run cleanup to free objects" %s %nl

: cleanup
  oclear zz
  oclear zz2
  oclear za  oclear zb  oclear zc  oclear zd  oclear zr
;

loaddone

+	Object
-	Class
+	OArray
+	OArrayIter
+	OList
-	OListIter
-	OMap
-	OMapIter
-	OIntMap
-	OIntMapIter
-	OLongMap
-	OLongMapIter
-	OFloatMap
?	OFloatMapIter
-	ODoubleMap
?	ODoubleMapIter
-	OStringMap
-	OStringMapIter
+	OString
+	OPair
-	OPairIter
+	OTriple
-	OTripleIter
+	OByteArray
+	OByteArrayIter
+	OShortArray
+	OShortArrayIter
+	OIntArray
+	OIntArrayIter
+	OLongArray
+	OLongArrayIter
+	OFloatArray
?	OFloatArrayIter
+	ODoubleArray
?	ODoubleArrayIter
+	OInt
+	OLong
+	OFloat
+	ODouble
-	OThread
-	OInStream
-	OFileInStream
-	OConsoleInStream
-	OOutStream
-	OFileOutStream
-	OStringOutStream
-	OConsoleOutStream
-	OFunctionOutStream
