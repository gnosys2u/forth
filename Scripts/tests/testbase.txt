autoforget testbase
: testbase ;

false -> int testFailed
false -> int beNoisy

new OString -> OString testBuff
new OString -> OString testBuff2
new OStringOutStream -> OStringOutStream testOut

: cleanupTestBase  oclear testBuff  oclear testBuff2  oclear testOut  ;

: clearBuff testBuff.clear ;
: addBuff testBuff.append ;

: outToTestBuffer
  -> OString stringBuff
  stringBuff.clear
  testOut.setString( stringBuff )
  setConsoleOut( testOut )
  oclear stringBuff
;

: startTest outToTestBuffer( testBuff ) ;

: checkResult
  -> ptrTo byte expected
  outToScreen
  if( strcmp( testBuff.get expected ) )
    "Expected |" %s expected %s "| got |" %s testBuff.get %s "|" %s %nl
    false
    true -> testFailed
  else
    if( beNoisy )
      expected %s " passed\n" %s
	endif
    true
  endif
;

// test[ LINE_OF_STUFF ]
// LINE_OF_STUFF must evaluate to one or more true (-1) values
: test[
  sp -> int oldSP
  ']' $word -> string( 250 ) ops
  //ops %s %nl
  ops $evaluate
  sp oldSP swap - 4/ -> int numItems
  false -> int failed
  do( numItems 0 )
    if( not( pick( i ) ) )
      true -> failed
    endif
  loop
  if( failed )
    "FAILED: { " %s ops %s " } => " %s
    do( numItems 0 )
      i %d "=" %s pick( numItems 1- i - ) . %bl %nl
    loop
    true -> testFailed
  else
    if( beNoisy )
      ops %s " passed\n" %s
	endif
  endif
  
  do( numItems 0 )
    drop
  loop
;

loaddone
