autoforget forthtest

requires testbase

: forthtest ;

// empty stack markers - should still be here after all tests done
0xDEADBEEF 123456789

decimal

//: showsection " ================== " dup %s swap %s %s %nl ;

testBuff.set( "aba" )
//turbo 255 setTrace
//vd checkResult
test[ checkResult( "aba" ) ]
  

///////////////////////////////////////////////////////////

// test special characters in strings and characters

test[ '\0' 0= ] test[ '\a' 7 = ] test[ '\b' 8 = ] test[ '\t' 9 = ] test[ '\n' 0x0a = ] test[ '\v' 0x0b = ]
test[ '\f' 0x0c = ] test[ '\r' 0x0d = ] test[ '\"' 0x22 = ] test[ '\'' 0x27 = ] test[ '\\' 0x5c = ]

startTest
'\a' %c '\b' %c '\t' %c '\n' %c '\v' %c '\f' %c '\r' %c '\"' %c '\'' %c  '\\' %c outToScreen

test[ checkResult( "\a\b\t\n\v\f\r\"\'\\" ) ]

// verify that character constants work
: testCharacterConstants startTest 'a' %c ' ' %c 'b' %c '\t' %c 'c' %c '\n' %c 'z' %c %nl ;
outToTestBuffer( testBuff2 )
'a' %c ' ' %c 'b' %c '\t' %c 'c' %c '\n' %c 'z' %c %nl
test[ testCharacterConstants checkResult( testBuff2.get ) ]

///////////////////////////////////////////////////////////

// test control structures

: testIf if "t" addBuff endif ;
test[ startTest "A" addBuff 1 testIf "B" addBuff 0 testIf "C" addBuff checkResult( "AtBC" ) ]

: testIfElse if 't' else 'f' endif ;
test[ 1 testIfElse 't' = ]  test[ 0 testIfElse 'f' = ]

: testBeginUntil
  startTest
  5 begin dup . 1 - dup 0= until drop
;
test[ testBeginUntil checkResult( "5 4 3 2 1 " ) ]

: testBeginWhile
  startTest
  5 begin dup while dup . 1- repeat drop
;
test[ testBeginWhile checkResult( "5 4 3 2 1 " ) ]

: testDoLoop
  startTest
  5 0 do  i . loop
  -5 0 do  i . -1 +loop
  1000 0 do i . leave " burp " %s loop
  1000 0 do i . i 2 = if unloop exit endif loop
  " should never get here" %s
;
test[ testDoLoop checkResult( "0 1 2 3 4 0 -1 -2 -3 -4 -5 0 0 1 2 " ) ]

//testBuff.get %s '|' %c %nl

: casetest
  case
    0 of "zero" endof
    1 of "one" endof
    2 of "two" endof
    drop "whatever"
  endcase
  addBuff
;

test[ startTest 1 casetest   3 casetest   0 casetest   2 casetest   5 casetest  checkResult( "onewhateverzerotwowhatever" ) ]


///////////////////////////////////////////////////////////

int gaa
: testGlobalVars
  startTest
  0 -> gaa 7 0 do gaa %d %bl 5 ->+ gaa loop
;
test[ testGlobalVars checkResult( "0 5 10 15 20 25 30 " ) ]

: testLocalVars
  int aa
  startTest
  0 -> aa 7 0 do aa %d %bl 5 ->+ aa loop
;
test[ testLocalVars checkResult( "0 5 10 15 20 25 30 " ) ]

///////////////////////////////////////////////////////////

// Test fetch & store
: buffer builds 4* allot does ;
20 buffer tb

0xDEADBEEF tb !
test[ startTest tb c@ %x %bl tb w@ %x %bl tb sc@ %x checkResult( "ef beef ffffffef" ) ]
test[ startTest tb sw@ %x %bl tb c@ c2i %x %bl tb w@ w2i %x checkResult( "ffffbeef ffffffef ffffbeef" ) ]

///////////////////////////////////////////////////////////

// Test strings
20 string aaa 20 string bbb
"ajaja" -> aaa "bobobo" -> bbb
test[ strlen( aaa ) 5 = strlen( bbb ) 6 = ]

test[ strcpy( aaa bbb ) strcmp( aaa "bobobo" ) 0= ]
test[ "blahblah" -> aaa  strncpy( aaa bbb 2 ) strcmp( aaa "boahblah" ) 0= ]

test[ "head" -> aaa "tail" -> bbb strcat( aaa bbb ) strcmp( aaa "headtail" ) 0= ]
test[ "head" -> aaa "tail" -> bbb strncat( aaa bbb 3 ) strcmp( aaa "headtai" ) 0= ]

test[ "blahblah" -> aaa  strcmp( strchr( aaa 'l' ) "lahblah" ) 0= ]
test[ "blahblah" -> aaa  strcmp( strrchr( aaa 'l' ) "lah" ) 0= ]
test[ "blahblah" -> aaa  strchr( aaa 'q' ) 0= ]

test[ strcmp( aaa "blahblah" ) 0= ]
test[ strcmp( aaa "BlahblaH" ) 1 = ]
test[ stricmp( aaa "BlahblaH" ) 0= ]
test[ stricmp( aaa "Blahbla" ) 1 = ]

test[ strcmp( strstr( aaa "ahbl" ) "ahblah" ) 0= ]
test[ strstr( aaa "ahab" ) 0= ]
// strcpy strncpy strlen strcat strncat strchr strrchr strcmp stricmp strstr strtok

///////////////////////////////////////////////////////////

// Test inline comments
: _fail_ " FAILED! " %s ;
: _ok_ %d /* _fail_ */ ;
// "The following line should have \"123456\" on it\n" %s
startTest
_ok_( 1 ) true -> ansiMode ( _fail_ ) 2 _ok_ ( _fail_
) 3 _ok_ false -> ansiMode _ok_( 4 ) /* _fail_
*/ 5 _ok_ /* _fail_ */ 6 _ok_ %nl
test[ checkResult( "123456\n" ) ]

///////////////////////////////////////////////////////////

// Test basic ops - only errors are displayed
decimal

//loaddone

// < <= = <> > >= u< u> 0< 0<= 0= 0<> 0> 0>=
test[ 1 5 < -1 -5 < not 7 7 < not ] test[ 22 11 <= not -134 77 <= 99 99 <= ] test[ 11 18 = not -11214 -11214 = ]
test[ 14 24 <> 83 83 <> not ] test[ 1243 987 > 3775 783475 > not 88 88 > not ] test[ 7837 11 >= 27384 273855 >= not 71 71 >= ]
test[ 11 22 u< 241 11 u< not -22 89743 u< not ] test[ -1 -2 u> -43 5009 u> -54345 -54345 u> not ]
test[ -20 0< 0 0< not 20 0< not ] test[ -97 0<= 0 0<= 834 0<= not ] test[ -12 0= not 0 0= 43 0= not ]
test[ -6324127 0<> 0 0<> not 5748 0<> ] test[ -500 0> not 0 0> not 345879 0> ] test[ -23580 0>= not 0 0>= 1235 0>= ]

// + - * / or and xor not 
test[ 1 5 + 6 = ] test[ 1 -4 + -3 = ] test[ 0x80000000 -1 + 0x7fffffff = ] test[ 1 5 - -4 = ]
test[ 1 -4 - 5 = ] test[ 0x80000000 -1 - 0x80000001 = ] test[ 3 7 * 21 = ] test[ 0x101 0x11 * 0x1111 = ]
test[ -5 -7 * 35 = ] test[ 22 7 / 3 = ] test[ 99 11 / 9 = ] test[ -100 7 / -14 = ] test[ -65535 256 / -255 = ]
test[ true false or ] test[ 33 7 or 39 = ] test[ 0xf0f 0x0f0 or 0xfff = ] test[ 0x1234 0x350461 or 0x351675 = ]
test[ true false and not ] test[ 33 7 and 1 = ] test[ 0xf0f 0x0f0 and 0= ] test[ true false xor   33 7 xor 38 = ]
test[ 0xf0f 0x0f0 xor 0xfff = ] test[ 0x505 0x141 xor 0x444 = ]

// 2* 4* 8* 2/ 4/ 8/ /mod mod negate
//test[ -5 -7 u* -12 35 l= ]
test[ 243 2* 486 = ] test[ 243 4* 972 = ] test[ 243 8* 1944 = ] test[ 744 2/ 372 = ]
test[ 744 4/ 186 = ] test[ 744 8/ 93 = ] test[ 4183 23 /mod 20 181 l= ] test[ 193747 39 mod 34 = ] test[ -34 negate 34 = ]

// f+ f- f* f/ f= f<> f> f>= f< f<= 
test[ 3.5 4.25 f+ 7.75 f= ] test[ 8.5 3.25 f- 5.25 f= ] test[ 3.5 4.5 f* 63.0 4.0 f/ f= ] test[ 5.0 4.0 f<> ]
test[ 27.3 22.2 f> ] test[ 27.3 27.3 f> not ] test[ 27.3 27.3 f>= ] test[ 7.2 121.9 f< ] test[ 676.0 676.0 f< not ]
test[ 676.0 676.0 f<= ]

// f0= f0<> f0> f0>= f0< f0<= fwithin fmin fmax
test[ 0.0 f0= ] test[ 0.7 f0= not ] test[ 0.0 f0> not ] test[ 1.2 f0> ] test[  0.0 f0>= ] test[ -3.3 f0>= not ]
test[ 5.1 f0>= ] test[ 9.4 f0< not ] test[ 0.0 f0<= ] test[  -2.3 f0<= ] test[ -5.0 -1.0 1.0 fwithin not ]
test[ 0.5 -1.0 1.0 fwithin ] test[ 7.0 -1.0 1.0 fwithin not ] test[ 5.0 2.3 fmin 2.3 f= ] test[ -10.0 4.3 fmax 4.3 f= ]
   
// d+ d- d* d/ d= d<> d> d>= d< d<= 
test[ 3.5d 4.25d d+ 7.75d d= ] test[ 8.5d 3.25d d- 5.25d d= ] test[ 3.5d 4.5d d* 63.0d 4.0d d/ d= ] test[ 5.0d 4.0d d<> ]
test[ 27.3d 22.2d d> ] test[ 27.3d 27.3d d> not ] test[ 27.3d 27.3d d>= ] test[ 7.2d 121.9d d< ] test[ 676.0d 676.0d d< not ]
test[ 676.0d 676.0d d<= ]

// d0= d0<> d0> d0>= d0< d0<= dwithin dmin dmax
test[ 0.0d d0= ] test[ 0.7d d0= not ] test[ 0.0d d0> not ] test[ 1.2d d0> ] test[ 0.0d d0>= ] test[ -3.3d d0>= not ]
test[ 5.1d d0>= ] test[ 9.4d d0< not ] test[ 0.0d d0<= ] test[  -2.3d d0<= ] test[ -5.0d -1.0d 1.0d dwithin not ]
test[ 0.5d -1.0d 1.0d dwithin ] test[ 7.0d -1.0d 1.0d dwithin not ] test[ 5.0d 2.3d dmin 2.3d d= ]
test[ -10.0d 4.3d dmax 4.3d d= ]
   
// lshift arshift rshift
test[ 1 8 lshift 256 = ] test[ 17 2 lshift 68 = ] test[ -80 3 arshift -10 = ] test[ 19 2 arshift 4 = ]
test[ 0xF1234567 4 arshift 0xFF123456 = ] test[ 0xF1234567 4 rshift 0xF123456 = ]

// dup ?dup swap over rot pick
test[ 17 5 dup 2 pick tuck 17 = swap 5 = and rot 5 = rot 17 = 0 drop and rot 17 = ]
test[ 87 5 ?dup 0 ?dup 0= rot 5 = rot 5 = and and over 87 = rot 87 = ]

// -rot nip tuck roll
// 2dup 2swap 2drop 2over 2rot r[ ]r
// c! c@ sc@ w! w@ sw@ ! @ 2! 2@ 
// memcpy memset varAction! varAction@
// l+ l- l* l/ lmod l/mod lnegate i2l i2f i2d f2l f2i f2d d2l d2i d2f l2f l2d
// l= l<> l> l>= l< l<= l0= l0> l0>= l0< l0<= lwithin lmin lmax
// . %d %x %2d %2x %s %c type %bl %nl %f %2f format 2format
// printDecimalSigned printAllSigned printAllUnsigned octal decimal hex


//0123456789abcdef012345 
testBuff2.set( "This is a test string" )
testBuff2.get -> int pSrc
ref pSrc -> int src
testBuff.get -> int pDst
ref pDst -> int dst
src 2@@++ dst 2@!++ 
src c@@++ dst c@!++ 
src c@@++ dst c@!++ 
src w@@++ dst w@!++ 
src @@++ dst @!++ 
src w@@++ dst w@!++ 
src c@@++ dst c@!++ 
src c@@++ dst c@!++ 
src w@@++ dst w@!++ 
test[ checkResult( testBuff2.get ) ]

test[ 0xDEADBEEF 123456789 l= ]	// check for stack underflow or extra items

///////////////////////////////////////////////////////////
// test $evaluate

: ee $evaluate( "'e' %c 'y' %c" );
: cc $evaluate( "'c' %c" );
: bb $evaluate( "'b' %c" ) cc $evaluate( "'d' %c" ) ;
: aa $evaluate( "'a' %c" ) bb ee $evaluate( "'z' %c" ) ;

//test[ strcmp( aa "abcdeyz" ) 0= ]

///////////////////////////////////////////////////////////

//%nl %nl "Hit ENTER to exit" %s
//stdin fgetc
: finalCheck
  if( testFailed not )
    "All tests succeeded\n" %s
  endif
;
finalCheck

cleanupTestBase

loaddone

