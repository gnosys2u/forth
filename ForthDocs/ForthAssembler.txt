         1         2         3         4         5         6         7
1234567890123456789012345678901234567890123456789012345678901234567890123456789
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

-|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|-
TBDs:
- add a "call" op to allow high-level words to call subroutines
- add a way to connect a c-style callback to forth ops
- add a struct definition for ForthCoreState

-|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|-

Defining user ops with assembler
--------------
o start definition with "code"
o end definition with "next,"
o assembler vocab is added to search order by "code", removed by "next,"
o inside assembler op:
  o eax, ebx, esi are free for modification
  o ecx is IP
  o edx is SP
  o ebp is core state ptr
  o edi holds address to jump to reenter inner interpreter

UserCodeAction is an assembly routine in InnerInterp.asm that is called from
the C++ inner interpreter to execute user code ops.

userCodeType is an assembly routine in InnerInterp.asm that is called from the
native code inner interpreter to execute user code ops.

Subroutines
-----------
o start definition with "subroutine"
o end definition with ";code"
o definition should have a "ret," before ";code"

-|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|-
When calling external subroutines:

o push arguments in right-to-left order (push first argument last)
o return value is in eax
o you are responsible for cleaning up stack after call returns

-|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|-
Allowing C callbacks to invoke forth ops

o this would need its own ForthThread
o 

-|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|-
Stuff from the top of InnerInterp.asm

; register usage in a forthOp:
;
;	EAX		free
;	EBX		free
;	ECX		IP
;	EDX		SP
;	ESI		free
;	EDI		inner interp PC (constant)
;	EBP		core ptr (constant)

; when in a opType routine:
;	AL		8-bit opType
;	EBX		full 32-bit opcode (need to mask off top 8 bits)

; remember when calling extern cdecl functions:
; 1) they are free to stomp EAX, EBX, ECX and EDX
; 2) they are free to modify their input params on stack

; if you need more than EAX and EBX in a routine, save ECX/IP & EDX/SP in FCore at start with these instructions:
;	mov	[ebp].FCore.IPtr, ecx
;	mov	[ebp].FCore.SPtr, edx
; jump to interpFunc at end - interpFunc will restore ECX, EDX, and EDI and go back to inner loop

-|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|-
Pentium instruction layout (from http://www.laynetworks.com/Pentium_Instruction%20formats.htm)

prefixes | opcode | ModR/M | SIB | displacement | immediate

prefixes
	up to four 1-byte prefixes
opcode
	1 or 2 byte opcode
ModR/M	(if required by opcode)
	7:6 mod - 
	5:3 reg/opcode - 
	2:0 R/M
SIB
	7:6 scale - 
	5:3 index - 
	2:0 base -
displacement (1, 2, 4)
immediate (1, 2, 4)

OPCODE

The primary OPCODE is either 1 or 2 bytes. An additional 3-bit OPCODE field
is sometimes encoded in the ModR/M byte. Smaller encoding fields can be
defined within the primary OPCODE. These fields define the direction of the
operation, the size of displacements, the register encoding, condition codes,
or sign extension. The encoding of fields in the OPCODE varies, depending on
the class of operation.

MODR/M AND SIB BYTES

Most instructions that refer to an operand in memory have an addressing-form
specifier byte (called the ModR/M byte) following the primary OPCODE.
The ModR/M byte contains three fields of information:

o The mod field combines with the r/m field to form 32 possible values:
  eight registers and 24 addressing modes.

o The reg/opcode field specifies either a register number or three more bits
  of opcode information. The purpose of the reg/opcode field is specified in
  the primary opcode.

o The r/m field can specify a register as an operand or can be combined with
  the mod field to encode an addressing mode.

Certain encoding of the ModR/M byte require a second addressing byte, the
SIB byte, to fully specify the addressing form. The base-plus-index and
scale-plus-index forms of 32-bit addressing require the SIB byte. The SIB
byte includes the following fields:
o The scale field specifies the scale factor.
o The index field specifies the register number of the index register.
o The base field specifies the register number of the base register.

DISPLACEMENT AND IMMEDIATE BYTES

Some addressing forms include a displacement immediately following either
the ModR/M or SIB byte. If a displacement is required, it can be 1, 2, or
4 bytes. If the instruction specifies an immediate operand, the operand
always follows any displacement bytes. An immediate operand can be 1, 2,
or 4 bytes.

-|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|-
gforth assembler docs:

5.26.4 386 Assembler
--------------------

The 386 assembler included in Gforth was written by Bernd Paysan, it's
available under GPL, and originally part of bigFORTH.

   The 386 disassembler included in Gforth was written by Andrew McKewan
and is in the public domain.

   The disassembler displays code in an Intel-like prefix syntax.

   The assembler uses a postfix syntax with reversed parameters.

   The assembler includes all instruction of the Athlon, i.e. 486 core
instructions, Pentium and PPro extensions, floating point, MMX, 3Dnow!,
but not ISSE. It's an integrated 16- and 32-bit assembler. Default is 32
bit, you can switch to 16 bit with .86 and back to 32 bit with .386.

   There are several prefixes to switch between different operation
sizes, `.b' for byte accesses, `.w' for word accesses, `.d' for
double-word accesses. Addressing modes can be switched with `.wa' for
16 bit addresses, and `.da' for 32 bit addresses. You don't need a
prefix for byte register names (`AL' et al).

   For floating point operations, the prefixes are `.fs' (IEEE single),
`.fl' (IEEE double), `.fx' (extended), `.fw' (word), `.fd'
(double-word), and `.fq' (quad-word).

   The MMX opcodes don't have size prefixes, they are spelled out like
in the Intel assembler. Instead of move from and to memory, there are
PLDQ/PLDD and PSTQ/PSTD.

   The registers lack the 'e' prefix; even in 32 bit mode, eax is called
ax.  Immediate values are indicated by postfixing them with `#', e.g.,
`3 #'.  Here are some examples of addressing modes in various syntaxes:

     Gforth          Intel (NASM)   AT&T (gas)      Name
     .w ax           ax             %ax             register (16 bit)
     ax              eax            %eax            register (32 bit)
     3 #             offset 3       $3              immediate
     1000 #)         byte ptr 1000  1000            displacement
     bx )            [ebx]          (%ebx)          base
     100 di d)       100[edi]       100(%edi)       base+displacement
     20 ax *4 i#)    20[eax*4]      20(,%eax,4)     (index*scale)+displacement
     di ax *4 i)     [edi][eax*4]   (%edi,%eax,4)   base+(index*scale)
     4 bx cx di)     4[ebx][ecx]    4(%ebx,%ecx)    base+index+displacement
     12 sp ax *2 di) 12[esp][eax*2] 12(%esp,%eax,2) base+(index*scale)+displacement

   You can use `L)' and `LI)' instead of `D)' and `DI)' to enforce
32-bit displacement fields (useful for later patching).

   Some example of instructions are:

     ax bx mov             \ move ebx,eax
     3 # ax mov            \ mov eax,3
     100 di d) ax mov      \ mov eax,100[edi]
     4 bx cx di) ax mov    \ mov eax,4[ebx][ecx]
     .w ax bx mov          \ mov bx,ax

   The following forms are supported for binary instructions:

     <reg> <reg> <inst>
     <n> # <reg> <inst>
     <mem> <reg> <inst>
     <reg> <mem> <inst>
     <n> # <mem> <inst>

   The shift/rotate syntax is:

     <reg/mem> 1 # shl \ shortens to shift without immediate
     <reg/mem> 4 # shl
     <reg/mem> cl shl

   Precede string instructions (`movs' etc.) with `.b' to get the byte
version.

   The control structure words `IF' `UNTIL' etc. must be preceded by
one of these conditions: `vs vc u< u>= 0= 0<> u<= u> 0< 0>= ps pc < >=
<= >'. (Note that most of these words shadow some Forth words when
`assembler' is in front of `forth' in the search path, e.g., in `code'
words).  Currently the control structure words use one stack item, so
you have to use `roll' instead of `cs-roll' to shuffle them (you can
also use `swap' etc.).

   Here is an example of a `code' word (assumes that the stack pointer
is in esi and the TOS is in ebx):

     code my+ ( n1 n2 -- n )
         4 si D) bx add
         4 # si add
         Next
     end-code
     
-|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|-
-> look at "bytes,"
  -> this was leaving an extra 0 on the stack because of a porting bug

: jmp,   		// reg / disp --
  rel? if
    drop disp @ here 2 + - dup
    -0x80 0x80 within
    if
      disp ! 1 disp# !  0xEB
    else
      3 - disp ! 0xE9
    endif
    finish
    exit
  endif
  44 0xFF
  modf
;

: rel? ( reg -- reg flag ) dup -2 == ;
variable disp                 variable disp#

: modf  ( r/m reg opcode -- )  -rot >mod finish   ;

: jmp,   		// reg / disp --
  dup -2 == if
  endif
  44 0xFF
  -rot
  >mod
  finish
;

: >>mod ( reg1 reg2 -- mod )  70 and swap 307 and or ;
: >mod ( reg1 reg2 -- )  >>mod ModR/M !  1 ModR/M# ! ;

: jmp,   		// reg / disp --
  44 0xFF
  rot rot
  70 and swap 307 and or
  ModR/M !
  1 ModR/M# !
  finish
;

: finish // opcode --
  opcode,
  ModR/M# @ if  ModR/M @ c,  endif
  SIB#    @ if  SIB    @ c,  endif
  Adisp?  @ disp @ disp# @ bytes,
  Aimm?   @ imm  @ imm#  @ bytes,
  sclear
;




*** InterpretLine "jmp,"
Interpret [jmp,] flags[0]	Forth op [jmp,] in vocabulary assembler
# 0x0012f840 02:000110    jmp,
# 0x00d4217c   02:000091    rel?
# 0x00d41708     00:000091    dup
# 0x00d4170c     14:fffffe    Constant    -2
# 0x00d41710     00:00007e    ==
# 0x00d41714     00:000017    _exit
# 0x00d42180   0c:00001a    BranchFalse    0x00d421ec
# 0x00d421ec   14:000024    Constant    36
# 0x00d421f0   14:0000ff    Constant    255
# 0x00d421f4   02:0000c2    modf
# 0x00d41b90     02:00001b    -rot
# 0x00d40d4c       00:000094    rot
# 0x00d40d50       00:000094    rot
# 0x00d40d54       00:000017    _exit
# 0x00d41b94     02:00007c    >mod
# 0x00d414f4       02:00007b    >>mod
# 0x00d414d8         14:000038    Constant    56
# 0x00d414dc         00:000074    and
# 0x00d414e0         00:000092    swap
# 0x00d414e4         14:0000c7    Constant    199
# 0x00d414e8         00:000074    and
# 0x00d414ec         00:000073    or
# 0x00d414f0         00:000017    _exit
# 0x00d414f8       02:00001d    ModR/M
# 0x00d40d78         00:000006    _doVariable
# 0x00d414fc       00:0000a8    !
# 0x00d41500       14:000001    Constant    1
# 0x00d41504       02:00001e    ModR/M#
# 0x00d40d80         00:000006    _doVariable
# 0x00d41508       00:0000a8    !
# 0x00d4150c       00:000017    _exit
# 0x00d41b98     02:000039    finish
# 0x00d40fa0       02:000038    opcode,
# 0x00d40f3c         02:000029    .asize
# 0x00d40dd8           00:000006    _doVariable
# 0x00d40f40         00:000027    @
# 0x00d40f44         02:00002a    .anow
# 0x00d40de0           00:000006    _doVariable
# 0x00d40f48         00:000027    @
# 0x00d40f4c         00:00007f    !=
# 0x00d40f50         0c:000002    BranchFalse    0x00d40f5c
# 0x00d40f5c         02:00002b    .osize
# 0x00d40de8           00:000006    _doVariable
# 0x00d40f60         00:000027    @
# 0x00d40f64         02:00002c    .onow
# 0x00d40df0           00:000006    _doVariable
# 0x00d40f68         00:000027    @
# 0x00d40f6c         00:00007f    !=
# 0x00d40f70         0c:000002    BranchFalse    0x00d40f7c
# 0x00d40f7c         02:000028    seg
# 0x00d40dd0           00:000006    _doVariable
# 0x00d40f80         00:000027    @
# 0x00d40f84         0c:000003    BranchFalse    0x00d40f94
# 0x00d40f94         00:0000a4    c,
# 0x00d40f98         02:000030    pre-
# 0x00d40e30           02:000028    seg
# 0x00d40dd0             00:000006    _doVariable
# 0x00d40e34           02:00002d    off
# 0x00d40df8             14:000000    Constant    0
# 0x00d40dfc             00:000092    swap
# 0x00d40e00             00:0000a8    !
# 0x00d40e04             00:000017    _exit
# 0x00d40e38           02:000029    .asize
# 0x00d40dd8             00:000006    _doVariable
# 0x00d40e3c           00:000027    @
# 0x00d40e40           02:00002a    .anow
# 0x00d40de0             00:000006    _doVariable
# 0x00d40e44           00:0000a8    !
# 0x00d40e48           02:00002b    .osize
# 0x00d40de8             00:000006    _doVariable
# 0x00d40e4c           00:000027    @
# 0x00d40e50           02:00002c    .onow
# 0x00d40df0             00:000006    _doVariable
# 0x00d40e54           00:0000a8    !
# 0x00d40e58           00:000017    _exit
# 0x00d40f9c         00:000017    _exit
# 0x00d40fa4       02:00001e    ModR/M#
# 0x00d40d80         00:000006    _doVariable
# 0x00d40fa8       00:000027    @
# 0x00d40fac       0c:000003    BranchFalse    0x00d40fbc
# 0x00d40fb0       02:00001d    ModR/M
# 0x00d40d78         00:000006    _doVariable
# 0x00d40fb4       00:000027    @
# 0x00d40fb8       00:0000a4    c,
# 0x00d40fbc       02:000020    SIB#
# 0x00d40d90         00:000006    _doVariable
# 0x00d40fc0       00:000027    @
# 0x00d40fc4       0c:000003    BranchFalse    0x00d40fd4
# 0x00d40fd4       02:000026    Adisp?
# 0x00d40dc0         00:000006    _doVariable
# 0x00d40fd8       00:000027    @
# 0x00d40fdc       02:000021    disp
# 0x00d40d98         00:000006    _doVariable
# 0x00d40fe0       00:000027    @
# 0x00d40fe4       02:000022    disp#
# 0x00d40da0         00:000006    _doVariable
# 0x00d40fe8       00:000027    @
# 0x00d40fec       02:000037    bytes,
# 0x00d40ef4         00:000091    dup
# 0x00d40ef8         0c:00000e    BranchFalse    0x00d40f34
# 0x00d40f34         00:00009d    ddrop
# 0x00d40f38         00:000017    _exit
# 0x00d40ff0       02:000025    Aimm?
# 0x00d40db8         00:000006    _doVariable
# 0x00d40ff4       00:000027    @
# 0x00d40ff8       02:000023    imm
# 0x00d40da8         00:000006    _doVariable
# 0x00d40ffc       00:000027    @
# 0x00d41000       02:000024    imm#
# 0x00d40db0         00:000006    _doVariable
# 0x00d41004       00:000027    @
# 0x00d41008       02:000037    bytes,
# 0x00d40ef4         00:000091    dup
# 0x00d40ef8         0c:00000e    BranchFalse    0x00d40f34
# 0x00d40f34         00:00009d    ddrop
# 0x00d40f38         00:000017    _exit
# 0x00d4100c       02:000031    sclear
# 0x00d40e5c         02:000030    pre-
# 0x00d40e30           02:000028    seg
# 0x00d40dd0             00:000006    _doVariable
# 0x00d40e34           02:00002d    off
# 0x00d40df8             14:000000    Constant    0
# 0x00d40dfc             00:000092    swap
# 0x00d40e00             00:0000a8    !
# 0x00d40e04             00:000017    _exit
# 0x00d40e38           02:000029    .asize
# 0x00d40dd8             00:000006    _doVariable
# 0x00d40e3c           00:000027    @
# 0x00d40e40           02:00002a    .anow
# 0x00d40de0             00:000006    _doVariable
# 0x00d40e44           00:0000a8    !
# 0x00d40e48           02:00002b    .osize
# 0x00d40de8             00:000006    _doVariable
# 0x00d40e4c           00:000027    @
# 0x00d40e50           02:00002c    .onow
# 0x00d40df0             00:000006    _doVariable
# 0x00d40e54           00:0000a8    !
# 0x00d40e58           00:000017    _exit
# 0x00d40e60         02:000025    Aimm?
# 0x00d40db8           00:000006    _doVariable
# 0x00d40e64         02:00002d    off
# 0x00d40df8           14:000000    Constant    0
# 0x00d40dfc           00:000092    swap
# 0x00d40e00           00:0000a8    !
# 0x00d40e04           00:000017    _exit
# 0x00d40e68         02:000026    Adisp?
# 0x00d40dc0           00:000006    _doVariable
# 0x00d40e6c         02:00002d    off
# 0x00d40df8           14:000000    Constant    0
# 0x00d40dfc           00:000092    swap
# 0x00d40e00           00:0000a8    !
# 0x00d40e04           00:000017    _exit
# 0x00d40e70         02:00001e    ModR/M#
# 0x00d40d80           00:000006    _doVariable
# 0x00d40e74         02:00002d    off
# 0x00d40df8           14:000000    Constant    0
# 0x00d40dfc           00:000092    swap
# 0x00d40e00           00:0000a8    !
# 0x00d40e04           00:000017    _exit
# 0x00d40e78         02:000020    SIB#
# 0x00d40d90           00:000006    _doVariable
# 0x00d40e7c         02:00002d    off
# 0x00d40df8           14:000000    Constant    0
# 0x00d40dfc           00:000092    swap
# 0x00d40e00           00:0000a8    !
# 0x00d40e04           00:000017    _exit
# 0x00d40e80         02:000022    disp#
# 0x00d40da0           00:000006    _doVariable
# 0x00d40e84         02:00002d    off
# 0x00d40df8           14:000000    Constant    0
# 0x00d40dfc           00:000092    swap
# 0x00d40e00           00:0000a8    !
# 0x00d40e04           00:000017    _exit
# 0x00d40e88         02:000024    imm#
# 0x00d40db0           00:000006    _doVariable
# 0x00d40e8c         02:00002d    off
# 0x00d40df8           14:000000    Constant    0
# 0x00d40dfc           00:000092    swap
# 0x00d40e00           00:0000a8    !
# 0x00d40e04           00:000017    _exit
# 0x00d40e90         02:000027    byte?
# 0x00d40dc8           00:000006    _doVariable
# 0x00d40e94         02:00002d    off
# 0x00d40df8           14:000000    Constant    0
# 0x00d40dfc           00:000092    swap
# 0x00d40e00           00:0000a8    !
# 0x00d40e04           00:000017    _exit
# 0x00d40e98         00:000017    _exit
# 0x00d41010       00:000017    _exit
# 0x00d41b9c     00:000017    _exit
# 0x00d421f8   00:000017    _exit
-|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|-
March 18 2009

I decided to try out the assembler again, I found that it works, there is a
problem where some ops leave crap on stack when they are done - in particular,
the "next," op leaves 2 zeroes.

code noop	next,	// 2 zeroes on stack after executing "next,"

code andy dx ] ax mov,  4 # dx add, ax dx ] and, next,

Pentium machine code:

o instruction prefixes
	up to four prefixes of 1-byte each (optional)
o opcode
	1 or 2 bytes
o ModR/M
	1 byte if required
	0..2	R/M
	3..5	reg/opcode
	6..7	Mod
o SIB - scale/index/base
	1 byte if required
	0..2	base
	3..5	index
	6..7	scale
o address displacement
	none, 1, 2 or 4 bytes
o immediate data
	none, 1, 2 or 4 bytes

-|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|-

... years pass ...

-|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|-
May 5 2007

Added fprintf/sprintf/fscanf/sscanf - they work except that fprintf/sprintf
can't print floating point numbers - there may be some expectation that
fp numbers will be passed in fp registers, but that would seem to be a
pain for variable numbers of arguments.
One hokey thing is that you have to pass the number of variables to be
printed as the last argument.
Example: stdout "%d,%d" 5 7 2 fprintf

Eliminated precedence vocabulary - it didn't work well with the vocabulary
stack.

Starting debug of pentium assembler.

source:
	code andy dx ) ax mov,  4 # dx add, ax dx ) and, next,
generated:
	011842F8  mov         eax,edx 
	011842FA  add         edx,4 
	011842FD  and         edx,eax 
	011842FF  jmp         edi  
should have generated:
	mov	eax, [edx]
	add	edx, 4
	and	[edx], eax
	jmp	edi

-> The ")" op is never being executed - it may be getting eaten by the shell
-> changed all uses of ")" to "]"
	code andy dx ] ax mov,  4 # dx add, ax dx ] and, next,

Assembler is now generating the correct code for "andy", and the op performs
correctly with both fast & slow interpreters.

-|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|-
May 3 2007

The GForth assembler is ported, it loads but it is untested.
The GForth package doesn't seem to have any examples of its usage in actual
code, but the assembler is almost identical to the assembler in BigForth,
maybe it has some examples.  The file gforth.050/doc/gforth.i9 has a
"386 Assembler" section which spells out the syntax.

One problem area was that GForth is not case sensitive.

Another was that there was a partially implemented relocation scheme which
remapped forth builtin ops which compile stuff or manipulate the DP to a set of
proxy ops which mostly did exactly the same thing - presumably this was
preparation for swapping out the proxy ops for another set which did something
like assembling to an address offset from the intended run address.

One odd thing was that "," was remapped to "c,", and it looked like "," was
being used to compile byte data, not longs.  Perhaps the intent was that in
the source for the assembler, "," was used to compile stuff that needed to
be relocated and "c," was used to compile stuff that didn't.

The next step would be to create a way to make a user-defined op in
assembler.  This could be tricky, especially if we want the fast inner
interpreter to be able to execute these ops without passing them off to
the slow inner assembler.
-> The user defined code ops would be setup to work with the fast interpreter,
   and create a piece of glue code which the slow interpreter uses to execute
   user defined code ops
   -> We could also use this for builtinOps which have no C++ version (with a small mod)
User defined code ops should live in userOps dispatch table, and therefore
share the opValue space of other user defined ops, which will make "forget"
easy to implement for them.

-|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|-
April 30 2007

Working on adapting the GForth assembler

