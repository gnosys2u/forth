
  Forth for the Nintendo DS
=============================

The overall idea is to create a version of Forth where:
- the outer interpreter runs on a Windows PC
- the inner interpreter runs on the Nintendo DS
- PC and DS communicate via wifi

The minimal set of messages from PC to DS would be:
o	write DS memory
o	define opcode
o	execute opcode
o	read DS memory

Uh duh, what about builds/does words?  It seems like they might require a complicated communication protocol...
Builds/does was really just a convenience


OR


The entire development environment runs on the DS side, with just console/file IO happening on the PC
-> there would need to be some way of creating standalone executables...
  -> this is easy if the dictionary always starts at the same address, which should be a cinch on the DS

Is there a way to break this up so that the PC just handles vocabularies?

==============================================
Protocol messages needed:

source:
PC->DS		interpret( string )
DS->PC		display( string )
DS->PC		load( filenameString )

The interpret and display messages might be generalized to data movement operations.


==============================================
client/server messages:

#bytes
4		message type
4		number of data bytes following (N)
N		message data

Messages are a predefined sequence of message elements.

A message element can be either of fixed or variable size.

A fixed size message element of N bytes is sent in N bytes.

A variable size message element is sent as a 4-byte element size (N),
followed by N bytes of message data.

When strings are sent as part of messages, the message includes the terminating
null byte.

==============================================

start devkitPro\msys
cd /e/pat/prj/Forth
make


-|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|-

Keys to success for DS Forth:

The speed you can acheive in rapid prototyping has to massively outweigh the
unfamiliarity of the language and any build cycle issues.

o if possible, allow most of development to be done on PC, then make it easy
  to port over to the DS
  o support same file formats on PC & DS
  o have library wrapper calls that are the same
  * in a sense, the PC side of this would be a specialized DS emulator
  This might be very difficult for the 3d stuff
  
o minimize the amount of wireless data bandwidth used

o allow data to come from multiple places automatically:
  o RAM
  o ROM
  o DSi flash
  o SD card flash
  o wireless transmission from host
  
o provide a queue of wireless data requests

o provide good crash handlers
  ? what crash handling is builtin

o if possible, provide a way to salvage any files in RAM after a crash
  o RAM based files need to include integrity check info
  
o make the windows client be more than just a console, tailor it to make
  the development cycle as simple as possible
  
o if possible, provide a "safe" mode which tries to trap bad array accesses
  and things like that
  
