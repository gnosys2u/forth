         1         2         3         4         5         6         7
1234567890123456789012345678901234567890123456789012345678901234567890123456789
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

- add robject - reference counted object - derive majority of classes from it,
  pattern it after the NextStep container classes
  
- add classes for literal native constant values (byte/short/int/float) where the
  data part is the literal data (can't do this for doubles on longs though)

- add container types
  - heterogenous containers - every element is a 64-bit object reference
  - specialized containers - elements are the actual storage, the container
    knows the element class, can access as either objects or raw data
    
- add iterator types

- improve classtest.txt

- report an error if "implements:" is done on a non-abstract class - this will
  divide classes into abstract interfaces with no data members and non-abstract
  with accessible data members - this will avoid the problem where you do a
  queryInterface on an object, get a secondary interface with defined data
  members, then get bogus results when you try to access data members of the
  secondary interface

- add a syntax for invoking a method on the object on TOS - the underlying
  action code is already there (MethodWithTOS opType), I just need to define
  the syntax needed to invoke it, and implement that in the outer interpreter
  
? should this be a "single rooted hierarchy" where everything is derived from
  another class, with the exception of the ultimate root class, "object"?
  ? what methods should "object" define
    ? new
      - no, this should be a class
    o delete
    o size
    o getclass
      o superclass
    ? data
    ? methods
    o compare
    o set
    o clone
    o process message
    o serialize in & out
  ? should the name be "object"?

? what classes should be defined in the kernel
  + gui objects - windows, dialogs, controls
  ? strings
  ? vocabularies
    ? struct vocabularies
    ? class vocabularies
  ? files
  ? directory iterators
  ? dynamic containers
    ? maps
    ? arrays
    ? sets
    ? lists

-|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|-
class
+	delete
+	new
+	getParent
+	getName
+	getVocabulary
+	getinterface
	
object
+	delete
+	show
+	compare
+	getClass
	
container
	count
	getiterator

-|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|-
ForthTypesManager::ProcessSymbol

This is called from ForthEngine::ProcessToken when it encounters a string which
has a period in it.  ProcessSymbol return true IFF it processed the string (IE
the string started with a struct/object reference and had field accessors).

ProcessSymbol currently deals with cases like "-> OBJ.FIELDS" by checking if
the most recently processed op was a varop setting op and if so, moving the
varop setting op to just after the code generated for the first field, sort
of like "OBJ -> .FIELDS", otherwise the varop would be executed by the first
op (OBJ) while it was intended to be applied to the last op in FIELDS.
This should be changed so that the varop is moved to just before the last
compiled field access op.

ProcessSymbol compiles opcodes to an internal buffer as it parses. When it
is done and there are no errors, ProcessSymbol in interpret mode executes the
opcodes in the internal buffer, and in compile mode it appends the opcodes
onto the end of the dictionary.

ProcessSymbol handles 
Cases:
o GLOBAL.fields
o GLOBAL_PTR.fields
  Not implemented.
o LOCAL.fields
o <STRUCT_TYPE_NAME>.fields
  TOS is pointer
  nothing needs to be compiled for first token
  
-|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|-
February 20, 2011


Document these ops:
  class:  ;class
  method:  ;method
  returns
  doMethod
  implements:  ;implements
  union
  extends
  sizeOf   offsetOf
  new
  initMemberString

I'm thinking that methods which you want all objects to handle should be done
by adding a single method 'process', which takes:
 1) interface index
 2) method index
 3) arguments (should there be an argument count on TOS?)

Methods which all objects must support would be made a part of the 'common'
interface, and would include things like:
o get interface
o serialize
o convert to string

-|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|-
December 12, 2010

Back looking at class stuff.  I am currently thinking about how to implement
class objects.  Class objects would have methods that you would want to apply
to all objects, like construction/destruction, object display, parent class,
class name.  Generic container class implementation could be simplified if
certain operations could be handled using the same method in all classes.
It would also avoid having duplicate names for class methods in every class.

I think there is a name collision - "object" is both a builtin generic object
instance defining op (like "int" or "float"), it is also a class vocabulary.
-> it looks like the one in forthops is redundant and is never called, I commented it out

How things work as of today:

---
class: CLASSNAME
o defines a class vocabulary
o compiles:
  _doClassType
  <ptr to class vocabulary just defined>
  
When executed, _doClassType calls pClassVocab->DefineInstance, which normally
just defines a global/local variable or a field with this class type.
NOTE: this does NOT create an instance of this type, it just creates a
 methods/data pointer pair which are initialized to NULL
 
-|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|-
March 27, 2009

Class support is mostly working.  I am now thinking about how to support
classes built-into the forth kernel - it really isn't that hard, but I am
thinking that it may be time to re-examine how the assembler version of the
kernel is implemented.  I am going to eliminate the need to create explicit
assembler stubs for all ops which are not defined in assembler.



-|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|-
Words that need to be defined:

+ class:
+ ;class
+ method:
+ ;method
+ extends		(modify)
+ implements:
+ ;implements

- abstract
- new
- delete
- this

+ returns
? public
? private
? static (some word to indicate global members) ? or just use global vars ?
  If everything is public, then static methods could just be regular forth definitions


-|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|-

instance type
  local
    single
    array
  local ptr
    single
    array
  global
    single
    array
  global ptr
    single
    array
method invocation
member access

Stuff that need to be defined:
- definition of an interface
- definition of a structure
- definition of a class
- representation of an object on stack
- method invocation
- local objects
  - automatic constructor/destructor
- global objects
- objects as members of other objects
- constructors
- class static data members
- arrays of objects

  
-|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|-
Class support issues and current answers (May 2007):

) What is the driving force for implementing class support?  Without knowing
   this it is impossible to make design choices.

) Should all objects be accessed by pointers?  How should objects included in
   other objects be handled?
-> All object access is through pointers.
-> All object storage is in the heap, not on the stack, or in local variables,
   or in global structures.
-> Objects in structures are represented by pointer
? What is the reason for wanting all objects to be accessed by pointers?
  ? is it part of wanting all object creation & destruction to be explicit
  If you let local objects be allocated storage along with other local variables,
  you have to do one of two things:
    1) make the user invoke the constructor on the already allocated object
       explicitly on entry, and invoke the destructor on exit
    2) compile in constructor invocations at entry and destructors on exit
  
) What new syntax is needed for object support?
-> object.method and object.member can be used

) What opcodes are needed for object support?
  1) member access
  2) method invocation
  
) What is the relationship between structs and classes?
-> A class usually specifies its data representation as a struct type
    Strictly speaking, a class doesn't need a struct type, for example a singleton
    class could be implemented as a set of global variables.

) How is the behaviour of class instances specified?

) Should all class methods be virtual?
-> yes, for simplicity.  The only downside to this is that vtables will be
   larger

) Should the this pointer point to the vtable pointer, or to the beginning
  of the instance struct?
-> the this pointer will point to the vtable pointer, which is immediately
   followed by the instance data
   -> unfortunately, this means the offset of a field in a struct will be
      different from the offset of that field in an object

) How is an array of objects handled?
-> if all objects are pointers, the storage is actually just an array of pointers
-> each element includes a this pointer
   -> this would suck for big arrays of small structs
   
) Should all interfaces include creators/destructors?

) How is forgetting handled in a way that makes sure that deleted objects
   don't leak memory?
-> forget would need to call the destructor on every class instance in the
   forgotten range

) Should there be public/private/protected members and methods?

-|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|-
Object method invocation depends on 2 things:

1) a set of executable methods
2) a reference to the object data

Method invocation opcodes usually provide both of these pieces of information,
where the opcode is used to generate a pointer to the object, and the first
field of the object is the vtable pointers, which defines the set of
executable methods.

We may want to have a more general scheme of method invocation which allows
invocation of a method on structures which don't have a vtable pointer.
-|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|-
struct sVec3d
    float x
    float y
    float z
endstruct


class vec3d public sVec3d

method dot
  -> vec3d vecb
  vecb.x x f*
  vecb.y y f* f+
  vecb.z z f* f+
endmethod


method cross
  -> vec3d result
  -> vec3d vecb
  y vecb.z f* z vecb.y f* f- -> result.x
  x vecb.z f* z vecb.x f* f- -> result.y
  x vecb.y f* y vecb.x f* f- -> result.z
endmethod

method add
  -> vec3d vecb
  vecb.x ->+ x
  vecb.y ->+ y
  vecb.z ->+ z
endmethod

endclass

vec3d.new -> vec3d aa
vec3d.new -> vec3d bb
vec3d.new -> vec3d res

aa bb.dot			// result is a single float on TOS
aa res bb.cross     // result is in res

-|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|-
July 17, 2006

- definition of an interface
- definition of a structure
- definition of a class
- representation of an object on stack
- method invocation
- local objects
  - automatic constructor/destructor
- global objects
- objects as members of other objects
- constructors
- class static data members
- arrays of objects

-|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|-

Feb 2006: all stuff below here is pretty old, it should all be rethunk after
  support for structures is working

-|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|-

  user defined classes in forth
---------------------------------

The outer interpreter will be changed to recognize the syntax
objectName.methodName as a method invocation.

Idea: instead of using the hibit of the optype to denote precedence, have
the hibit set denote a method op, and the other seven bits designate the operation
to be performed - this would allow roughly 128 methods to be easily represented
without needing to use bits in the ops 24-bit value field.

1) object representation
 a) object representation in memory
   object is represented by a pair of pointers (vtable, this)
 b) object representation on stack
   object is represented on TOS by a pointer to a pair of pointers (vtable, this)
2) object method invocation opcodes
 a) 

there will have to be a way to designate both local and global objects
-> use hibit of value field to specify if the value field is global, in
   which case it is referenced using the optable, or is in stack

global objects:
  optable holds pointer to pointer pair
  first pointer points to class descriptor
  second pointer is object storage (this pointer)
local objects:
  local var holds pointer pair
  first pointer points to class descriptor
  second pointer is object storage (this pointer)
  first field of storage is pointer to class vtable
? how should object arrays be handled
-> maybe optable points to longword pair, first field is vtable ptr, second
   field is storage pointer - local vars are similar

  class descriptor table
--------------------------
class descriptor table is table of longwords with the following layout:

long[0]    pointer to ForthClass object for this class
long[1]    "magic" value CLASS_MAGIC_NUMBER for error checking
long[2]    number of methods in this table
long[3]    IP for method 0
...
long[N]    IP for method (N-3)


? maybe have an "epilogue" compiled at end of a method (or word which uses
  local variables).  Epilogue includes:
  o code for destroying local objects
  o code for freeing stack frame
  o code for restoring "this" ptr
  -> keep track of "return" ops while compiling, turn them into branches to
     epilogue
     ? maybe make "exit" illegal inside class methods and words with local variables

? where is vtable ptr?
-> first field in any obj is classObj pointer
-> whenever an obj is created, its classObj pointer must be filled in
  -> declaration of a local obj requires constructor code to be compiled
-> have all objects be implemented thru references, so when a global obj is
   declared, the op for it is a global obj ptr

? how can public member variables be implemented?
-> maybe allow only methods to be public, accessor methods have to be used if
   you want to read/write member variables
? do seperate set/get operations need to be added, or can member variable ops
  act like local vars, where a preceeding "->" or "->+" can modify how they
  act?  If so, built in types like int and float can't be treated like
  other classes, "->" couldn't be a method.

  "this" pointer
------------------
The "this" pointer is a thread variable (TP).  Upon entry to a
class method, the old "this" pointer is on top of the return stack.
? How does invoking another method of the same class from inside a
  method work?
-> maybe add a new forthOpType, where the value field is the
   method number

  class defining words
------------------------
class CLASS_NAME

private
public
protected

isa BASE_CLASS_NAME

vars
...
endvars

method METHOD1_NAME ... ;
...

endclass

? need to think about how "forget" interacts with class stuff
? have class private definitions be held in temp vocab until endclass, then flushed
  ? this would screw up decompilation
? how to implement protected definitions

? is there a vocabulary of classes?  think of CLASS_NAME.new
? what other methods on class objects are there?
? when you see OBJ_NAME.METHOD, how do you find the right class vocabulary to
  lookup METHOD in, using OBJ_NAME?
  -> when A.B token is seen, assume A is an object instance, lookup its opValue
     in symbol table, lookup in opTable to find

? support static variables
    -> nope
? support static methods
    -> nope
? support friend classes
    -> not like c++, no access to class private stuff, but maybe allow a
    way for friend classes to invoke protected methods without having to
    be derived from base class
    -> this would require having a way to search multiple class vocabs

ADDR_OF(OBJ_A): OP( _objInstance
                LONG( ptr to object )
first file in object is vtable ptr, followed by storage...
                LIT(classPointer)
                data storage

isa CLASS_NAME
    public inheritance from named class

inherits CLASS_NAME
    private inheritance from named class


new CLASS_NAME  (? or CLASS_NAME.new)
    leaves addr of new object on TOS

CLASS_NAME NEW_OBJ_NAME
    creates a new object of type CLASS_NAME

class CLASS_NAME

method METHOD_NAME
    add METHOD_NAME to new class vocabulary
    compile code which sets this pointer?
    ? or does inner interpreter do this for us
    -- ugh, this pointer will need to be stacked somehow
    ? do methods ALWAYS have stack frames ?
    set state to compile

? do we need "endmethod" or will ";" work?

endclass
    build vtable
        first copy baseclass vtable
        overwrite any methods this class redefines
        add on any new methods
    add new class vocabulary to list of class vocabularies
    add new class defining word to main class vocabulary


-> replace ForthEngine::InVarsDefinition with a more general execution mode,
   with modes like:
   - interpret mode
   - compile mode
   - vars definition mode
   - class definition mode
   ? are there cases where more than one mode can be active at a time,
     like "compile while in class definition" mode?
  bits:
    compile mode
    definition in progress
        ? how are "compile mode" and "definition in progress" different
        -> you can be compiling an unnamed table
    class definition in progress
    definition uses local vars

  Cases to think about
------------------------
A) method invocation
  Need to specify object, method
  1) on object referenced by local pointer
        opcode bit 31 is 1
        opcode bit 30 is 1
        opcode bits 29:15 is 15-bit method number
        opcode bits 14:0 is 15-bit frame offset of local pointer var
  2) on object referenced by a member pointer
        opcode bit 31 is 1
        opcode bit 30 is 0
        opcode bits 29:15 is 15-bit method number
        opcode bits 14:0 is 15-bit member offset of pointer var
  3) on object referenced by global pointer
        opcode bits 31:24 is method_on_global opcode
        opcode bits 23:10 is 14-bit opcode of global pointer var
        opcode bits 9:0 is 10-bit method number
  4) on "this" object
        opcode bits 31:24 is method_on_this opcode
        opcode bits 23:0 is 24-bit method number
  5) on object pointed to by top-of-stack
        opcode bits 31:24 is method_on_tos opcode
        opcode bits 23:0 is 24-bit method number

B) member access
  Need to specify object, offset, type
  1) on object referenced by global pointer (global.foo)
        opcode bits 31:24 is global_member_TYPE opcode
        opcode bits 23:12 is 12-bit opcode of global pointer var
        opcode bits 11:0 is 12-bit offset
  2) on object referenced by local pointer (local.foo)
        opcode bits 31:24 is local_member_TYPE opcode
        opcode bits 23:0 is 24-bit offset
  3) on "this" object (foo)
        opcode bits 31:24 is this_member_TYPE opcode
        opcode bits 23:0 is 24-bit offset
  4) on object referenced by a member pointer (memberVar.foo)
        opcode bits 31:24 is other_member_TYPE opcode
        opcode bits 23:12 is 12-bit offset of pointer in this object
        opcode bits 11:0 is 12-bit offset of member

  ? maybe member access on other than "this" is a two-step process, where
    the object ptr is put on the stack, then an opcode which encodes type
    and offset is used?

? what about ->+ or ->- operations ?

member
method
member:method
member.member
gvar:method
lvar:method
lvar.member
lvar.member.member.member
lvar.member:method
lvar.member:method.member
-> lvar.member:method.member
... life gets complicated real fast ...


Idea:
  If class vtable holds opcodes instead of IP addresses, member access could
  be done by using member access opcodes in the vtable - you already have the
  object pointer by the time you get to the vtable, and the member access
  opcode optype tells the member type, and the value field is the offset
One potential drawback:
  If public member vars are assigned a vtable slot each, since member vars are
  defined before methods it would be easy to go beyond the first 128 slots of
  the vtable without intending to.
  -> maybe member vars are not assigned vtable slots initially, but are
     assigned vtable slots at the end of class definition
     ? should vtable slots be assigned to methods before end of class def?
? what do vocabulary entries hold, there is only one value field, and it
  must specify: method/member, opcode, vtable slot
  -> during class definition, value field holds the opcode, after definition
     it holds vtable slot number
? should private or protected methods be in the vtable, or should there be
  a "method on this" optype?
  -> probably two "method on this" optypes, one for builtin ops and one for
  user defined ops - the "method on this" value field is the actual optable
  number, NOT the vtable slot number, since when "method on this" ops are
  compiled the vtable hasn't been made yet...

-|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|-

Adding classes to Forth
 
Cases to think of:
1. Global objects
2. Local objects
3. Global object arrays
4. Local object arrays
-> object arrays could mean 2 things:
  1. a single object which is an array of elements
  2. an array whose elements are objects
One significant difference between these is that <1> has only vtable pointer,
while <2> has a vtable pointer per array element.

On Stack:
type		vtable ptr at base of object
method		in opcode
instance	frame offset in opcode

Globals:
type		vtable ptr at base of object
method		in opcode
instance	object ptr


<invokeMethodN> <objectOp>

<methodDesignator> <instanceAddress> <classOp>    (ugh)

<instanceAddress> <classMethodOp>

A forthOpType for class operations could be assigned.  There are 24 bits
which could be used to specify which object instance, and which method
-> assign 2 forthOpTypes - one for global object instances and one for
   local object instances 
   for global object instances, use 14 bits to specify the opcode of the
   object and 10 bits to specify the method number
   for local object instances, use 14 bits to specify the stack offset
   of the object and 10 bits to specify the method number

? how to deal with automatic local object deletion?




//       11111111112222222222333333333344444444445555555555666666666677777777778
//345678901234567890123456789012345678901234567890123456789012345678901234567890
<############################# Last Line In File ##############################>
