=============================================================================
Forth for Raspberry Pi

login pi, raspberry
startx

- get windows version working with _ASM_INNER_INTERPRETER undefined
  -> this required removing InnerInterp.asm, but this includes the CallDLL routine
? get linux version working under cygwin
=============================================================================
July 7 2019

I ran into the problem (again) where pushing arm2016 from raspi would fail
with an apparent permissions problem - the problem (I don't know why) is that
on windows I was in the arm2016 branch, after I switched to the master branch
I was able to push from raspi to arm2016.
=============================================================================
July 6 2019

When I run Ubuntu-mate, I keep seeing an install-updates popup, but it fails
saying that it needs 48M on the boot partition, and there is only 43M free.
Apparently this is an installer bug, it really doesn't need space on boot.
I guess resizing the boot partition is a pain, so the recommended workaround
is to do updating from the console with:

sudo apt dist-upgrade
=============================================================================
FP instruction debug

+ vadd, vsub, vmul, vdiv
+ vneg, vabs, vsqrt
+ vldr, vstr
+ vmla, vmls, vnmla, vnmls, vnmul
+ vfma, vfms, vnfma, vnfms
+ vldm, vstm
+ vcmp, vcmpe
+ vmov register
- vmov immediate
- vcvt

rs1 rs2 rs3 vadd,		0xee701a81		vadd.f32 s3, s1, s2
rsp rs11 ] vldr,		0xed505600		ldcl 6, cr5, [r0, #-0] according to gdb
next,

rsp rs11 ] vldr,		0xed505600		ldcl 6, cr5, [r0, #-0] according to gdb
vldr
cond 1101 ud01  rn   vd  101s imm8
1110 1101 1101 0110 0111 1010 0000 0000		edd67a00	vldr s15,[r6]
1110 1101 0101 0000 0101 1010 0000 0000
vstr
cond 1101 ud00  rn   vd  101s imm8
1110 1101 1100 0110 0111 1010 0000 0000		edc67a00	vstr s15,[r6]


=============================================================================
gdb

gdb can't start programs on Ubuntu Mate, get the processid of forth using grep
and run gdb attaching to the running forth process by doing this:
  ps -a | grep forth
  gdb -p FORTH_PROCESS_ID
  
-> don't need this in gdb on raspbian in 2022


r
  run program
bt
  show stacktrace
i args
  show 
b FUNCTION
  set breakpoint
delete N
  delete breakpoint N
c
  continue running
s
  step into
n
  step over
si
  step instruction
ni
  step over instruction (over calls)
p VARNAME
  print variable
p/x VARNAME
  print variable in hex

layout regs
  go into mode which shows registers and disassembly
layout asm
  show disassembly window
layout src
  show source window

source PATH		load gdb script from PATH\
b *ADDR			set breakpoint at address
x /Nw ADDR		show N 32-bit words at ADDR
x /Nwx ADDR		show N 32-bit words at ADDR in hex
x /i ADDR		disassemble at ADDR
=============================================================================
make gcc create assembler files: (second mixes the C in with the asm)
gcc -O2 -S -c foo.c
gcc -c -g -Wa,-a,-ad [other GCC options] foo.c > foo.lst
=============================================================================
ldd EXECUTABLE		lists shared libs used by EXECUTABLE
=============================================================================

5.26.8 ARM Assembler

The ARM assembler included in Gforth was written from scratch by David Kuehling.

The assembler includes all instruction of ARM architecture version 4, but does not (yet) have support for Thumb instructions. It also lacks support for any co-processors.

The assembler uses a postfix syntax with the target operand specified last. For load/store instructions the last operand will be the register(s) to be loaded from/stored to.

Registers are specified by their names r0 through r15, with the aliases pc, lr, sp, ip and fp provided for convenience. Note that ip means intra procedure call scratch register (r12) and does not refer to the instruction pointer.

Condition codes can be specified anywhere in the instruction, but will be most readable if specified just in front of the mnemonic. The 'S' flag is not a separate word, but encoded into instruction mnemonics, ie. just use adds, instead of add, if you want the status register to be updated.

The following table lists the syntax of operands for general instructions:

     Gforth          normal assembler      description
     123 #           #123                  immediate
     r12             r12                   register
     r12 4 #LSL      r12, LSL #4           shift left by immediate
     r12 r1 #LSL     r12, LSL r1           shift left by register
     r12 4 #LSR      r12, LSR #4           shift right by immediate
     r12 r1 #LSR     r12, LSR r1           shift right by register
     r12 4 #ASR      r12, ASR #4           arithmetic shift right
     r12 r1 #ASR     r12, ASR r1           ... by register
     r12 4 #ROR      r12, ROR #4           rotate right by immediate
     r12 r1 #ROR     r12, ROR r1           ... by register
     r12 RRX         r12, RRX              rotate right with extend by 1

Memory operand syntax is listed in this table:

     Gforth            normal assembler      description
     r4 ]              [r4]                  register
     r4 4 #]           [r4, #+4]             register with immediate offset
     r4 -4 #]          [r4, #-4]             with negative offset
     r4 r1 +]          [r4, +r1]             register with register offset
     r4 r1 -]          [r4, -r1]             with negated register offset
     r4 r1 2 #LSL -]   [r4, -r1, LSL #2]     with negated and shifted offset
     r4 4 #]!          [r4, #+4]!            immediate preincrement
     r4 r1 +]!         [r4, +r1]!            register preincrement
     r4 r1 -]!         [r4, +r1]!            register predecrement
     r4 r1 2 #LSL +]!  [r4, +r1, LSL #2]!    shifted preincrement
     r4 -4 ]#          [r4], #-4             immediate postdecrement
     r4 r1 ]+          [r4], r1              register postincrement
     r4 r1 ]-          [r4], -r1             register postdecrement
     r4 r1 2 #LSL ]-   [r4], -r1, LSL #2     shifted postdecrement
     ' xyz >body [#]   xyz                   PC-relative addressing

Register lists for load/store multiple instructions are started and terminated by using the words { and } respectivly. Between braces, register names can be listed one by one, or register ranges can be formed by using the postfix operator r-r. The ^ flag is not encoded in the register list operand, but instead directly encoded into the instruction mnemonic, ie. use ^ldm, and ^stm,.

Addressing modes for load/store multiple are not encoded as instruction suffixes, but instead specified after the register that supplies the address. Use one of DA, IA, DB, IB, DA!, IA!, DB! or IB!.

The following table gives some examples:

     Gforth                           normal assembler
     { r0 r7 r8 }  r4 ia  stm,        stmia    {r0,r7,r8}, r4
     { r0 r7 r8 }  r4 db!  ldm,       ldmdb    {r0,r7,r8}, r4!
     { r0 r15 r-r }  sp ia!  ^ldm,    ldmfd    {r0-r15}^, sp!

Conditions for control structure words are specified in front of a word:

     r1 r2 cmp,    \ compare r1 and r2
     eq if,        \ equal?
        ...          \ code executed if r1 == r2
     then,

Here is an example of a code word (assumes that the stack pointer is in r9, and that r2 and r3 can be clobbered):

     code my+ ( n1 n2 --  n3 )
        r9 IA!       { r2 r3 } ldm,  \ pop r2 = n2, r3 = n1
        r2   r3      r3        add,  \ r3 = n2+n1
        r9 -4 #]!    r3        str,  \ push r3
        next,
     end-code

Look at arch/arm/asm-example.fs for more examples. 
=============================================================================
kbhit for linux

#include <stdio.h>
#include <termios.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/time.h>
 
void changemode(int);
int  kbhit(void);
int main(void)
{
  int ch;
  changemode(1);
  while ( !kbhit() )
  {
    putchar('.');
  }
 
  ch = getchar();
 
  printf("\nGot %c\n", ch);
 
  changemode(0);
  return 0;
}
 
void changemode(int dir)
{
  static struct termios oldt, newt;
 
  if ( dir == 1 )
  {
    tcgetattr( STDIN_FILENO, &oldt);
    newt = oldt;
    newt.c_lflag &= ~( ICANON | ECHO );
    tcsetattr( STDIN_FILENO, TCSANOW, &newt);
  }
  else
    tcsetattr( STDIN_FILENO, TCSANOW, &oldt);
}
 
int kbhit (void)
{
  struct timeval tv;
  fd_set rdfs;
 
  tv.tv_sec = 0;
  tv.tv_usec = 0;
 
  FD_ZERO(&rdfs);
  FD_SET (STDIN_FILENO, &rdfs);
 
  select(STDIN_FILENO+1, &rdfs, NULL, NULL, &tv);
  return FD_ISSET(STDIN_FILENO, &rdfs);
 
}
