May 29 2011

Notes on connecting Syn2k and Forth

I think for now I will do this with both Forth and Syn2k as static libs, not DLLs.
To get an idea of how many things in Syn2k will have to be hooked up to Forth, here are all the
Syn2k calls in SoftSyn2:

One big thing which is missing is direct manipulation of notes - SoftSyn just sets up the sequencer
and syn engine and has the engine play the sequence, it doesn't turn notes on and off or setup
synth patches.

Here are what are needed for setting up patches/note players:

o define orchestra
o define instruments
o define patches
 o specify modules
 o specify module invocation order
 o set module parameters
 o specify envelopes
 o specify event handlers
   o external events
     o score/midi events
   o internal events
     o envelope events
     ? other events generated by modules

  
void CSoftSyn2View::OnPlayToggle() 
        mpOut = new DirectSoundOutput;
        mpDev = mpOut->GetDevice();
        if ( mpDev->Initialize( SAMPLE_RATE, NUM_CHANNELS, NUM_BITS, SHARE_OUTPUT ) )
            if ( mpDev->PrepareStream( NULL, 0, numBytes ) )
                    mpSyn->Play( mTrackNames[ mSoloSpinner ], startTime, endTime, loopPlay );
                    if ( mpDev->Play() == false )
                    
        
void CSoftSyn2View::ComputePlayTimes( int& startTime, int& endTime, bool loopPlay )
    MultiTrackSequencePlayer* pSeq = mpSyn->GetSequencer();
    SeqClock* pClock = pSeq->GetClock();
    int ticksPerMeasure = pClock->GetPulsesPerBeat() * pClock->GetBeatsPerMeasure();
    int trackNum = mpSyn->GetTrackNumber( mTrackNames[ mSoloSpinner ] );
        pTrack = pSeq->GetSequence()->GetTrackHeader( trackNum );

        
void CSoftSyn2View::OnPauseToggle() 
            mpDev->Resume();
            mpDev->Pause();


void CSoftSyn2View::StopPlayback() 
        mpDev->Stop();
        delete mpSyn;
        delete mpOut;
        

void CSoftSyn2View::OnRenderTo() 
    pStereoOut = new StereoFileOut( pOutFile );
        mpSyn->Play( mTrackNames[ mSoloSpinner ], 0, -1, false );
        while ( !mpSyn->IsSequenceDone() )
            numSamples = mpSyn->GenerateSamples();
        while ( !mpSyn->IsRendererDone() )
            numSamples = mpSyn->GenerateSamples();
        mpSyn->Finalize();
    delete mpSyn;
    delete pStereoOut;

        
bool CSoftSyn2View::PrepareToPlay( SynOutput *pOut )
    mpSyn = new SoftSynEngine( pSoundFontName, SEQUENCE_MEMORY_SIZE );
    if ( mpSyn->Initialize( pOut ) == false )
                ((SF2Orchestra *) (mpSyn->GetOrchestra()))->SetZoneParamOverrideCallback( ZoneOverrideCB, this );
                ((SF2Orchestra *) (mpSyn->GetOrchestra()))->SetZoneParamOverrideCallback( NULL, NULL );
            mpSyn->GetOrchestra()->Dump( pOutFile );
	mpSyn->SetTempo( mTempo );
        mpSyn->LoadStandardMidiFile( lineBuff );
            mpSyn->LoadASCIIMusicLanguageBuffer( pScoreBuff );
    if ( mpSyn->IsSequenceEmpty() ) {

    
void CSoftSyn2View::OnTimer(UINT nIDEvent) 
            if ( mpDev->GetState() == kSndStateStopped ) {
                SynNotePlayer::ResetMaxPolyphony();
                
                MultiTrackSequencePlayer* pSeq = mpSyn->GetSequencer();
                    SeqClock* pClock = pSeq->GetClock();
                    int samplesPerMeasure = (SAMPLE_RATE * 60 * pClock->GetBeatsPerMeasure()) / pClock->GetBeatsPerMinute();
                    int posInSamples = mpDev->GetPlayPosition() / 4;


bool CSoftSyn2View::FillBuffer()
    bytesToFill = mpDev->GetAvailableWriteSpace();
        if ( mpSyn->GetState() == kSSStateIdle )
            if ( mpDev->GetState() == kSndStatePlaying )
                mpSyn->Finalize();
            mpDev->SilenceFill( bytesToFill );
            bytesGenerated = mpSyn->GenerateSamples( bytesToFill / 4 ) * 4;
            

void CSoftSyn2View::UpdateTempo()
		mpSyn->SetTempo( mTempo );
		

void CSoftSyn2View::OnSaveTrackText()
        mpOut = new DirectSoundOutput;
        mpDev = mpOut->GetDevice();
        if ( mpDev->Initialize( SAMPLE_RATE, NUM_CHANNELS, NUM_BITS, SHARE_OUTPUT ) )
        {
            if ( mpDev->PrepareStream( NULL, 0, numBytes ) )
                        mpSyn->GetSequencer()->GetSequence()->DisplayTrack( trackNumber, saveTrackToFile, pOutFile );
                    delete mpSyn;
        delete mpOut;

void CSoftSyn2View::UpdatePlayParameters()
        mpSyn->ChangePlayParameters( startTime, endTime, loopIt );
