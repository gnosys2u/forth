
autoforget showsection

// empty stack markers - should still be here after all tests done
0xDEADBEEF 123456789


: showsection " ================== " dup %s swap %s %s %nl ;


///////////////////////////////////////////////////////////

showsection( "Test if...else...endif" )
demo : woof  if " true " else " false " endif %s %nl ;
demo 0 woof 1 woof

///////////////////////////////////////////////////////////

showsection( "Test if...endif" )
demo : foow if " foow " %s endif ;
demo "A" %s 1 foow "B" %s 0 foow "C" %s %nl

///////////////////////////////////////////////////////////

showsection( "Test qouted strings and if...else...endif" )
demo : barney "This is a \"quoted\" test string\n\n\n" %s ;
demo barney

///////////////////////////////////////////////////////////

showsection( "Test begin...until" )
demo : fred 5 begin dup . %bl 1 - dup 0== until %nl drop ;
demo fred

///////////////////////////////////////////////////////////

showsection( "Test begin...while...repeat" )
demo : wilma 5 begin dup while dup . %bl 1 - repeat %nl drop ;
demo wilma

///////////////////////////////////////////////////////////

showsection( "Test do...loop" )
demo : betty 5 0 do  i . %bl loop %nl ;
demo betty

///////////////////////////////////////////////////////////

showsection( "Test do...+loop with negative loop increment" )
demo : unbetty -5 0 do  i . %bl -1 +loop %nl ;
demo unbetty

///////////////////////////////////////////////////////////

showsection( "Test leave & unloop/exit" )
demo : ookla
demo   1000 0 do i . %bl leave " burp " %s loop %nl
demo   1000 0 do i . %nl unloop exit " glurp " %s loop
demo ;
demo ookla

///////////////////////////////////////////////////////////

showsection( "Test case statement" )
demo : casetest
demo   case
demo     0 of "zero" endof
demo     1 of "one" endof
demo     2 of "two" endof
demo     drop "whatever"
demo   endcase
demo   %s %nl
demo ;

demo 0 casetest
demo 1 casetest
demo 2 casetest
demo 3 casetest
demo 5 casetest

///////////////////////////////////////////////////////////

showsection( "Test character constants" )
demo : pebbles 'a' %c ' ' %c 'b' %c '\t' %c 'c' %c '\n' %c 'z' %c %nl ;
demo pebbles
demo "Interpreted: " %s 'a' %c ' ' %c 'b' %c '\t' %c 'c' %c '\n' %c 'z' %c %nl

///////////////////////////////////////////////////////////

showsection( "Test global variables" )
demo int gaa
demo : gvtest 0 -> gaa 10 0 do gaa %d %bl 5 ->+ gaa loop %nl ;
"Should see 0..45 in increments of 5\n" %s gvtest

///////////////////////////////////////////////////////////

showsection( "Test local variables" )
//: lvtest vars int aa endvars 0 -> aa 10 0 do aa %d %bl 5 ->+ aa loop %nl ;
demo : lvtest int aa 0 -> aa 10 0 do aa %d %bl 5 ->+ aa loop %nl ;
"Should see 0..45 in increments of 5\n" %s lvtest

///////////////////////////////////////////////////////////

showsection( "Test fetch & store" )
demo : buffer builds allot does ;
demo 20 buffer tb
demo 0xDEADBEEF tb !
demo tb c@ %x %bl tb w@ %x %nl
demo tb sc@ %x %bl tb sw@ %x %nl
demo tb c@ c2l %x %bl tb w@ w2l %x %nl

///////////////////////////////////////////////////////////

showsection( "Test strings" )
demo 20 string aaa 20 string bbb
demo "ajaja" -> aaa "bobobo" -> bbb
demo aaa strlen %d %bl bbb strlen %d %nl
demo : showstrs "aaa \"" %s aaa %s "\" bbb \"" %s bbb %s "\"" %s %nl ;
demo showstrs

demo strcpy( aaa bbb ) showstrs
demo "blahblah" -> aaa  strncpy( aaa bbb 2 ) showstrs

demo "head" -> aaa "tail" -> bbb strcat( aaa bbb ) showstrs
demo "head" -> aaa "tail" -> bbb strncat( aaa bbb 3 ) showstrs

demo "blahblah" -> aaa  strchr( aaa 'l' ) %s %nl
demo "blahblah" -> aaa  strrchr( aaa 'l' ) %s %nl
demo "blahblah" -> aaa  strchr( aaa 'q' ) %s %nl

demo strcmp( aaa "blahblah" ) %d %nl
demo strcmp( aaa "BlahblaH" ) %d %nl
demo stricmp( aaa "BlahblaH" ) %d %nl
demo stricmp( aaa "Blahbla" ) %d %nl

demo strstr( aaa "ahbl" ) %s %nl
demo strstr( aaa "ahab" ) %s %nl

// strcpy strncpy strlen strcat strncat strchr strrchr strcmp stricmp strstr strtok

///////////////////////////////////////////////////////////

showsection( "Test inline comments" )
: _fail_ " FAILED! " %s ;
: _ok_ %d /* _fail_ */ ;
"The following line should have \"123456\" on it\n" %s
( 1 _ok_ ) true -> parenIsComment ( _fail_ ) 2 _ok_ ( _fail_
3 _ok_ false -> parenIsComment _ok_( 4 ) /* _fail_
5 _ok_ /* _fail_ */ 6 _ok_ %nl

///////////////////////////////////////////////////////////

showsection( "Test basic ops - only errors are displayed" )
decimal

: t[
  sp -> int oldSP
  ']' word -> 250 string ops
  ops interpret
  sp oldSP swap - 4/ -> int numItems
  false -> int failed
  do( numItems 0 )
    if( not( pick( i ) ) )
      true -> failed
    endif
  loop
  if( failed )
    "FAILED: { " %s ops %s " } => " %s
    do( numItems 0 )
      i %d "=" %s pick( numItems 1- i - ) . %bl
    loop
  endif
  
  do( numItems 0 )
    drop
  loop
;
  

// + - * / or and xor not 
t[ 1 5 + 6 ==   1 -4 + -3 ==   0x80000000 -1 + 0x7fffffff ==   1 5 - -4 ==   1 -4 - 5 ==    0x80000000 -1 - 0x80000001 == ]
t[ 3 7 * 21 ==   0x101 0x11 * 0x1111 ==   -5 -7 * 35 ==   22 7 / 3 ==   99 11 / 9 ==   -100 7 / -14 ==   -65535 256 / -255 == ]
t[ true false or   33 7 or 39 ==   0xf0f 0x0f0 or 0xfff ==   0x1234 0x350461 or 0x351675 ==   true false and not ]
t[ 33 7 and 1 ==   0xf0f 0x0f0 and 0== true false xor   33 7 xor 38 ==   0xf0f 0x0f0 xor 0xfff ==   0x505 0x141 xor 0x444 == ]

// u* 2* 4* 8* 2/ 4/ 8/ /mod mod negate
t[ -5 -7 u* -12 35 l==   243 2* 486 ==   243 4* 972 ==   243 8* 1944 ==   744 2/ 372 ==   744 4/ 186 ==   744 8/ 93 == ]
t[ 4183 23 /mod 20 181 l==   193747 39 mod 34 ==   -34 negate 34 == ]

// f+ f- f* f/ f== f!= f> f>= f< f<= 
t[ 3.5 4.25 f+ 7.75 f==   8.5 3.25 f- 5.25 f==   3.5 4.5 f* 63.0 4.0 f/ f==   5.0 4.0 f!=   27.3 22.2 f>   27.3 27.3 f> not ]
t[  27.3 27.3 f>=   7.2 121.9 f<   676.0 676.0 f< not   676.0 676.0 f<= ]

// f0== f0!= f0> f0>= f0< f0<= fwithin fmin fmax
t[ 0.0 f0==  0.7 f0== not   0.0 f0> not   1.2 f0>   0.0 f0>=   -3.3 f0>= not   5.1 f0>=   9.4 f0< not   0.0 f0<=   -2.3 f0<= ]
t[ -5.0 -1.0 1.0 fwithin not   0.5 -1.0 1.0 fwithin   7.0 -1.0 1.0 fwithin not   5.0 2.3 fmin 2.3 f==   -10.0 4.3 fmax 4.3 f== ]
   
// d+ d- d* d/ d== d!= d> d>= d< d<= 
t[ 3.5d 4.25d d+ 7.75d d==   8.5d 3.25d d- 5.25d d==  3.5d 4.5d d* 63.0d 4.0d d/ d==   5.0d 4.0d d!=   27.3d 22.2d d> ]
t[ 27.3d 27.3d d> not   27.3d 27.3d d>= and  7.2d 121.9d d<   676.0d 676.0d d< not   676.0d 676.0d d<= ]

// d0== d0!= d0> d0>= d0< d0<= dwithin dmin dmax
t[ 0.0d d0==  0.7d d0== not   0.0d d0> not   1.2d d0>   0.0d d0>=   -3.3d d0>= not   5.1d d0>=   9.4d d0< not   0.0d d0<=   -2.3d d0<= ]
t[ -5.0d -1.0d 1.0d dwithin not   0.5d -1.0d 1.0d dwithin   7.0d -1.0d 1.0d dwithin not   5.0d 2.3d dmin 2.3d d==   -10.0d 4.3d dmax 4.3d d== ]
   
// << >> u>>
t[ 1 8 << 256 ==   17 2 << 68 ==   -80 3 >> -10 ==   19 2 >> 4 == ]

// dup ?dup swap over rot pick
t[ 17 5 dup 2 pick tuck 17 == swap 5 == and rot 5 == rot 17 == 0 drop and rot 17 == ]
t[ 87 5 ?dup 0 ?dup 0== rot 5 == rot 5 == and and over 87 == rot 87 == ]

// -rot nip tuck roll
// ddup dswap ddrop dover drot r[ ]r
// c! c@ sc@ c2l w! w@ sw@ w2l ! @ d! d@ 
// memcpy memset varAction! varAction@
// l+ l- l* l/ lmod l/mod lnegate i2l i2f l2d f2l d2l
// l== l!= l> l>= l< l<= l0== l0> l0>= l0< l0<= lwithin lmin lmax
// . %d %x %lld %llx %s %c %block %bl %nl %f %g %fmt
// printDecimalSigned printAllSigned printAllUnsigned octal decimal hex

t[ 0xDEADBEEF 123456789 l== ]	// check for stack underflow or extra items

%nl

///////////////////////////////////////////////////////////
// test interpret

: ee interpret( "'e' %c 'y' %c" );
: cc interpret( "'c' %c" );
: bb interpret( "'b' %c" ) cc interpret( "'d' %c" ) ;
: aa interpret( "'a' %c" ) bb ee interpret( "'z' %c" ) ;

aa " <- should say abcdeyz\n" %s

///////////////////////////////////////////////////////////

//%nl %nl "Hit ENTER to exit" %s
//stdin fgetc

loaddone

