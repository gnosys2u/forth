
autoforget testBuff

// empty stack markers - should still be here after all tests done
0xDEADBEEF 123456789

decimal

//: showsection " ================== " dup %s swap %s %s %nl ;

false -> int testFailed

string( 512 ) testBuff
string( 512 ) testBuff2
: clearBuff "" -> testBuff ;
: addBuff ->+ testBuff ;
: startTest clearBuff outToString( testBuff ) ;

: checkResult
  -> ptrTo byte expected
  outToScreen
  if( strcmp( testBuff expected ) )
    "Expected |" %s expected %s "| got |" %s testBuff %s "|" %s %nl
    testBuff 6 dump
    false
    true -> testFailed
  else
    true
  endif
;

// t[ LINE_OF_STUFF ]
// LINE_OF_STUFF must evaluate to one or more true (-1) values
: t[
  sp -> int oldSP
  ']' word -> string( 250 ) ops
  //ops %s %nl
  ops interpret
  sp oldSP swap - 4/ -> int numItems
  false -> int failed
  do( numItems 0 )
    if( not( pick( i ) ) )
      true -> failed
    endif
  loop
  if( failed )
    "FAILED: { " %s ops %s " } => " %s
    do( numItems 0 )
      i %d "=" %s pick( numItems 1- i - ) . %bl
    loop
  endif
  
  do( numItems 0 )
    drop
  loop
;

"aba" -> testBuff
t[ checkResult( "aba" ) ]
  

///////////////////////////////////////////////////////////

// test special characters in strings and characters

t[ '\0' 0== ] t[ '\a' 7 == ] t[ '\b' 8 == ] t[ '\t' 9 == ] t[ '\n' 0x0a == ] t[ '\v' 0x0b == ]
t[ '\f' 0x0c == ] t[ '\r' 0x0d == ] t[ '\"' 0x22 == ] t[ '\'' 0x27 == ] t[ '\\' 0x5c == ]

startTest
'\a' %c '\b' %c '\t' %c '\n' %c '\v' %c '\f' %c '\r' %c '\"' %c '\'' %c  '\\' %c outToScreen

t[ checkResult( "\a\b\t\n\v\f\r\"\'\\" ) ]

// verify that character constants 
: testCharacterConstants startTest 'a' %c ' ' %c 'b' %c '\t' %c 'c' %c '\n' %c 'z' %c %nl ;
"" -> testBuff2 outToString( testBuff2 )
'a' %c ' ' %c 'b' %c '\t' %c 'c' %c '\n' %c 'z' %c %nl
t[ testCharacterConstants checkResult( testBuff2 ) ]

///////////////////////////////////////////////////////////

// test control structures

: testIf if "t" addBuff endif ;
t[ startTest "A" addBuff 1 testIf "B" addBuff 0 testIf "C" addBuff checkResult( "AtBC" ) ]

: testIfElse if 't' else 'f' endif ;
t[ 1 testIfElse 't' == ]  t[ 0 testIfElse 'f' == ]

: testBeginUntil
  startTest
  5 begin dup . %bl 1 - dup 0== until drop
;
t[ testBeginUntil checkResult( "5 4 3 2 1 " ) ]

: testBeginWhile
  startTest
  5 begin dup while dup . %bl 1- repeat drop
;
t[ testBeginWhile checkResult( "5 4 3 2 1 " ) ]

: testDoLoop
  startTest
  5 0 do  i . %bl loop
  -5 0 do  i . %bl -1 +loop
  1000 0 do i . %bl leave " burp " %s loop
  1000 0 do i . %bl i 2 == if unloop exit endif loop
  " should never get here" %s
;
t[ testDoLoop checkResult( "0 1 2 3 4 0 -1 -2 -3 -4 -5 0 0 1 2 " ) ]

//testBuff %s '|' %c %nl

: casetest
  case
    0 of "zero" endof
    1 of "one" endof
    2 of "two" endof
    drop "whatever"
  endcase
  addBuff
;

t[ startTest 1 casetest   3 casetest   0 casetest   2 casetest   5 casetest  checkResult( "onewhateverzerotwowhatever" ) ]


///////////////////////////////////////////////////////////

int gaa
: testGlobalVars
  startTest
  0 -> gaa 7 0 do gaa %d %bl 5 ->+ gaa loop
;
t[ testGlobalVars checkResult( "0 5 10 15 20 25 30 " ) ]

: testLocalVars
  int aa
  startTest
  0 -> aa 7 0 do aa %d %bl 5 ->+ aa loop
;
t[ testLocalVars checkResult( "0 5 10 15 20 25 30 " ) ]

///////////////////////////////////////////////////////////

// Test fetch & store
: buffer builds allot does ;
20 buffer tb

0xDEADBEEF tb !
t[ startTest tb c@ %x %bl tb w@ %x %bl tb sc@ %x checkResult( "ef beef ffffffef" ) ]
t[ startTest tb sw@ %x %bl tb c@ c2l %x %bl tb w@ w2l %x checkResult( "ffffbeef ffffffef ffffbeef" ) ]

///////////////////////////////////////////////////////////

// Test strings
20 string aaa 20 string bbb
"ajaja" -> aaa "bobobo" -> bbb
t[ strlen( aaa ) 5 == strlen( bbb ) 6 == ]

t[ strcpy( aaa bbb ) strcmp( aaa "bobobo" ) 0== ]
t[ "blahblah" -> aaa  strncpy( aaa bbb 2 ) strcmp( aaa "boahblah" ) 0== ]

t[ "head" -> aaa "tail" -> bbb strcat( aaa bbb ) strcmp( aaa "headtail" ) 0== ]
t[ "head" -> aaa "tail" -> bbb strncat( aaa bbb 3 ) strcmp( aaa "headtai" ) 0== ]

t[ "blahblah" -> aaa  strcmp( strchr( aaa 'l' ) "lahblah" ) 0== ]
t[ "blahblah" -> aaa  strcmp( strrchr( aaa 'l' ) "lah" ) 0== ]
t[ "blahblah" -> aaa  strchr( aaa 'q' ) 0== ]

t[ strcmp( aaa "blahblah" ) 0== ]
t[ strcmp( aaa "BlahblaH" ) 1 == ]
t[ stricmp( aaa "BlahblaH" ) 0== ]
t[ stricmp( aaa "Blahbla" ) 1 == ]

t[ strcmp( strstr( aaa "ahbl" ) "ahblah" ) 0== ]
t[ strstr( aaa "ahab" ) 0== ]
// strcpy strncpy strlen strcat strncat strchr strrchr strcmp stricmp strstr strtok

///////////////////////////////////////////////////////////

// Test inline comments
: _fail_ " FAILED! " %s ;
: _ok_ %d /* _fail_ */ ;
// "The following line should have \"123456\" on it\n" %s
startTest
( 1 _ok_ ) true -> parenIsComment ( _fail_ ) 2 _ok_ ( _fail_
3 _ok_ false -> parenIsComment _ok_( 4 ) /* _fail_
5 _ok_ /* _fail_ */ 6 _ok_ %nl
t[ checkResult( "123456\n" ) ]

///////////////////////////////////////////////////////////

// Test basic ops - only errors are displayed
decimal

//loaddone
// + - * / or and xor not 
t[ 1 5 + 6 == ] t[ 1 -4 + -3 == ] t[ 0x80000000 -1 + 0x7fffffff == ] t[ 1 5 - -4 == ] t[ 1 -4 - 5 == ] t[ 0x80000000 -1 - 0x80000001 == ]
t[ 3 7 * 21 == ] t[ 0x101 0x11 * 0x1111 == ] t[ -5 -7 * 35 == ] t[ 22 7 / 3 == ] t[ 99 11 / 9 == ] t[ -100 7 / -14 == ] t[ -65535 256 / -255 == ]
t[ true false or ] t[ 33 7 or 39 == ] t[ 0xf0f 0x0f0 or 0xfff == ] t[ 0x1234 0x350461 or 0x351675 == ] t[ true false and not ]
t[ 33 7 and 1 == ] t[ 0xf0f 0x0f0 and 0== ] t[ true false xor   33 7 xor 38 == ] t[ 0xf0f 0x0f0 xor 0xfff == ] t[ 0x505 0x141 xor 0x444 == ]

// u* 2* 4* 8* 2/ 4/ 8/ /mod mod negate
t[ -5 -7 u* -12 35 l== ] t[ 243 2* 486 == ] t[ 243 4* 972 == ] t[ 243 8* 1944 == ] t[ 744 2/ 372 == ] t[ 744 4/ 186 == ] t[ 744 8/ 93 == ]
t[ 4183 23 /mod 20 181 l== ] t[ 193747 39 mod 34 == ] t[ -34 negate 34 == ]

// f+ f- f* f/ f== f!= f> f>= f< f<= 
t[ 3.5 4.25 f+ 7.75 f== ] t[ 8.5 3.25 f- 5.25 f== ] t[ 3.5 4.5 f* 63.0 4.0 f/ f== ] t[ 5.0 4.0 f!= ] t[ 27.3 22.2 f> ] t[ 27.3 27.3 f> not ]
t[ 27.3 27.3 f>= ] t[ 7.2 121.9 f< ] t[ 676.0 676.0 f< not ] t[ 676.0 676.0 f<= ]

// f0== f0!= f0> f0>= f0< f0<= fwithin fmin fmax
t[ 0.0 f0== ] t[ 0.7 f0== not ] t[ 0.0 f0> not ] t[ 1.2 f0> ] t[  0.0 f0>= ] t[ -3.3 f0>= not ] t[ 5.1 f0>= ] t[ 9.4 f0< not ]
t[ 0.0 f0<= ] t[  -2.3 f0<= ] t[ -5.0 -1.0 1.0 fwithin not ] t[ 0.5 -1.0 1.0 fwithin ] t[ 7.0 -1.0 1.0 fwithin not ]
t[ 5.0 2.3 fmin 2.3 f== ] t[ -10.0 4.3 fmax 4.3 f== ]
   
// d+ d- d* d/ d== d!= d> d>= d< d<= 
t[ 3.5d 4.25d d+ 7.75d d== ] t[ 8.5d 3.25d d- 5.25d d== ] t[ 3.5d 4.5d d* 63.0d 4.0d d/ d== ] t[ 5.0d 4.0d d!= ] t[ 27.3d 22.2d d> ]
t[ 27.3d 27.3d d> not ] t[ 27.3d 27.3d d>= ] t[ 7.2d 121.9d d< ] t[ 676.0d 676.0d d< not ] t[ 676.0d 676.0d d<= ]

// d0== d0!= d0> d0>= d0< d0<= dwithin dmin dmax
t[ 0.0d d0== ] t[ 0.7d d0== not ] t[ 0.0d d0> not ] t[ 1.2d d0> ] t[ 0.0d d0>= ] t[ -3.3d d0>= not ] t[ 5.1d d0>= ]
t[ 9.4d d0< not ] t[ 0.0d d0<= ] t[  -2.3d d0<= ] t[ -5.0d -1.0d 1.0d dwithin not ] t[ 0.5d -1.0d 1.0d dwithin ]
t[ 7.0d -1.0d 1.0d dwithin not ] t[ 5.0d 2.3d dmin 2.3d d== ] t[ -10.0d 4.3d dmax 4.3d d== ]
   
// << >> u>>
t[ 1 8 << 256 == ] t[ 17 2 << 68 == ] t[ -80 3 >> -10 == ] t[ 19 2 >> 4 == ]

// dup ?dup swap over rot pick
t[ 17 5 dup 2 pick tuck 17 == swap 5 == and rot 5 == rot 17 == 0 drop and rot 17 == ]
t[ 87 5 ?dup 0 ?dup 0== rot 5 == rot 5 == and and over 87 == rot 87 == ]

// -rot nip tuck roll
// ddup dswap ddrop dover drot r[ ]r
// c! c@ sc@ c2l w! w@ sw@ w2l ! @ d! d@ 
// memcpy memset varAction! varAction@
// l+ l- l* l/ lmod l/mod lnegate i2l i2f l2d f2l d2l
// l== l!= l> l>= l< l<= l0== l0> l0>= l0< l0<= lwithin lmin lmax
// . %d %x %lld %llx %s %c %block %bl %nl %f %g %fmt
// printDecimalSigned printAllSigned printAllUnsigned octal decimal hex


t[ 0xDEADBEEF 123456789 l== ]	// check for stack underflow or extra items

%nl

///////////////////////////////////////////////////////////
// test interpret

: ee interpret( "'e' %c 'y' %c" );
: cc interpret( "'c' %c" );
: bb interpret( "'b' %c" ) cc interpret( "'d' %c" ) ;
: aa interpret( "'a' %c" ) bb ee interpret( "'z' %c" ) ;

//t[ strcmp( aa "abcdeyz" ) 0== ]

///////////////////////////////////////////////////////////

//%nl %nl "Hit ENTER to exit" %s
//stdin fgetc
: finalCheck
  if( testFailed not )
    "All tests succeeded\n" %s
  endif
;
finalCheck

loaddone

