// this file is loaded the first time "help" is executed - if this file hasn't been loaded, help just leaves the address of the
// desired symbol on TOS and loads this file - the last line in this file should be a $help op which will display the desired
// help after these definitions have been loaded

"Loading help definitions\n" %s
// help definitions for builtin ops
addHelp abort			abort		terminate execution with fatal error
addHelp drop			VAL drop	drop top element of param stack
addHelp _doDoes			INTERNAL	compiled at start of "does" section of words created by a builds...does word
addHelp lit							pushes longword which is compiled immediately after it
addHelp flit						pushes float which is compiled immediately after it
addHelp dlit						pushes double which is compiled immediately after it
addHelp _doVariable		INTERNAL	compiled at start of words defined by "variable"
addHelp _doConstant		INTERNAL	compiled at start of words defined by "constant"
addHelp _doDConstant	INTERNAL	compiled at start of words defined by "dconstant"
addHelp _endBuilds		INTERNAL	compiled at end of "builds" section
addHelp done			INTERNAL	makes inner interpreter return - used by outer interpreter
addHelp _doByte			INTERNAL	compiled at start of byte global vars
addHelp _doShort		INTERNAL	compiled at start of short global vars
addHelp _doInt			INTERNAL	compiled at start of int global vars
addHelp _doFloat		INTERNAL	compiled at start of float global vars
addHelp _doDouble		INTERNAL	compiled at start of double global vars
addHelp _doString		INTERNAL	compiled at start of string global vars
addHelp _doOp			INTERNAL	compiled at start of opcode global vars
addHelp ->				-> VAR		set next variable action to "store"
addHelp _do				INTERNAL	compiled at start of do loop
addHelp _loop			INTERNAL	compiled at end of do loop
addHelp _+loop			INTERNAL	compiled at end of do +loop
addHelp _exit			INTERNAL	compiled at end of user definitions which have no local vars
addHelp _exitL			INTERNAL	compiled at end of user definitions which have local vars
addHelp _exitM			INTERNAL	compiled at end of method definitions which have no local vars
addHelp _exitML			INTERNAL	compiled at end of method definitions which have local vars
addHelp _doVocab		INTERNAL	compiled at start of vocabularies
addHelp _doByteArray    INTERNAL	compiled at start of byte global arrays
addHelp _doShortArray	INTERNAL	compiled at start of short global arrays
addHelp _doIntArray		INTERNAL	compiled at start of int global arrays
addHelp _doFloatArray	INTERNAL	compiled at start of float global arrays
addHelp _doDoubleArray	INTERNAL	compiled at start of double global arrays
addHelp _doStringArray	INTERNAL	compiled at start of string global arrays
addHelp _doOpArray		INTERNAL	compiled at start of opcode global arrays
addHelp initString		INTERNAL	compiled when a local string variable is declared
addHelp initStringArray	INTERNAL	compiled when a local string array is declared
addHelp _doStruct
addHelp _doStructArray
addHelp _doStructType

addHelp +		A B ... (A+B)		add top two items
addHelp -		A B ... (A-B)		subtract top two items
addHelp *		A B ... (A*B) 	mutliply top two items
addHelp 2*		A  ... (A*2)		multiply top item by 2
addHelp 4*		A  ... (A*4)		multiply top item by 4
addHelp /		A B ... (A/B)		divide top two items
addHelp 2/		A ... (A/2)		divide top item by 2
addHelp 4/		A ... (A/4)		divide top item by 4
addHelp /mod	A B ... (A/B) (A mod B)	divide top two items, return quotient & remainder
addHelp mod		A B ... (A mod B)			take modulus of top two items
addHelp negate	A ... (-A)	negate top item

addHelp f+	FA FB ... (FA+FB)	add top two floating point items
addHelp f-	FA FB ... (FA-FB)	subtract top two floating point items
addHelp f*	FA FB ... (FA*FB)	multiply top two floating point items
addHelp f/	FA FB ... (FA/FB)	divide top two floating point items

addHelp d+	DA DB ... (DA+DB)	add top two double floating point items
addHelp d-	DA DB ... (DA-DB)	subtract top two double floating point items
addHelp d*	DA DB ... (DA*DB)	multiply top two double floating point items
addHelp d/	DA DB ... (DA/DB)	divide top two double floating point items

addHelp dsin		DA    ... sin(DA)
addHelp darcsin		DA    ... arcsin(DA)
addHelp dcos		DA    ... cos(DA)
addHelp darccos		DA    ... arccos(DA)
addHelp dtan		DA    ... tan(DA)
addHelp darctan		DA    ... arctan(DA)
addHelp darctan2	DA DB ... arctan(DA/DB)
addHelp dexp		DA    ... exp(DA)
addHelp dln			DA    ... ln(DA)
addHelp dlog10		DA    ... log10(DA)
addHelp dpow		DA DB ... DA**DB
addHelp dsqrt		DA    ... sqrt(DA)
addHelp dceil		DA    ... ceil(DA)
addHelp dfloor		DA    ... floor(DA)
addHelp dabs		DA    ... abs(DA)
addHelp dldexp		DA B  ... ldexp(DA,B)
addHelp dfrexp		DA    ... frac(DA) exponent(DA)
addHelp dmodf		DA    ... frac(DA) whole(DA)
addHelp dfmod		DA DB ... fmod(DA,DB)

addHelp i2f			A ... float(A)
addHelp i2d			A ... double(A)
addHelp f2i			A ... int(A)
addHelp f2d			A ... double(A)
addHelp d2i			A ... int(A)
addHelp d2f			A ... float(A)

addHelp call		IP ...			rpushes current IP and sets IP to that on TOS
addHelp goto		IP ...			sets IP to that on TOS
addHelp i			... LOOPINDEX_I		pushes innermost doloop index
addHelp j			... LOOPINDEX_J		pushes next innermost doloop index
addHelp unloop		
addHelp leave

addHelp or		A B ... or(A,B)
addHelp and		A B ... and(A,B)
addHelp xor		A B ... xor(A,B)
addHelp ~		A   ... ~A
addHelp <<		A B ... A<<B
addHelp >>		A B ... A>>B
addHelp not		A   ... not(A)   true iff A is 0, else false
addHelp true	    ... -1
addHelp false	    ... 0
addHelp null	    ... 0

addHelp ==		A B ... A==B
addHelp !=		A B ... A!=B
addHelp >		A B ... A>B
addHelp >=		A B ... A>=B
addHelp <		A B ... A<B
addHelp <=		A B ... A<=B
addHelp 0==		A   ... A==0
addHelp 0!=		A   ... A!=0
addHelp 0>		A   ... A>0
addHelp 0>=		A   ... A>=0
addHelp 0<		A   ... A<0
addHelp 0<=		A   ... A<=0

addHelp r<		A ...		pushes top of param stack on top of return stack
addHelp r>		... A		pops top of return stack to top of param stack
addHelp rdrop	...		drops top of return stack
addHelp rp		... RETURN_STACK_PTR
addHelp r0		... EMPTY_RETURN_STACK_PTR

addHelp dup		A ... A A
addHelp swap	A B ... B A
addHelp over	A B ...	A B A
addHelp rot		A B C ... B C A
addHelp tuck	A B C ... A C B C
addHelp pick	A ... PS(A)
addHelp roll	N ...		rolls Nth item to top of params stack
addHelp sp		... PARAM_STACK_PTR
addHelp s0		... EMPTY_PARAM_STACK_PTR
addHelp fp		... LOCAL_VAR_FRAME_PTR
addHelp ddup	DA ...	DA DA
addHelp dswap	DA DB ... DB DA
addHelp ddrop	DA ...
addHelp dover	DA DB ... DA DB DA
addHelp drot	DA DB DC ... DB DC DA

addHelp align	...		aligns DP to a lonword boundary
addHelp allot	A ...	adds A*4 to DP
addHelp callot	A ...	adds A to DP
addHelp ,		A ...	compiles longword A
addHelp c,		A ...	compiles byte A
addHelp here	... DP	returns DP
addHelp malloc	A ... PTR	allocates a block of memory with A bytes
addHelp free	PTR ...		frees a block of memory

addHelp !		A PTR ...	stores longword A at address PTR
addHelp @		PTR ... A	fetches longword from address PTR
addHelp c!		A PTR ...	stores byte A at address PTR
addHelp c@		PTR ... A	fetches unsigned byte from address PTR
addHelp sc@		PTR ... A	fetches signed byte from address PTR
addHelp c2l		A ... LA	sign extends byte to long
addHelp w!		A PTR ...	stores word A at address PTR
addHelp w@		PTR ... A	fetches unsigned word from address PTR
addHelp sw@		PTR ... A	fetches signed word from address PTR
addHelp w2l		WA ... LA	sign extends word to long
addHelp d!		DA PTR ...	store double at address PTR
addHelp d@		PTR ... DA	fetch double from address PTR
addHelp memcpy	DST SRC N ...	copy N bytes from SRC to DST
addHelp memset	DST A N ...		fill N bytes at DST with byte value A
addHelp ->+		N ->+ VAR ...	add N to VAR
addHelp ->-		N ->- VAR ...	subtract N from VAR
addHelp addressOf	addressOf VAR ... PTR	return address of VAR
addHelp varAction!	A varAction! ...	set varAction to A
addHelp varAction@	varAction@ ... A	fetch varAction

addHelp strcpy	STRA STRB ...	copies string from STRB to STRA
addHelp strncpy	STRA STRB N ...	copies up to N chars from STRB to STRA
addHelp strlen	STR ... LEN		returns length of string at STR
addHelp strcat	STRA STRB ...	appends STRB to string at STRA
addHelp strncat	STRA STRB N ...	appends up to N chars from STRB to STRA
addHelp strchr	STR CHAR ... PTR	returns ptr to first occurence of CHAR in string STR
addHelp strrchr	STR CHAR ... PTR	returns ptr to last occurence of CHAR is string STR
addHelp strcmp	STRA STRB ... N		returns 0 iff STRA == STRB, else result of last char comparison
addHelp stricmp	STRA STRB ... N		returns 0 iff STRA == STRB ignoring case, else result of last char comparison,
addHelp strstr	STRA STRB ... PTR	returns ptr to first occurence of STRB in string STRA
addHelp strtok	STRA STRB ... PTR	returns ptr to next token in STRA, delimited by a char in STRB, modifies STRA, pass 0 for STRA after first call

addHelp builds
addHelp :
addHelp create

addHelp forth		...							overwrites the top of the vocabulary stack with forth vocabulary
addHelp definitions	...							makes the top of the vocabulary stack be the destination of newly defined words
addHelp vocabulary	vocabulary VOCAB			create a new vocabulary
addHelp also		...							duplicates top of vocabulary stack, use "also vocab1" to add vocab1 to the stack above current vocab
addHelp previous	...							drops top of vocabulary stack
addHelp only		...							sets the vocabulary stack to just one element, forth, use "only vocab1" to make vocab1 the only vocab in stack
addHelp forget		forget WORDNAME				forget named word and all newer definitions
addHelp autoforget	autoforget WORDNAME			forget named word and all newer definitions, don't report error if WORDNAME is not defined yet
addHelp getNewest	getNewest VOCAB ... PTR_TO_SYMBOL	get a pointer to newest symbol in VOCAB
addHelp findEntry	SYMNAME findEntry VOCAB ...	PTR_TO_SYMBOL	search VOCAB for SYMNAME, return pointer to symbol entry or NULL if not found
addHelp findEntryValue	SYMVALUE findEntryValue VOCAB ... PTR_TO_SYMBOL		search VOCAB for word whose value is SYMVALUE, return pointer to symbol entry or NULL if not found
addHelp addEntry	NAME TYPE VAL addEntry VOCAB ...	add new symbol to VOCAB - VAL holds low 24 bits, TYPE is high 8 bits of opcode
addHelp removeEntry	NAME removeEntry VOCAB ...		remove named symbol from VOCAB
addHelp entryLength	entryLength VOCAB ... NLONGS	length of symbol value field in longwords
addHelp numEntries	numEntries VOCAB ... NSYMBOLS	return number of symbols in VOCAB



addHelp variable			variable VAR_NAME		creates a variable op which pushes its address when executed
addHelp constant			A constant CON_NAME		creates a constant op which pushes A when executed
addHelp dconstant			DA dconstant CON_NAME	creates a double constant op which pushes DA when executed
addHelp enum:
addHelp ;enum
addHelp precedence
addHelp load
addHelp loaddone
addHelp interpret
addHelp ]					sets state to compile
addHelp state				leaves address of "state" var on TOS
addHelp \'
addHelp execute

addHelp .					NUM ...				prints number in current base
addHelp %d					NUM ...				prints number in decimal
addHelp %x					NUM ...				prints number in hex
addHelp %s					STRING ...			prints string
addHelp %c					CHARVAL ...			prints character
addHelp %bl					prints a space
addHelp %nl					prints a newline
addHelp %f					FPNUM ...			prints a single-precision floating point number
addHelp %g					DOUBLE_FPNUM ...	prints a double-precision floating point number
addHelp %fmt				ARG FORMAT_STRING ...	prints a formatted string
addHelp base				leaves address of "base" var on TOS
addHelp decimal				sets current base to 10
addHelp hex					sets current base to 16
addHelp printDecimalSigned	makes all decimal printing signed, printing in any other base is unsigned	
addHelp printAllSigned		makes printing in any base signed
addHelp printAllUnsigned	makes printing in any base unsigned

addHelp outToFile			FILE ...	redirect output to file
addHelp outToScreen			...			set output to screen (standard out)
addHelp outToString			STRING ...	redirect output to string
addHelp	outToOp				OP ...		redirect output to forth op (op takes a single string argument, returns nothing)
addHelp getConOutFile		... FILE	returns redirected output file

addHelp fopen				PATH_STR ATTRIB_STR ... FILE		open file
addHelp fclose				FILE ... RESULT						close file
addHelp fseek				FILE OFFSET CTRL ... RESULT			seek in file, CTRL: 0 from start, 1 from current, 2 from end 
addHelp fread				NITEMS ITEMSIZE FILE ... RESULT		read items from file
addHelp fwrite				NITEMS ITEMSIZE FILE ... RESULT		write items to file
addHelp fgetc				FILE ... CHARVAL					read a character from file
addHelp fputc				CHARVAL FILE ... RESULT				write a character to file
addHelp feof				FILE ... RESULT						check if file is at end-of-file
addHelp ftell				FILE ... OFFSET						return current read/write position in file
addHelp flen				FILE ... FILE_LENGTH				return length of file
addHelp stdin				... FILE							get standard in file
addHelp stdout				... FILE							get standard out file
addHelp stderr				... FILE							get standard error file
addHelp fprintf				FILE FORMAT_STRING (ARGS) NUM_ARGS ... RESULT		print formatted string to file

addHelp dstack				display parameter stack
addHelp drstack				display return stack
addHelp vlist				display current search vocabulary
addHelp system				STRING ... RESULT				pass DOS command line to system, returns exit code (0 means success)
addHelp chdir				STRING ... RESULT				change current working directory, returns exit code (0 means success)
addHelp bye					exit forth
addHelp argv				INDEX ... STRING_ADDR			return arguments from command line that started forth
addHelp argc				... NUM_ARGUMENTS				return number of arguments from command line that started forth (not counting "forth" itself)

addHelp DLLVocabulary			DLLVocabulary VOCAB_NAME			creates a new DLL vocabulary, also loads the dll
addHelp addDLLEntry				NUM_ARGS "ENTRY_NAME" addDLLEntry	adds a new entry point to current definitions DLL vocabulary

addHelp blword					... STRING_ADDR						fetch next whitespace-delimited token from input stream, return its address
addHelp word					CHARVAL ... STRING_ADDR				fetch next token delimited by CHARVAL from input stream, return its address
addHelp getInBufferBase			... INPUT_BUFFER_ADDR				return address of base of input buffer
addHelp getInBufferPointer		... INPUT_BUFFER_ADDR				return address of cursor position in input buffer
addHelp setInBufferPointer		ADDR ...							set cursor position in input buffer
addHelp getInBufferLength		... LEN								return size of input buffer (maximum input line length)
addHelp fillInBuffer			PROMPT_STRING ... INPUT_BUFFER_ADDR		display prompt, fill input buffer & return input buffer address

addHelp turbo			...		switches between slow and fast mode
addHelp stats			...		displays forth engine statistics
addHelp describe		describe OPNAME		displays info on op, disassembles userops

// ops below this line have precedence
addHelp _doEnum
addHelp do				ENDVAL STARTVAL ...			start do loop, ends at ENDVAL-1
addHelp loop			...							end do loop
addHelp +loop			INCREMENT ...				end do loop, add INCREMENT to index each time
addHelp if				BOOL ...					start if statement
addHelp else										start else branch of if statement
addHelp endif										end if statement
addHelp begin										begin loop statement
addHelp until			BOOL ...					loop back to "begin" if BOOL is false
addHelp while			BOOL ...					exit loop after "repeat" if BOOL is false
addHelp repeat										end loop statement
addHelp again										loop back to "begin"
addHelp case
addHelp of
addHelp endof
addHelp endcase
addHelp does
addHelp exit
addHelp ;
addHelp byte
addHelp short
addHelp int
addHelp float
addHelp double
addHelp string
addHelp op
addHelp void
addHelp arrayOf
addHelp ptrTo
addHelp struct:
addHelp ;struct
addHelp sizeOf
addHelp offsetOf
addHelp recursive
addHelp [
addHelp [compile]
addHelp [\']

addHelp time		... TIME_AS_INT64
addHelp strftime 	BUFFADDR BUFFLEN FORMAT_STRING TIME_AS_INT64 ...	puts formatted string in buffer
// THIS NEXT LINE MUST BE THE LAST IN THIS FILE!

$help
