autoforget forth_autoload
: forth_autoload "This is the forth_autoload.txt tools module" %s ;

200 string _aa
200 string _bb

: $,
  // TOS is ptr to nul terminated string at DP
  here over strlen 1+ callot
  swap strcpy
;

0 -> int helpChain
: addHelp
  here helpChain , -> helpChain		// link new entry into help chain
  blword $,		// compile new symbol
  0 word $,		// compile symbols help definition
  align
;

false -> int _helpfileLoaded

: $help
  -> ptrTo byte s
  helpChain	-> int pNext
  s strlen 0==
  if
    // line was empty, just list all help
    begin
      pNext
    while
      pNext 4+ dup %s "	" %s
      dup strlen 1+ + %s %nl
      pNext @ -> pNext
    repeat
    exit
  endif

  begin
    pNext
  while
    pNext 4+ s strcmp 0==
    if
      pNext 4+ dup strlen 1+ + %s
      exit
    endif
    pNext @ -> pNext
  repeat
  s %s " not found!\n" %s
;


: help
  blword -> _aa
  _aa
  _helpfileLoaded not if
    "help.txt" load$
    true -> _helpfileLoaded
    // there is a help$ at end of help.txt that will complete the lookup
  else
    $help
  endif
;

addHelp addHelp	addHelp SYMBOL REST_OF_LINE		add help entry
addHelp $,	STRING_ADDR $,		compiles string (can leave DP unaligned)
addHelp help	help BLAH		show help for BLAH

: cd
  blword chdir
  if "cd failed!\n" %s endif
;

: pwd "chdir" system drop ;

: dir
  blword -> _aa
  "dir" -> _bb
  strcmp( _aa "" )
  if
    // user specified a directory
    strcat( _bb " " )
    strcat( _bb _aa )
  endif
  _bb system drop
;

: sys 0 word system drop ;

: ds dstack ;
: fileExists "r" fopen dup if fclose drop true else drop false endif ;

addHelp cd	cd BLAH			change working directory to BLAH
addHelp pwd	pwd			display working directory
addHelp dir	dir BLAH		display directory (BLAH is optional filespec)
addHelp sys	sys REST_OF_LINE	run rest of line in a DOS shell
addHelp	ds	ds			dump stack
addHelp fileExists	"FILEPATH" fileExists ... true/false		tell if a file exists

int dumpWidth
16 -> dumpWidth

// ADDR LEN OFFSET _dump
: _dump
  -> int offset		// offset is subtracted from the actual data address before display
  -> int len
  -> int addr
  int columns
  int endAddr
  int ch

  addr len + -> endAddr
  len -> columns
  begin
    addr endAddr <
  while
    addr offset - "%08x" %fmt "   " %s
    len dumpWidth >
    if
      dumpWidth -> columns
    endif
    columns 0 do
      addr i + c@ "%02x " %fmt
    loop
    "    " %s
    // why do we have to add 1 to dumpWidth here?
    dumpWidth 1+ columns - 0 do %bl %bl %bl loop
    columns 0 do
      addr i + c@ -> ch
      ch ' ' >  ch 127 < and if
        ch
      else
        '.'
      endif
      %c
    loop
    columns ->+ addr
    columns ->- len
    %nl
  repeat
;

// ADDR LEN dump
: dump
  0 _dump
;
addHelp	dump		ADDRESS LEN dump	dump memory

// FILENAME OFFSET LEN fdump
: fdump
  -> int len
  -> int offset
  "rb" fopen -> int infile
  int buff

  infile 0== if
    "open failure" %s %nl
    exit
  endif
  len 0== if
    // read entire file
    infile flen -> len
  endif
  len malloc -> buff
  infile offset 0 fseek
  0 != if
    "fdump fseek failure" %nl exit
  endif
  buff len 1 infile fread
  0== if
    "fdump read failure" %s %nl
  else
    buff len buff _dump
  endif
  infile fclose drop
  buff free
;
addHelp fdump	FILENAME OFFSET LEN fdump	dump file contents

// FILENAME1 FILENAME2 comparefiles TRUE_IF_EQUAL
: comparefiles
  -> ptrTo byte fname2
  -> ptrTo byte fname1
  
  fname2 "rb" fopen -> int infile2
  infile2 0== if
    "failed to open " %s fname2 %s %nl
    false exit
  endif
  
  fname1 "rb" fopen -> int infile1
  infile1 0== if
    "failed to open " %s fname1 %s %nl
    infile2 fclose drop
    false exit
  endif
  
  // opened both files successfully
  1 -> int linenum
  int b1
  int b2
  begin
    infile1 fgetc -> b1
    infile2 fgetc -> b2
    b1 b2 != if
      infile1 fclose drop
      infile2 fclose drop
      "mismatch at line " %s linenum %d %nl
      false exit
    endif
    b1 '\n' == if
      1 ->+ linenum
    endif
  infile1 feof until
  infile1 fclose drop
  infile2 fclose drop
  true
;

